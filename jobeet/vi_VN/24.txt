Ngày 24: Tổng kết
=================

Hôm nay chúng ta kết thúc chuyến hành trình thú vị trong thế giới symfony. Trong suốt 23 ngày qua, bạn đã được học symfony qua các ví dụ: từ các design patterns sử dụng trong framework, đến các tính năng mạnh mẽ có sẵn trong framework. Bạn chưa trở thành master về symfony, nhưng bạn đã có đầy đủ những kiến thức cần thiết để bắt đầu xây dựng ứng dụng với symfony.

Hãy tạm quên đi Jobeet, và cùng nhìn lại những tính năng của framework mà ta đã học trong suốt 3 tuần qua.

Symfony là gì?
----------------

Symfony framework là một tập các
[sub-framework](#chapter_11_sidebar_using_the_form_framework_without_symfony) riêng biệt được gắn kết lại với nhau, theo cấu trúc của một full-stack [MVC framework](#chapter_04_the_mvc_architecture)
(Model, View, Controller).

Trước khi tìm hiểu về code, hãy dành chút thời gian để đọc về
[lịch sử và triết lý của symfony](#chapter_01_introduction).
Sau đó, kiểm tra [yêu cầu](#chapter_01_prerequisites) của framework sử dụng script [`check_configuration.php`](#chapter_01_symfony_installation).

Cuối cùng, [cài đặt symfony](#chapter_01_symfony_installation). Sau một thời gian, bạn sẽ muốn
[upgrade](#chapter_23_sub_upgrading_symfony) lên phiên bản mới nhất của framework.

Framework cũng cung cấp công cụ để dễ dàng [deployment](#chapter_23_deploying).

Model
-----

Model là một phần của symfony được thực hiện nhờ
<propel>
[Propel ORM](http://propel.phpdb.org/).
</propel>
<doctrine>
[Doctrine ORM](http://www.doctrine-project.org/).
</doctrine>
Dựa trên [mô tả về database](#chapter_03_the_schema), nó sẽ tạo ra các class cho các
[object](#chapter_03_the_orm), [form](#chapter_10_the_forms), và
[filter](#chapter_12_filters_configuration). ##ORM## cũng tạo ra
[các câu SQL](#chapter_03_the_orm) dùng để tạo các bảng trong database.

Cấu hình database có thể thực hiện thông qua [lệnh](#chapter_03_the_database)
hoặc chỉnh sửa [file cấu hình](#chapter_03_the_database). Ngoài việc cấu hình, ta còn có thể thêm các dữ liệu khởi tạo nhờ [file fixture](#chapter_03_the_initial_data). Bạn có thể tạo những file này với [dữ liệu động](#chapter_06_dynamic_fixtures).

Đối tượng Doctrine có thể [internationalized](#chapter_19_sub_doctrine_objects) một cách dễ dàng.

View
-----

Mặc định, View layer trong kiến trúc MVC sử dụng các file PHP làm templates.

Templates có thể sử dụng [helpers](#chapter_04_the_stylesheets_images_and_javascripts) cho các thao tác sử dụng thường xuyên như tạo một [URL](#chapter_05_routing_in_actions_and_templates)
hay tạo một [link](#chapter_05_routing_in_actions_and_templates).

Một template có thể sử dụng [layout](#chapter_04_the_layout) để thêm header và footer. Để views có thể dùng lại được, bạn có thể tạo các [slots](#chapter_04_slots), [partials](#chapter_07_partials), và
[components](#chapter_19_language_switching).

Để tăng tốc độ, bạn có thể sử dụng [cache sub-framework](#chapter_22_cache_configuration) để cache
[toàn bộ trang](#chapter_22_page_cache), một [action](#chapter_22_action_cache),
hoặc một [partials hay components](#chapter_22_partial_and_component_cache).
Bạn cũng có thể tự [xóa cache](#chapter_22_removing_the_cache) một cách dễ dàng.

Controller
-----------

Controller được quản lý bởi [front controllers](#chapter_01_the_environments)
và [actions](#chapter_03_see_it_in_action_in_the_browser).

Ta có thể dùng lệnh để tạo [các module đơn giản](#chapter_07_job_category_module_creation),
[CRUD modules](#chapter_03_see_it_in_action_in_the_browser), thậm chí tạo [admin modules](#chapter_12_backend_modules) với đầy đủ chức năng dựa vào các model class.

Admin modules cho phép bạn xây dựng đầy đủ chức năng admin cho ứng dụng mà không cần phải code một dòng nào.

Để ẩn đi công nghệ dùng để phát triển website, symfony sử dụng
[routing](#chapter_05_routing_configuration) sub-framework giúp tạo ra các
[URL đẹp](#chapter_05_urls). Để giúp việc phát triển web services đơn giản hơn,
symfony hỗ trợ nhiều [định dạng](#chapter_15_formats) khác nhau. Bạn cũng có thể tự tạo
[định dạng](#chapter_16_sub_the_code_yaml_code_format) cho riêng mình.

Một action có thể [forwarded](#chapter_04_sidebar_the_forward_methods_family) hoặc [redirected](#chapter_05_sidebar_the_redirect_methods_family) tới một action khác.

Cấu hình
---------

Symfony framework giúp dễ dàng có những cấu hình khác nhau cho từng môi trường. Một [môi trường](#chapter_01_the_environments) là tập các thiết lập để phù hợp với development hay production
servers. Bạn cũng có thể tự [tạo môi trường riêng](#chapter_22_creating_a_new_environment).

File cấu hình của symfony được xác định ở [các mức khác nhau](#chapter_04_sidebar_configuration_principles_in_symfony) và
[tương ứng với từng môi trường](#chapter_08_sidebar_configuration_principles_in_symfony):

 * [`app.yml`](#chapter_06_custom_configuration)
 * [`cache.yml`](#chapter_22_cache_configuration)
 * [`databases.yml`](#chapter_03_the_database)
 * [`factories.yml`](#chapter_23_the_factories)
 * [`generator.yml`](#chapter_12_the_symfony_cache)
 * [`routing.yml`](#chapter_05_routing_configuration)
 * [`schema.yml`](#chapter_03_the_schema)
 * [`security.yml`](#chapter_13_sub_authentication)
 * [`settings.yml`](#chapter_11_sub_built_in_security_features)
 * [`view.yml`](#chapter_04_the_stylesheets_images_and_javascripts)

File cấu hình sử dụng [định dạng YAML](#chapter_03_sidebar_the_yaml_format).

Thay vì sử dụng cấu trúc thư mục mặc định và tổ chức ứng dụng của bạn theo các layer, bạn có thể tổ chức chúng theo chức năng và đóng gói lại thành
[một plugin](#chapter_20_sub_a_different_way_to_organize_code). Với cấu trúc thư mục mặc định của symfony, bạn cũng có thể [chỉnh sửa nó](#chapter_23_customizing_the_directory_structure) cho phù hợp với nhu cầu của mình.

Debug
------

Symfony cung cấp rất nhiều công cụ hữu ích để giúp lập trình viên tìm ra lỗi nhanh nhất có thể: từ [file log](#chapter_06_debugging_propel_generated_sql) đến
[web debug toolbar](#chapter_06_debugging_propel_generated_sql), và
[các exception](#chapter_01_the_environments) rõ ràng.

Các Symfony Object chính
------------------------

Symfony frameworks cung cấp một số object trừu tượng các đối tượng hay sử dụng trong
web projects: [request](#chapter_04_sub_the_request),
[response](#chapter_04_sub_the_response), [user](#chapter_13_sub_the_code_myuser_code_class), [logging](#chapter_23_sub_logging), [routing](#chapter_05_routing_configuration), và [view cache manager](#chapter_22_removing_the_cache).

Những object này được quản lý bởi [`sfContext` object](#chapter_22_sidebar_the_code_sfcontext_code_class), và được cấu hình dựa trên [factories](#chapter_23_the_factories).

Việc quản lý người dùng sử dụng [authentication](#chapter_13_sub_authentication),
[authorization](#chapter_13_sub_authorization), [flashes](#chapter_13_user_flashes),
và [attributes](#chapter_13_user_attributes) lưu trong session.

Bảo mật
--------

Symfony framework có sẵn tính năng bảo mật đối với
[XSS](#chapter_01_sub_application_creation) và [CSRF](#chapter_01_sub_application_creation) attack. Những thiết lập này có thể được cấu hình từ [dòng lệnh](#chapter_01_sub_application_creation), hoặc chỉnh sửa [file cấu hình](#chapter_11_sub_xss_and_csrf_protection).

Form framework cũng cung cấp sẵn [các tính năng bảo mật](#chapter_11_sub_built_in_security_features).

Forms
-----

Do quản lý form là một trong những thao tác phức tạp trong phát triển web, nên symfony
cung cấp một [form sub-framework](#chapter_10_the_form_framework) để công việc trở nên đơn giản hơn. Form framework có sẵn rất nhiều [widgets](http://www.symfony-project.org/api/1_2/widget)
và [validators](http://www.symfony-project.org/api/1_2/validator). Một trong những điểm mạnh của form sub-framework là templates trở nên [đơn giản và dễ chỉnh sửa](#chapter_10_sidebar_customizing_the_look_and_feel_of_a_form).

Nếu bạn sử dụng ##ORM##, form framework cũng dễ dàng tạo ra
[các forms và filters](#chapter_10_propel_forms) dựa trên models.

Internationalization và Localization
-------------------------------------

Symfony hỗ trợ sẵn [Internationalization](#chapter_19_internationalization) Và
[localization](#chapter_19_localization) nhờ ICU standard. [User culture](#chapter_19_sub_the_user_culture) xác định ngôn ngữ và quốc gia của người dùng. Nó có thể tạo bởi người dùng hoặc nhúng trong [URL](#chapter_19_culture_in_the_url).

Test
-----

Thư viện lime, sử dụng cho **unit tests**, cung cấp rất nhiều
[testing methods](#chapter_08_the_code_lime_code_testing_framework).
<propel>
[Propel objects cũng có thể được test](#chapter_08_propel_unit_tests)
</propel>
<doctrine>
[Doctrine objects cũng có thể được test](#chapter_08_doctrine_unit_tests)
</doctrine>
 với một [database riêng](#chapter_08_sub_database_configuration) và
các [fixtures riêng](#chapter_08_sub_test_data).

Unit tests có thể chạy [riêng biệt](#chapter_08_running_unit_tests) hoặc [gộp chung lại](#chapter_08_unit_tests_harness).

**Functional tests** được thực hiện nhờ
[`sfFunctionalTest`](#chapter_09_the_code_sftestfunctional_code_class) class, sử dụng một
[trình duyệt giả lập](#chapter_09_the_code_sfbrowser_code_class) cho phép
kiểm tra các object của symfony thông qua các
[Tester](#chapter_09_the_code_sftestfunctional_code_class). Có sẵn các Tester cho
[request object](#chapter_09_sub_the_request_tester),
[response object](#chapter_09_sub_the_response_tester),
[user object](#chapter_13_user_testing),
[current form object](#chapter_11_the_form_tester),
[cache layer](#chapter_22_testing_the_cache) và
<propel>
[Propel objects](#chapter_11_the_propel_tester).
</propel>
<doctrine>
[Doctrine objects](#chapter_11_the_doctrine_tester).
</doctrine>

Bạn cũng có thể sử dụng công cụ debug cho
[response](#chapter_09_debugging_functional_tests)
và [forms](#chapter_11_the_form_tester).

Cũng như unit tests, functional tests cũng có thể chạy
[riêng biệt](#chapter_09_running_functional_tests) hoặc
[gộp chung lại](#chapter_09_functional_tests_harness).

Bạn cũng có thể chạy [tất cả các test](#chapter_09_tests_harness) thông qua một lệnh.

Plugins
-------

Symfony framework chỉ cung cấp nền tảng cho ứng dụng web của bạn và dựa trên các [plugins](#chapter_20_using_plugins) để cung cấp thêm các tính năng. Trong loạt bài hướng dẫn này, chúng ta đã nói về [`sfGuardPlugin`](#chapter_13_plugins),
[`sfFormExtraPlugin`](#chapter_19_language_switching), và
[`sfTaskExtraPlugin`](#chapter_20_contributing_a_plugin).

Một plugin phải được [kích hoạt](#chapter_20_sidebar_plugin_activation) sau khi cài đặt.

Plugins là cách tốt nhất để [đóng góp](#chapter_20_contributing_a_plugin)
cho dự án symfony.

Tasks
-----

Symfony CLI cung cấp rất nhiều lệnh, và phần lớn các lệnh hữu ích đã được đề cập trong hướng dẫn này:

 * [`app:routes`](#chapter_05_route_debugging)
 * [`cache:clear`](#chapter_22_clearing_the_cache)
 * [`configure:database`](#chapter_03_the_database)
 * [`generate:project`](#chapter_01_sub_project_creation)
 * [`generate:app`](#chapter_01_sub_application_creation)
 * [`generate:module`](#chapter_07_job_category_module_creation)
 * [`help`](#chapter_03_the_orm)
 * [`i18n:extract`](#chapter_19_sub__code_i18n_extract_code_)
 * [`list`](#chapter_13_backend_security)
 * [`plugin:install`](#chapter_13_plugins)
 * [`plugin:publish-assets`](#chapter_20_sub_the_assets)
 * [`project:deploy`](#chapter_23_sub_deploying_strategies)
 * [`propel:build-all`](#chapter_03_the_orm)
 * [`propel:build-all-load`](#chapter_07_update_the_database)
<propel>
 * [`propel:build-forms`](#chapter_10_propel_forms)
</propel>
<doctrine>
 * [`doctrine:build-forms`](#chapter_10_doctrine_forms)
</doctrine>
 * [`propel:build-model`](#chapter_03_the_orm)
 * [`propel:build-sql`](#chapter_03_the_orm)
 * [`propel:data-load`](#chapter_03_the_initial_data)
 * [`propel:generate-admin`](#chapter_12_backend_modules)
 * [`propel:generate-module`](#chapter_03_see_it_in_action_in_the_browser)
 * [`propel:insert-sql`](#chapter_03_the_orm)
 * [`test:all`](#chapter_09_tests_harness)
 * [`test:coverage`](#chapter_08_sidebar_code_coverage)
 * [`test:functional`](#chapter_09_running_functional_tests)
 * [`test:unit`](#chapter_08_running_unit_tests)

Bạn cũng có thể [tự tạo lệnh](#chapter_11_maintenance_tasks) cho mình.

Hẹn gặp lại
------------

Trước khi kết thúc, tôi muốn nói một điều cuối cùng về symfony. Framework có rất nhiều tính năng tốt và rất nhiều tài liệu miễn phí. Nhưng điều quan trọng tạo nên giá trị của Open-Source đó là cộng đồng. Và symfony đã có một cộng đồng đông đảo và năng động. Nếu bạn bắt đầu sử dụng symfony cho dự án của mình, đừng quên tham gia vào cộng đồng symfony:

  * Theo dõi [user mailing-list](http://groups.google.com/group/symfony-users)
  * Theo dõi [blog feed](http://feeds.feedburner.com/symfony/blog) trên trang chủ
  * Theo dõi symfony [planet feed](http://feeds.feedburner.com/symfony/planet)
  * Tham gia thảo luận trên [#symfony IRC](irc://irc.freenode.net/symfony)

Người dịch: Nguyễn Hữu Quân - huu2uan [at] gmail.com.

__ORM__