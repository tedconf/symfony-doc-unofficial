Ngày 12: Admin Generator
===========================

Tóm tắt
--------------------

Với những việc chúng ta đã làm ngày hôm qua, frontend application bây giờ đã
đầy đủ tính năng cho việc gửi công việc mới và xem danh sách công việc. Bây giờ
chúng ta sẽ nói về backend application.

Hôm nay, nhờ có chức năng admin generator của symfony, chúng ta sẽ phát triển
toàn bộ backend interface cho Jobeet chỉ trong 1 giờ.

Tạo Backend
----------------

Việc đầu tiên là phải tạo backend application. Có thể bạn đã biết cách thực hiện việc này thông qua lệnh `generate:app`:

    $ php symfony generate:app --escaping-strategy=on
      ➥ --csrf-secret=Unique$ecret1 backend

Mặc dù backend application chỉ được dùng bởi administrators, nhưng chúng ta vẫn enable tất cả các tính năng bảo mật có sẵn của symfony.

Backend application bây giờ đã có thể truy cập ở
`http://jobeet.localhost/backend.php` đối với môi trường `prod`, và
`http://jobeet.localhost/backend_dev.php` với môi trường `dev`.

>**NOTE**
>Khi bạn tạo frontend application, production front controller có tên là
>`index.php`. Do bạn chỉ có thể có một file `index.php` trong thư mục,
>symfony sẽ dùng file `index.php` cho production front
>controller đầu tiên còn các production front controller khác thì có tên như tên application.

Nếu bạn thử reload data fixtures với lệnh `propel:data-load` , nó
sẽ không làm việc. Đó là bởi vì phương thức `JobeetJob::save()` cần truy cập
file cấu hình `app.yml` từ `frontend` application.
Bây giờ chúng ta có 2 application, symfony sẽ sử dụng file đầu tiên nó tìm thấy, đó là file nằm trong `backend`.

Nhưng như đã nói trong ngày 8, các setting có thể được cấu hình ở các mức khác nhau.
Bằng cách chuyển nội dung từ file `apps/frontend/config/app.yml` sang file
`config/app.yml`, những thiết lập này có thể được chia sẻ giữa các application
khác nhau và vấn đề được giải quyết. Chúng ta sẽ dùng các model classe
rất nhiều trong admin generator, vì thế chúng ta cần các biến thiết lập trong file `app.yml` cho backend application.

>**TIP**
>Lệnh `propel:data-load` cũng có option `--application`. Vì thế nếu bạn
>cần một vài cấu hình cụ thể từ một application, bạn có thể dùng option này:
>
>     $ php symfony propel:data-load --application=frontend

Module Backend
---------------

Với frontend application, lệnh `propel:generate-module` được dùng để tạo module
với các thao tác cơ bản CRUD dựa trên model class. Với backend, lệnh
`propel:generate-admin` cũng được dùng để tạo ra backend interface với đầy đủ các chức năng ứng với một model class:

    $ php symfony propel:generate-admin backend JobeetJob --module=job
    $ php symfony propel:generate-admin backend JobeetCategory --module=category

Hai lệnh trên tạo ra module `job` và `category` ứng với các class model `JobeetJob` và `JobeetCategory`.

Option `--module` sẽ thay thế tên của `module` được tạo mặc định bởi lệnh
(là `jobeet_job` với lớp `JobeetJob`).

Lệnh này cũng tạo route cho mỗi module:

    [yml]
    # apps/backend/config/routing.yml
    jobeet_job:
      class: sfPropelRouteCollection
      options:
        model:                JobeetJob
        module:               job
        prefix_path:          job
        column:               id
        with_wildcard_routes: true

Bạn sẽ không thấy ngạc nhiên khi admin generator dùng route class
`sfPropelRouteCollection`, do mục đích chính của một admin interface là quản lý
life-cycle của các model objet.

Route cũng có một vài option chúng ta chưa thấy trước đây:

  * `prefix_path`: Defines the prefix path for the generated route (for
                   instance, the edit page will be something like
                   `/job/1/edit`).
  * `column`: Defines the table column to use in the URL for links that
              references an object.
  * `with_wildcard_routes`: As the admin interface will have more than the
                            classic CRUD operations, this option allows to
                            define more object and collection actions without
                            editing the route.

>**TIP**
>Nên đọc help trước khi sử dụng một task mới.
>
>     $ php symfony help propel:generate-admin
>
>Nó sẽ cung cấp cho bạn tất cả các argument và option cùng một vài ví dụ đơn giản.

Backend Look and Feel
---------------------

Bây giờ, bạn có thể sử dụng các module đã được tạo ra:

    http://jobeet.localhost/backend_dev.php/job
    http://jobeet.localhost/backend_dev.php/category

Admin module có nhiều tính năng hơn các module đơn giản được tạo tự động trong những ngày trước. Mặc dù không phải viết dòng code PHP nào, chúng ta cũng có đầy đủ những tính năng sau:

  * Hiển thị danh sách cách đối tượng có **phân trang**
  * Có thể **sắp xếp** danh sách
  * Có thể **lọc** danh sách
  * Có thể **tạo**, **sửa**, và **xóa** đối tượng
  * Có thể chọn nhiều đối tượng để cùng thực hiện một thao tác nào đó (**batch**)
  * Form nhập được **validation**
  * Hiển thị **Flash messages** tới user
  * ... và nhiều tính năng khác

Admin generator cung cấp đầy đủ các tính năng bạn cần để tạo một backend
interface và đơn giản trong việc cấu hình.

Thể thuận tiện cho người dùng, ta thay đổi lại layout mặc định của backend. Chúng ta sẽ thêm một menu đơn giản để dễ dàng chuyển qua lại giữa các modules khác nhau. Thay thế nội dung trong file `layout.php` bằng đoạn sau:

    [php]
    // apps/backend/templates/layout.php
    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
    <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
      <head>
        <title>Jobeet Admin Interface</title>
        <link rel="shortcut icon" href="/favicon.ico" />
        <?php use_stylesheet('admin.css') ?>
        <?php include_javascripts() ?>
        <?php include_stylesheets() ?>
      </head>
      <body>
        <div id="container">
          <div id="header">
            <h1>
              <a href="<?php echo url_for('@homepage') ?>">
                <img src="/images/jobeet.gif" alt="Jobeet Job Board" />
              </a>
            </h1>
          </div>

          <div id="menu">
            <ul>
              <li><?php echo link_to('Jobs', '@jobeet_job') ?></li>
              <li><?php echo link_to('Categories', '@jobeet_category') ?></li>
            </ul>
          </div>

          <div id="content">
            <?php echo $sf_content ?>
          </div>

          <div id="footer">
            <img src="/images/jobeet-mini.png" />
            powered by <a href="http://www.symfony-project.org/">
            <img src="/images/symfony.gif" alt="symfony framework" /></a>
          </div>
        </div>
      </body>
    </html>

Giống như, chúng tôi cũng chuẩn bị một file stylesheet đơn giản cho
backend. File `admin.css` có thể
[download](http://svn.jobeet.org/tags/release_day_12/web/css/admin.css)
từ tab subversion của ngày hôm nay.

![The admin generator look and feel](http://www.symfony-project.org/images/jobeet/1_2/12/look_and_feel.png)

Cuối cùng, đổi lại trang chủ mặc định trong file `routing.yml`:

    [yml]
    # apps/backend/config/routing.yml
    homepage:
      url:   /
      param: { module: job, action: index }

Symfony Cache
-----------------

Nếu bạn tò mò mở những file đã được tự động tạo trong thư mục `apps/backend/modules/` bạn sẽ thấy ngạc nhiên! Thư mục `templates` hoàn toàn trống, và file `actions.class.php` cũng không có gì:

    [php]
    // apps/backend/modules/job/actions/actions.class.php
    require_once dirname(__FILE__).'/../lib/jobGeneratorConfiguration.class.php';
    require_once dirname(__FILE__).'/../lib/jobGeneratorHelper.class.php';

    class jobActions extends autoJobActions
    {
    }

Làm thế nào để nó có thể hoạt động được? Nếu bạn để ý kĩ, bạn sẽ thấy rằng lớp
`jobActions` thừa kế từ `autoJobActions`. Lớp `autoJobActions` được tự động
tạo bởi symfony nếu nó không tồn tại. Nó có thể được tìm thấy trong thư mục
`cache/backend/dev/modules/autoJob/`, và và chứa các module "thực sự":

    [php]
    // cache/backend/dev/modules/autoJob/actions/actions.class.php
    class autoJobActions extends sfActions
    {
      public function preExecute()
      {
        $this->configuration = new jobGeneratorConfiguration();

        if (!$this->getUser()->hasCredential(
          $this->configuration->getCredentials($this->getActionName())
        ))
        {

    // ...

Các module được tạo ra có thể được cấu hình bằng cách chỉnh sửa file `config/generator.yml` trong mỗi module:

    [yml]
    # apps/backend/modules/job/config/generator.yml
    generator:
      class: sfPropelGenerator
      param:
        model_class:           JobeetJob
        theme:                 admin
        non_verbose_templates: true
        with_show:             false
        singular:              ~
        plural:                ~
        route_prefix:          jobeet_job
        with_propel_route:     1

        config:
          actions: ~
          fields:  ~
          list:    ~
          filter:  ~
          form:    ~
          edit:    ~
          new:     ~

Mỗi khi bạn sửa file `generator.yml`, symfony sẽ tạo lại cache.
Như chúng ta sẽ thấy trong hôm nay, chỉnh sửa admin generated modules là công việc dễ dàng, nhanh chóng và thú vị.

>**NOTE**
>Việc tự động tạo lại các file cache chỉ được thực hiện trong môi trường development.
>Trong môi trường production, bạn cần tự xoá cache
>thông qua lệnh `cache:clear`.

Cấu hình Backend
---------------------

Môt module trong admin có thể được cấu hình thông qua file
`generator.yml`. Nội dung cấu hình được tổ chức trong 7 mục:

  * `actions`: Default configuration for the actions found on the list and on
               the forms
  * `fields`:  Default configuration for the fields
  * `list`:    Configuration for the list
  * `filter`:  Configuration for the filters
  * `form`:    Configuration for the new/edit form
  * `edit`:    Specific configuration for the edit page
  * `new`:     Specific configuration for the new page

Hãy bắt đầu công việc cấu hình!

Chỉnh sửa tiêu đề
-------------------

Tiêu đề của các mục `list`, `edit`, và `new` của module `category` có thể được chỉnh sửa thông qua option `title`:

    [yml]
    config:
      actions: ~
      fields:  ~
      list:
        title: Category Management
      filter:  ~
      form:    ~
      edit:
        title: Editing Category "%%name%%" (#%%id%%)
      new:
        title: New Category

`title` của mục `edit` chứa vài giá trị động: tất cả các chuỗi nằm giữa
cụm `%%` được thay thế bởi giá trị của các cột tương ứng.

![Titles](http://www.symfony-project.org/images/jobeet/1_2/12/title.png)

Cấu hình cho module `job` hoàn toàn tương tự:

    [yml]
    config:
      actions: ~
      fields:  ~
      list:
        title: Job Management
      filter:  ~
      form:    ~
      edit:
        title: Editing Job "%%company%% is looking for a %%position%% (#%%id%%)"
      new:
        title: Job Creation

Fields Configuration
--------------------

Một field có thể là một cột trong model class, cũng có thể là một giá trị do ta tạo ra.

Cấu hình cho các field nằm trong mục `fields`:

    [yml]
    config:
      fields:
        is_activated: { label: Activated?, help: Whether the user has activated the job, or not }
        is_public:    { label: Public? }

Mục `fields` sẽ cấu hình cho các field cho toàn bộ module, cấu hình trên
sẽ thay đổi `label` của field `is_activated` ở các trang
`list`, `edit`, và `new`.

Cấu hình trong admin generator dựa trên nguyên lý xếp tầng. Ví dụ, nếu bạn chỉ muốn thay đổi tiêu đề trong trang `list`, hãy tạo nó ở option `fields` dưới mục `list`:

    [yml]
    config:
      list:
        fields:
          is_public:    { label: "Public? (label for the list)" }

Bất kì cấu hình nào nằm dưới mục `fields` chính đều có thể
được thay đổi bởi cấu hình ở từng trang cụ thể. Luật cấu hình như sau:

 * `new` và `edit` thừa kế từ `form`,  `form` lại được thừa kế từ `fields`
 * `list` thừa kế từ `fields`
 * `filter` thừa kế từ `fields`

>**NOTE**
>Trong các mục về form (`form`, `edit`, và `new`), các option `label` và `help`
>sẽ thay thế nội dung mặc định trong các lớp form.

Cấu hình trang List
-------------------------

### `display`

Mặc định, trang list hiển thị tất cả các cột trong model.
Option `display` sẽ thay đổi hiển thị mặc định đó bằng cách chỉ rõ cột nào được hiển thị:

    [yml]
    config:
      list:
        title:   Category Management
        display: [=name, slug]

Kí tự `=` đặt trước cột `name` sẽ tạo link cho chuỗi này.

![Table list](http://www.symfony-project.org/images/jobeet/1_2/12/list_columns.png)

Làm tương tự với module `job`:

    [yml]
    config:
      list:
        title:   Job Management
        display: [company, position, location, url, is_activated, email]

### `layout`

Trang list có thể được hiển thị trong các layout khác nhau. Mặc định là layout
`tabular`, các cột sẽ được hiển thị trong một bảng.
Nhưng với module `job`, ta nên sử dụng layout `stacked`,
là layout khác có sẵn trong hệ thống:

    [yml]
    config:
      list:
        title:   Job Management
        layout:  stacked
        display: [company, position, location, url, is_activated, email]
        params:  |
          %%is_activated%% <small>%%category_id%%</small> - %%company%%
           (<em>%%email%%</em>) is looking for a %%=position%% (%%location%%)

Trong layout `stacked`, mỗi đối tượng được mô tả trong một chuỗi, tạo thành từ giá trị các cột
xác định trong option `params`.

>**NOTE**
>Option `display` vẫn cần thiết để người dùng có thể sắp xếp danh sách theo thứ tự tăng/giảm của
>từng cột.

### Cột "Virtual"

Với cấu hình trên, đoạn `%%category_id%%` sẽ được thay bằng khóa chính của
category. Nhưng sẽ hữu ích hơn nếu hiển thị tên của category.

Khi bạn sử dụng kí hiệu `%%`, biến trong đó không nhất thiết phải tương ứng
với một cột trong database schema. Khi đó, admin generator sẽ tìm phương thức
getter tương ứng trong model class.

Để hiển thị category name, chúng ta có thể tạo phương thức `getCategoryName()` trong
class model `JobeetJob` và thay thế `%%category_id%%` bằng `%%category_name%%`.

Nhưng lớp `JobeetJob` đã có phương thức `getJobeetCategory()` trả về
đối tượng category liên quan. Và nếu bạn sử dụng `%%jobeet_category%%`,
nó cũng hiển thị tên category vì lớp `JobeetCategory` có một magic method `__toString()` trả về tên của đối tượng.

    [yml]
    %%is_activated%% <small>%%jobeet_category%%</small> - %%company%%
     (<em>%%email%%</em>) is looking for a %%=position%% (%%location%%)

![Stacked layout](http://www.symfony-project.org/images/jobeet/1_2/12/stacked_layout.png)

### `sort`

Là administrator, bạn sẽ muốn biết các công việc đưa lên gần đây nhất. Bạn có thể cấu hình để sắp xếp theo một cột nào đó bằng cách thêm option `sort`:

    [yml]
    config:
      list:
        sort: [expires_at, desc]

### `max_per_page`

Mặc định, danh sách sẽ được phân trang 20 công việc mỗi trang. Bạn có thể thay đổi nó
với option `max_per_page`:

    [yml]
    config:
      list:
        max_per_page: 10

![Max per page](http://www.symfony-project.org/images/jobeet/1_2/12/max_per_page.png)

### `batch_actions`

Ở trang list, ta có thể thực hiện một hành động với vài đối tượng một lúc (batch action). Batch action này
là không cần thiết trong module `category`, vì thế ta bỏ nó đi:

    [yml]
    config:
      list:
        batch_actions: {}

![Remove the batch actions](http://www.symfony-project.org/images/jobeet/1_2/12/no_batch_actions.png)

Option `batch_actions` xác định danh dách các batch action. Mảng rỗng có nghĩa là
ta bỏ mọi chức năng.

Mặc định, mỗi module có một  batch action `delete` tạo sẵn bởi framework,
nhưng với module `job`, ta cần thêm một batch action để gia hạn cho những công việc được chọn thêm
30 ngày:

    [yml]
    config:
      list:
        batch_actions:
          _delete:    ~
          extend:     ~

Tất cả các action bắt đầu bằng `_` là các action có sẵn trong framework.
Nếu bạn refresh lại trình duyệt và chọn batch action extend,
symfony sẽ hiện ra thông báo lỗi rằng bạn chưa có phương thức `executeBatchExtend()`:

    [php]
    // apps/backend/modules/job/actions/actions.class.php
    class jobActions extends autoJobActions
    {
      public function executeBatchExtend(sfWebRequest $request)
      {
        $ids = $request->getParameter('ids');

<propel>
        $criteria = new Criteria();
        $criteria->add('jobeet_job.ID', $ids, Criteria::IN);

        foreach (JobeetJobPeer::doSelect($criteria) as $job)
</propel>
<doctrine>
        $q = Doctrine_Query::create()
          ->from('JobeetJob j')
          ->whereIn('j.id', $ids);

        foreach ($q->execute() as $job)
</doctrine>
        {
          $job->extend(true);
          $job->save();
        }

        $this->getUser()->setFlash('notice', 'The selected jobs have been extended successfully.');

        $this->redirect('@jobeet_job');
      }
    }

Các khóa chính được chọn được chứa trong request parameter `ids`. Với mỗi
công việc được chọn, phương thức `JobeetJob::extend()` được gọi với một tham số
để bypass một vài kiểm tra trong phương thức. Chúng ta cần sửa lại phương thức
`extend()` với tham số mới:

    [php]
<propel>
    // lib/model/JobeetJob.php
</propel>
<doctrine>
    // lib/model/doctrine/JobeetJob.class.php
</doctrine>
    class JobeetJob extends BaseJobeetJob
    {
      public function extend($force = false)
      {
        if (!$force && !$this->expiresSoon())
        {
          return false;
        }

<propel>
        $this->setExpiresAt(time() + 86400 * sfConfig::get('app_active_days'));
</propel>
<doctrine>
        $this->setExpiresAt(date('Y-m-d', time() + 86400 * sfConfig::get('app_active_days')));
</doctrine>
        $this->save();

        return true;
      }

      // ...
    }

Sau khi tất cả các công việc đã được gia hạn, user được chuyển tới trang chủ của module `job`.

![Custom batch actions](http://www.symfony-project.org/images/jobeet/1_2/12/custom_batch_actions.png)

### `object_actions`

Trong trang list, có thêm một cột chứa các action bạn có thể thực hiện với từng đối tượng riêng biệt.
Với module `category`, cột này là không cần thiết, do đó chúng ra có thể bỏ chúng đi:

    [yml]
    config:
      list:
        object_actions: {}

Với module `job`, chúng ta cần những action này và cần thêm một action mới `extend`
tương tụ như batch action chúng ta đã làm:

    [yml]
    config:
      list:
        object_actions:
          extend:     ~
          _edit:      ~
          _delete:    ~

Tương tự như batch action, các action `_delete` và `_edit` được tạo sẵn bởi
framework. Chúng ta cần viết action `listExtend()` để link `extend` có thể làm việc:

    [php]
    // apps/backend/modules/job/actions/actions.class.php
    class jobActions extends autoJobActions
    {
      public function executeListExtend(sfWebRequest $request)
      {
        $job = $this->getRoute()->getObject();
        $job->extend(true);
        $job->save();

        $this->getUser()->setFlash('notice', 'The selected jobs have been extended successfully.');

        $this->redirect('@jobeet_job');
      }

      // ...
    }

![Custom object action](http://www.symfony-project.org/images/jobeet/1_2/12/custom_object_actions.png)

### `actions`

Chúng ta đã biết cách tạo link cho một action đối với một danh sách các đối tượng được lựa chọn, hoặc một đối tượng riêng lẻ. Option `actions` xác định action không tác động đến đối tượng có sẵn nào, như: tạo một đối tượng mới. Hãy bỏ action `new` có sẵn và thêm một action mới xóa tất cả các công việc không còn được activate bởi người post 60 ngày:

    [yml]
    list:
      list:
        actions:
          deleteNeverActivated: { label: Delete never activated jobs }

Mỗi action có thể được cấu hình bằng cách xác định một mảng các tham số.
Action `listDeleteNeverActivated` rất đơn giản:

    [php]
    // apps/backend/modules/job/actions/actions.class.php
    class jobActions extends autoJobActions
    {
      public function executeListDeleteNeverActivated(sfWebRequest $request)
      {
<propel>
        $nb = JobeetJobPeer::cleanup(60);
</propel>
<doctrine>
        $nb = Doctrine::getTable('JobeetJob')->cleanup(60);
</doctrine>

        if ($nb)
        {
          $this->getUser()->setFlash('notice', sprintf('%d never activated jobs have been deleted successfully.', $nb));
        }
        else
        {
          $this->getUser()->setFlash('notice', 'No job to delete.');
        }

        $this->redirect('@jobeet_job');
      }

      // ...
    }

<propel>
We have reused the `JobeetJobPeer::cleanup()` method defined yesterday. That's
another great example of the reusability provided by the MVC pattern.
</propel>
<doctrine>
Chúng ta đã dùng lại phương thức `JobeetJobTable::cleanup()` tạo ngày hôm qua. Một lần nữa
ta lại thấy lợi ích của việc sử dụng lại trong MVC pattern.
</doctrine>

>**NOTE**
>bạn cũng có thể thay đổi action để thực thi bằng các cung cấp giá trị cho tham số `action`:
>
>     [yml]
>     deleteNeverActivated: { label: Delete never activated jobs, action: foo }

![Actions](http://www.symfony-project.org/images/jobeet/1_2/12/actions.png)

<propel>
### `peer_method`
</propel>
<doctrine>
### `table_method`
</doctrine>

Số câu truy vấn cần thiết để hiển thị trang list công việc là 13, được chỉ ra trên thanh
web debug toolbar.

![Number of requests before](http://www.symfony-project.org/images/jobeet/1_2/12/web_debug_before.png)

Nếu bạn click vào số này, bạn sẽ thấy phần lớn các câu truy vấn là lấy category name cho mỗi công việc.

Để giảm số câu truy vấn, chúng ta có thể thay đối phương thức mặc định để lấy danh sách các công việc bằng cách sử dụng option
<propel>
`peer_method`:
</propel>
<doctrine>
`table_method`:
</doctrine>

    [yml]
    config:
      list:
<propel>
        peer_method: doSelectJoinJobeetCategory

phương thức `doSelectJoinJobeetCategory()` thêm join giữa bảng `job` và
bảng `category` và tự động tạo đối tượng category tương ứng với mỗi công việc.
</propel>
<doctrine>
        table_method: retrieveBackendJobList

Bây giờ, bạn cần tạo phương thức `retrieveBackendJobList` trong lớp `JobeetJobTable` 
ở `lib/model/doctrine/JobeetJobTable.class.php`.

    [php]
    // lib/model/doctrine/JobeetJobTable.class.php
    class JobeetJobTable extends Doctrine_Table
    {
      public function retrieveBackendJobList(Doctrine_Query $q)
      {
        $rootAlias = $q->getRootAlias();
        $q->leftJoin($rootAlias . '.JobeetCategory c');
        return $q;
      }

      // ...

Phương thức `retrieveBackendJobList()` thêm join giữa bảng `job` và
bảng `category` và tự động tạo đối tượng category tương ứng với mỗi công việc.
</doctrine>

Số câu truy vấn giờ giảm xuống còn 3:

![Number of requests after](http://www.symfony-project.org/images/jobeet/1_2/12/web_debug_after.png)

Cấu hình Form
------------------------

Cấu hình form nằm trong 3 mục: `form`, `edit`, và
`new`. Các mục này có cấu hình như nhau và mục `form`
chỉ tồn tại như một fallback cho các mục `edit` và `new`.

### `display`

Giống như trang list, bạn có thể thay đổi thứ tự hiển thị các fields với option
`display`. Nhưng do form hiển thị được tạo bởi một class, nên việc bỏ một
field có thể dẫn đến lỗi khi validation.

Option `display` cho form có thể dùng để nhóm các field lại trong một nhóm:

    [yml]
    config:
      form:
        display:
          Content: [category_id, type, company, logo, url, position,
            ➥ location, description, how_to_apply, is_public, email]
          Admin:   [_token, is_activated, expires_at]

Cấu hình trên tạo ra 2 nhóm (`Content` và `Admin`), mỗi nhóm chứa một số field.

![Fields grouping](http://www.symfony-project.org/images/jobeet/1_2/12/fields_grouping.png)

Admin generator cũng hỗ trợ sẵn quan hệ nhiều-nhiều. Ở form
category, bạn có một input cho trường name, một cho trường slug, và một
drop-down box cho các affiliate liên quan. Chúng ta không sửa giá trị này ở trang này nên ta cần bỏ đi:

    [php]
<propel>
    // lib/model/JobeetCategoryForm.class.php
</propel>
<doctrine>
    // lib/model/doctrine/JobeetCategoryForm.class.php
</doctrine>
    class JobeetCategoryForm extends BaseJobeetCategoryForm
    {
      public function configure()
      {
        unset($this['jobeet_category_affiliate_list']);
      }
    }

### Cột "ảo"

Field `_token` bắt đầu bằng kí tự (`_`). Điều đó có nghĩa là việc render ra field này được tạo bởi một partial do ta tự tạo `_token.php`:

    [php]
    // apps/backend/modules/job/templates/_token.php
    <div class="sf_admin_form_row">
      <label>Token</label>
      <?php echo $form->getObject()->getToken() ?>
    </div>

Trong partial, bạn có thể truy cập form hiện tại (`$form`) và các đối tượng liên quan thông qua phương thức `getObject()`.

>**NOTE**
>Bạn cũng có thể sử dụng kết quả của một component bằng kí tự (`~`) đặt trước tên field

### `class`

Do form được sử dụng bởi administrators, chúng ta cần hiển thị nhiều thông tin hơn khi được dùng bởi user. Nhưng hiện tại, một vài thông tin không được hiển thị do chúng ta đã bỏ chúng đi trong lớp `JobeetJobForm`.

Để form khác nhau giữa frontend và backend, chúng ta cần tạo 2 lớp form khác nhau.
Hãy tạo lớp `BackendJobeetJobForm` thừa kế từ lớp `JobeetJobForm`. Do chúng ta không có những field ẩn đi như ở frontend, nên chúng ta cần refactor lớp `JobeetJobForm` bằng cách chuyển các đoạn `unset()` vào một phương thức để có thể overridden trong lớp `BackendJobeetJobForm`:

    [php]
<propel>
    // lib/form/JobeetJobForm.class.php
</propel>
<doctrine>
    // lib/form/doctrine/JobeetJobForm.class.php
</doctrine>
    class JobeetJobForm extends BaseJobeetJobForm
    {
      public function configure()
      {
        $this->removeFields();

        $this->validatorSchema['email'] = new sfValidatorEmail();

        // ...
      }

      protected function removeFields()
      {
        unset(
          $this['created_at'], $this['updated_at'],
          $this['expires_at'], $this['token'],
          $this['is_activated']
        );
      }
    }

<propel>
    // lib/form/BackendJobeetJobForm.class.php
</propel>
<doctrine>
    // lib/form/doctrine/BackendJobeetJobForm.class.php
</doctrine>
    class BackendJobeetJobForm extends JobeetJobForm
    {
      public function configure()
      {
        parent::configure();
      }

      protected function removeFields()
      {
        unset(
          $this['created_at'], $this['updated_at'],
          $this['token']
        );
      }
    }

Lớp form mặc định dùng bởi admin generator có thể thay đổi thông qua option `class`:

    [yml]
    config:
      form:
        class: BackendJobeetJobForm

Form `edit` hiện vẫn còn một lỗi nhỏ. The current uploaded logo does
not show up anywhere and you cannot remove it. The
`sfWidgetFormInputFileEditable` widget adds editing capabilities to a simple
input file widget:

    [php]
<propel>
    // lib/form/BackendJobeetJobForm.class.php
</propel>
<doctrine>
    // lib/form/doctrine/BackendJobeetJobForm.class.php
</doctrine>
    class BackendJobeetJobForm extends JobeetJobForm
    {
      public function configure()
      {
        parent::configure();

        $this->widgetSchema['logo'] = new sfWidgetFormInputFileEditable(array(
          'label'     => 'Company logo',
          'file_src'  => '/uploads/jobs/'.$this->getObject()->getLogo(),
          'is_image'  => true,
          'edit_mode' => !$this->isNew(),
          'template'  => '<div>%file%<br />%input%<br />%delete% %delete_label%</div>',
        ));
      }

      // ...
    }

The `sfWidgetFormInputFileEditable` widget takes several options to tweak
its features and rendering:

  * `file_src`:    The web path to the current uploaded file
  * `is_image`:    If `true`, the file will be rendered as an image
  * `edit_mode`:   Whether the form is in edit mode or not
  * `with_delete`: Whether to display the delete checkbox
  * `template`:    The template to use to render the widget

![File upload](http://www.symfony-project.org/images/jobeet/1_2/12/file_upload.png)

>**TIP**
>The look of the admin generator can be tweaked very easily as the generated
>templates define a lot of `class` and `id` attributes. For instance, the logo field can
>be customized by using the `sf_admin_form_field_logo` class. Each field also
>has a class depending on the field type like `sf_admin_text` or
>`sf_admin_boolean`.

<propel>
The `edit_mode` option uses the `sfPropel::isNew()` method.
</propel>
<doctrine>
The `edit_mode` option uses the `sfDoctrineRecord::isNew()` method.
</doctrine>

It returns `true` if the model object of the form is new, and `false` otherwise.
This is of great help when you need to have different widgets or validators depending on the status of the embedded object.

Filters Configuration
---------------------

Configuring filters is quite the same as configuring the form views. As a
matter of fact, filters are just forms. And as for the forms, the classes have
been generated by the `propel:build-all` task. You can also re-generate them
with the `propel:build-filters` task.

The form filter classes are located under the `lib/filter` directory and each
model class has an associated filter form class (`JobeetJobFormFilter` for
`JobeetJobForm`).

Let's remove them completely for the `category` module:

    [yml]
    config:
      filter:
        class: false

For the `job` module, let's remove some of them:

    [yml]
    filter:
      display: [category_id, company, position, description, is_activated,
       ➥ is_public, email, expires_at]

As filters are always optional, there is no need to override the filter form
class to configure the fields to be displayed.

![Filters](http://www.symfony-project.org/images/jobeet/1_2/12/filters.png)

Actions Customization
---------------------

When configuration is not sufficient, you can add new methods to the action
class as we have seen with the extend feature, but you can also override the
generated action methods:

 | Method                 | Description
 | ---------------------- | -------------------------------------
 | `executeIndex()`       | `list` view action
 | `executeFilter()`      | Updates the filters
 | `executeNew()`         | `new` view action
 | `executeCreate()`      | Creates a new Job
 | `executeEdit()`        | `edit` view action
 | `executeUpdate()`      | Updates a Job
 | `executeDelete()`      | Deletes a Job
 | `executeBatch()`       | Executes a batch action
 | `executeBatchDelete()` | Executes the `_delete` batch action
 | `processForm()`        | Processes the Job form
 | `getFilters()`         | Returns the current filters
 | `setFilters()`         | Sets the filters
 | `getPager()`           | Returns the list pager
 | `getPage()`            | Gets the pager page
 | `setPage()`            | Sets the pager page
 | `buildCriteria()`      | Builds the `Criteria` for the list
 | `addSortCriteria()`    | Adds the sort `Criteria` for the list
 | `getSort()`            | Returns the current sort column
 | `setSort()`            | Sets the current sort column

As each generated method does only one thing, it is easy to change a behavior
without having to copy and paste too much code.

Templates Customization
-----------------------

We have seen how to customize the generated templates thanks to the `class`
and `id` attributes added by the admin generator in the HTML code.

As for the classes, you can also override the original templates. As templates
are plain PHP files and not PHP classes, a template can be overridden by
creating a template of the same name in the module (for instance in the
`apps/backend/modules/job/templates/` directory for the `job` admin module):

 | Template                     | Description
 | ---------------------------- | -------------------------------------
 | `_assets.php`                | Renders the CSS and JS to use for templates
 | `_filters.php`               | Renders the filters box
 | `_filters_field.php`         | Renders a single filter field
 | `_flashes.php`               | Renders the flash messages
 | `_form.php`                  | Displays the form
 | `_form_actions.php`          | Displays the form actions
 | `_form_field.php`            | Displays a singe form field
 | `_form_fieldset.php`         | Displays a form fieldset
 | `_form_footer.php`           | Displays the form footer
 | `_form_header.php`           | Displays the form header
 | `_list.php`                  | Displays the list
 | `_list_actions.php`          | Displays the list actions
 | `_list_batch_actions.php`    | Displays the list batch actions
 | `_list_field_boolean.php`    | Displays a single boolean field in the list
 | `_list_footer.php`           | Displays the list footer
 | `_list_header.php`           | Displays the list header
 | `_list_td_actions.php`       | Displays the object actions for a row
 | `_list_td_batch_actions.php` | Displays the checkbox for a row
 | `_list_td_stacked.php`       | Displays the stacked layout for a row
 | `_list_td_tabular.php`       | Displays a single field for the list
 | `_list_th_stacked.php`       | Displays a single column name for the header
 | `_list_th_tabular.php`       | Displays a single column name for the header
 | `_pagination.php`            | Displays the list pagination
 | `editSuccess.php`            | Displays the `edit` view
 | `indexSuccess.php`           | Displays the `list` view
 | `newSuccess.php`             | Displays the `new` view

Final Configuration
-------------------

The final configuration for the Jobeet admin is as follows:

    [yml]
    # apps/backend/modules/job/config/generator.yml
    config:
      actions: ~
      fields:
        is_activated: { label: Activated?, help: Whether the user has activated the job, or not }
        is_public:    { label: Public? }
      list:
        title:         Job Management
        layout:        stacked
        display:       [company, position, location, url, is_activated, email]
        params:  |
<propel>
          %%is_activated%% <small>%%jobeet_category%%</small> - %%company%%
</propel>
<doctrine>
          %%is_activated%% <small>%%JobeetCategory%%</small> - %%company%%
</doctrine>
           (<em>%%email%%</em>) is looking for a %%=position%% (%%location%%)
        max_per_page:  10
        sort:          [expires_at, desc]
        batch_actions:
          _delete:    ~
          extend:     ~
        object_actions:
          extend:     ~
          _edit:      ~
          _delete:    ~
        actions:
          deleteNeverActivated: { label: Delete never activated jobs }
<propel>
        peer_method:  doSelectJoinJobeetCategory
</propel>
<doctrine>
        table_method: retrieveBackendJobList
</doctrine>
      filter:
        display: [category_id, company, position, description, is_activated, is_public, email, expires_at]
      form:
        class:     BackendJobeetJobForm
        display:
          Content: [category_id, type, company, logo, url, position, location, description, how_to_apply, is_public, email]
          Admin:   [_token, is_activated, expires_at]
      edit:
        title: Editing Job "%%company%% is looking for a %%position%% (#%%id%%)"
      new:
        title: Job Creation

    # apps/backend/modules/category/config/generator.yml
    config:
      actions: ~
      fields:  ~
      list:
        title:   Category Management
        display: [=name, slug]
        batch_actions: {}
        object_actions: {}
      filter:
        class: false
      form:
        actions:
          _delete: ~
          _list:   ~
          _save:   ~
      edit:
        title: Editing Category "%%name%%" (#%%id%%)
      new:
        title: New Category

With just these two configuration files, we have developed a great backend
interface for Jobeet in a matter of minutes.

>**TIP**
>You already know that when something is configurable in a YAML file, there is
>also the possibility to use plain PHP code. For the admin generator, you can
>edit the `apps/backend/modules/job/lib/jobGeneratorConfiguration.class.php`
>file. It gives you the same options as the YAML file but with a PHP
>interface. To learn the method names, have a look at the generated base class
>in
>`cache/backend/dev/modules/autoJob/lib/BaseJobGeneratorConfiguration.class.php`.

See you Tomorrow
----------------

In just one hour, we have built a fully featured backend interface for the
Jobeet project. And all in all, we have written less than 50 lines of PHP
code. Not too bad for so many features!

Tomorrow, we will see how to secure the backend application with a username
and a password. This will also be the occasion to talk about the symfony user
class.

__ORM__
