Día 24: Otra Mirada a Symfony
===============================

Hoy es la última parada de nuestro viaje al maravilloso mundo de symfony. Durante estos veintitrés días, aprendiste symfony con ejemplos: desde los patrones de diseño utilizados por el framework, hasta las poderosas características ya incorporadas. Aún no eres un maestro symfony, pero tienes todos los conocimientos necesarios para empezar a construir tus aplicaciones symfony con confianza.

Hemos terminado el tutorial Jobeet, asi que demos otro vistazo al
framework. Olvidate de Jobeet por una hora, y recuerda todas las funciones que has aprendido durante las últimas tres semanas.

¿Qué es Symfony?
----------------

El framework symfony es un conjunto de [relacionados, pero independientes sub-frameworks](#day_11_sidebar_using_the_form_framework_without_symfony),
que forman un completo [framework MVC](#day_04_the_mvc_architecture)
(Modelo, Vista, Controlador).
Antes de la codificación inicial, nos tomamos un tiempo para leer 
[la historia y la filosofía de symfony](#day_01_introduction).
Entonces, comprobamos del framework sus [requisitos previos](#day_01_prerequisites)
y usamos el [script `check_configuration.php`](#day_01_symfony_installation)
para validar tu configuración.

Finalmente, [instalamos symfony](#day_01_symfony_installation). Después de algún tiempo también desearás [actualizar](#day_23_sub_upgrading_symfony) a la última versión del framework.

El framework también proporciona herramientas para facilitar [el despliegue](#day_23_deploying).

El Modelo
---------

La parte del Modelo de symfony se puede hacer con la ayuda del
<propel>
[ORM Propel](http://propel.phpdb.org/). Basado en la
</propel>
<doctrine>
[ORM Doctrine](http://www.doctrine-project.org/). Basado en la
</doctrine>
[descripción de la base de datos](#day_03_the_schema), esta genera las clases para los 
[objetos](#day_03_the_orm), [formularios](#day_10_##ORM_LOWER##_forms), y 
[filtros](#day_12_filters_configuration). ##ORM## también
[genera las sentencias SQL](#day_03_the_orm) utilizada para crear las tablas en la base de datos.
La configuración de la base de datos se puede hacer con una [tarea](#day_03_the_database)
o editando un [archivo de configuración](#day_03_the_database). Además de su configuración, también es posible hacer la inyección inicial de datos, gracias a los [archivos de datos](#day_03_the_initial_data). Puede incluso hacer que estos archivos sean [dinámicos](#day_06_dynamic_fixtures).

<propel>
Los objetos Propel también puede ser fácilmente [internacionalizados](#day_19_sub_propel_objects).
</propel>
<doctrine>
Los objetos Doctrine también puede ser fácilmente [internacionalizados](#day_19_sub_doctrine_objects).
</doctrine>

La Vista
--------

De forma predeterminada, la capa de la Vista de la arquitectura MVC utiliza archivos PHP planos como plantillas.

Las plantillas puede utilizar [helpers](#day_04_the_stylesheets_images_and_javascripts) para tareas recurrentes como crear una [URL](#day_05_routing_in_actions_and_templates)
o un [enlace](#day_05_routing_in_actions_and_templates).
Una plantilla puede ser decorada por un [layout](#day_04_the_layout) para abstraerse del encabezado y pie de las páginas. Para hacer vistas aún más reutilizables, puedes definir [slots](#day_04_slots), [partials](#day_07_partials), y
[componentes](#day_19_language_switching).

Para acelerar las cosas, puedes utilizar el [sub-framework del cache](#day_22_cache_configuration) para guardar en cache una
[página entera](#day_22_page_cache), solo la [acción](#day_22_action_cache), o tan solo [partials o componentes](#day_22_partial_and_component_cache).
También puedes [eliminar el cache](#day_22_removing_the_cache) manualmente.

El Controlador
--------------

La parte del Controlador es gestionado por [controladores frontales](#day_01_the_environments)
y [acciones](#day_03_see_it_in_action_in_the_browser).

Las tareas se puede utilizar para crear [simples módulos](#day_07_job_category_module_creation),
[módulos CRUD](#day_03_see_it_in_action_in_the_browser), o aun para generar completos y funcionales [módulos admin](#day_12_backend_modules) para las clases del modelo.

Los módulos admin te permiten construir una aplicación completamente funcional sin codificación alguna.

Para abstraer la implementación técnica de un sitio web, symfony utiliza un sub-framework [enrutamiento](#day_05_routing_configuration)  que genera [URLs amigagles](#day_05_urls). Para hacer la implementación de servicios web aún más fácil, symfony soporta [formatos](#day_15_formats) en forma nativa. También puedes crear tus propios [formatos](#day_16_sub_the_code_yaml_code_format).

Una acción puede ser [reenviada](#day_04_sidebar_the_forward_methods_family) a otra, o [redirigida](#day_05_sidebar_the_redirect_methods_family).

La Configuración
----------------

El framework symfony hace que sea fácil tener diferentes ajustes de configuración para distintos entornos. Un [entorno](#day_01_the_environments) es un conjunto de ajustes que permite diferentes comportamientos en los servidores de desarrollo o de producción. También puedes crear nuevos [entornos] #day_22_creating_a_new_environment).

Los archivos de configuración de symfony puede definirse en
[diferentes niveles](#day_04_sidebar_configuration_principles_in_symfony) y la mayoría de ellos son [conscientes del entorno](#day_08_sidebar_configuration_principles_in_symfony):

 * [`app.yml`](#day_06_custom_configuration)
 * [`cache.yml`](#day_22_cache_configuration)
 * [`databases.yml`](#day_03_the_database)
 * [`factories.yml`](#day_23_the_factories)
 * [`generator.yml`](#day_12_the_symfony_cache)
 * [`routing.yml`](#day_05_routing_configuration)
 * [`schema.yml`](#day_03_the_schema)
 * [`security.yml`](#day_13_sub_authentication)
 * [`settings.yml`](#day_11_sub_built_in_security_features)
 * [`view.yml`](#day_04_the_stylesheets_images_and_javascripts)

La mayoría de los archivos de configuración usan el
[formato YAML](#day_03_sidebar_the_yaml_format).

En lugar de utilizar la estructura de directorios por defecto y organizar tus archivos de aplicaciones por capas, también puedes organizarlos por función, y agruparlos en [un plugin](#day_20_sub_a_different_way_to_organize_code). Hablando de la estructura de directorios por defecto, también puedes
[personalizarla](#day_23_customizing_the_directory_structure)
de acuerdo a tus necesidades.

La Depuración
-------------

<propel>
Desde el [logging](#day_06_debugging_propel_generated_sql) hasta la
[la barra de herramientas de depuración web](#day_06_debugging_propel_generated_sql), y
</propel>
<doctrine>
Desde el [logging](#day_06_debugging_doctrine_generated_sql) hasta la
[la barra de herramientas de depuración web](#day_06_debugging_doctrine_generated_sql), y
</doctrine>
las [significativas excepciones](#day_01_the_environments), symfony proporciona un montón de herramientas útiles para ayudar a los desarrolladores a depurar problemas con mayor rapidez.

Los Principales Objetos de Symfony 
----------------------------------

Los frameworks de symfony proporciona un buen número de objetos básicos que nos abstraen de necesidades recurrentes en los proyectos web: la [petición](#day_04_sub_the_request), la [respuesta](#day_04_sub_the_response), el [usuario](#day_13_sub_the_code_myuser_code_class), el [logging](#day_23_sub_logging),
las [rutas](#day_05_routing_configuration), y el
[administrador del cache ](#day_22_removing_the_cache).

Estos objetos básicos son gestionados por el
[objetos `sfContext`](#day_22_sidebar_the_code_sfcontext_code_class), y 
que se configuran a través de las [factorias](#day_23_the_factories).

El objeto user gestiona la [autenticación](#day_13_sub_authentication),
[autorización](#day_13_sub_authorization), [flashes](#day_13_user_flashes),
y [atributos](#day_13_user_attributes) para ser guardado en la sesión.

La Seguridad
------------

El framework symfony tiene incorporadas protecciones contra
[XSS](#day_01_sub_application_creation) y 
[CSRF](#day_01_sub_application_creation). Estos ajustes pueden ser configurados desde la [línea de comandos](#day_01_sub_application_creation),
o la edición de un [archivo de configuración](#day_11_sub_xss_and_csrf_protection).

El framework de formularios proporciona
[características incorporadas de seguridad](#day_11_sub_built_in_security_features).

Los Formularios 
---------------

Como la gestión de formularios es uno de las más tediosas tareas para un desarrollador web, symfony proporciona un [sub-framework de formularios](#day_10_the_form_framework). El framework de formularios viene con un montón de [widgets](http://www.symfony-project.org/api/1_2/widget)
y [validadores](http://www.symfony-project.org/api/1_2/validator). Una de las fortalezas del sub-framework de formularios es que las plantillas son muy fácilmente [personalizables](#day_10_sidebar_customizing_the_look_and_feel_of_a_form).

Si usas ##ORM##, el framework de formularios también facilita la
<propel>
[generación de formularios y filtros](#day_10_propel_forms) basados en tus modelos.

</propel>
<doctrine>
[generación de formularios y filtros](#day_10_doctrine_forms) basados en tus modelos.
</doctrine>

Internacionalización y localización
-----------------------------------

[Internacionalización](#day_19_internationalization) y 
[localización](#day_19_localization) están soportadas por symfony, gracias al estándar ICU. La [cultura del usuario](#day_19_sub_the_user_culture) determina el idioma y el país del usuario. Esto puede ser definido por el usuario mismo, o incluído en la [URL](#day_19_culture_in_the_url).

Las Pruebas
-----------

La biblioteca lime, usa por las **Pruebas Unitarias**, proporciona una gran cantidad de
[métodos de prueba](#day_08_the_code_lime_code_testing_framework). Los
<propel>
[objetos Propel también puede ser probados](#day_08_propel_unit_tests) desde
</propel>
<doctrine>
[objetos Doctrine también puede ser probados](#day_08_doctrine_unit_tests) desde
</doctrine>
una [base de datos dedicada](#day_08_sub_database_configuration) y 
con específicos [datos](#day_08_sub_test_data).

Las pruebas unitarias se puede ejecutar
[una a la vez](#day_08_running_unit_tests) o
[todas juntas](#day_08_unit_tests_harness).

Las **PruebasFfuncionales** están escritas con la clase 
[`sfFunctionalTest`](#day_09_the_code_sftestfunctional_code_class), la cual usa un [simulador de navegador](#day_09_the_code_sfbrowser_code_class) y permite la introspección de los objetos del núcleo de symfony a través de [Testers](#day_09_the_code_sftestfunctional_code_class). Los Testers existen para el [objeto request](#day_09_sub_the_request_tester), el
[objeto response ](#day_09_sub_the_response_tester), el 
[objeto user](#day_13_user_testing), el 
[objeto formulario actual](#day_11_the_form_tester), la 
[capa cache](#day_22_testing_the_cache) y los 
<propel>
[Objetos Propel](#day_11_the_propel_tester).
</propel>
<doctrine>
[Objetos Doctrine](#day_11_the_doctrine_tester).
</doctrine>

También puedes utilizar herramientas de depuración para la 
[respuesta](#day_09_debugging_functional_tests)
y [formularios](#day_11_the_form_tester).

Ya que las pruebas unitarias, pruebas funcionales se pueden ejecutar
[una por una](#day_09_running_functional_tests) o
[todas juntas](#day_09_functional_tests_harness).

También puedes ejecutar [todas las pruebas juntas](#day_09_tests_harness).

Los Plugins
-----------

El framework symfony sólo proporciona la base para tus aplicaciones web y se basa en [plugins](#day_20_using_plugins) para añadir más
características. En este tutorial, hemos hablado de [`sfGuardPlugin`](#day_13_plugins),
[`sfFormExtraPlugin`](#day_19_language_switching), y 
[`sfTaskExtraPlugin`](#day_20_contributing_a_plugin).

Un plugin debe ser [activado](#day_20_sidebar_plugin_activation) después de la instalación.

Plugins are the best way to [contribute back](#day_20_contributing_a_plugin)
to the symfony project.

Las Tareas
----------

El CLI de symfony proporciona una gran cantidad de tareas, y las más útiles han sido discutidas en este tutorial:

 * [`app:routes`](#day_05_route_debugging)
 * [`cache:clear`](#day_22_clearing_the_cache)
 * [`configure:database`](#day_03_the_database)
 * [`generate:project`](#day_01_sub_project_creation)
 * [`generate:app`](#day_01_sub_application_creation)
 * [`generate:module`](#day_07_job_category_module_creation)
 * [`help`](#day_03_the_orm)
 * [`i18n:extract`](#day_19_sub__code_i18n_extract_code_)
 * [`list`](#day_13_backend_security)
 * [`plugin:install`](#day_13_plugins)
 * [`plugin:publish-assets`](#day_20_sub_the_assets)
 * [`project:deploy`](#day_23_sub_deploying_strategies)
 * [`propel:build-all`](#day_03_the_orm)
 * [`propel:build-all-load`](#day_07_update_the_database)
<propel>
 * [`propel:build-forms`](#day_10_propel_forms)
</propel>
<doctrine>
 * [`doctrine:build-forms`](#day_10_doctrine_forms)
</doctrine>
 * [`propel:build-model`](#day_03_the_orm)
 * [`propel:build-sql`](#day_03_the_orm)
 * [`propel:data-load`](#day_03_the_initial_data)
 * [`propel:generate-admin`](#day_12_backend_modules)
 * [`propel:generate-module`](#day_03_see_it_in_action_in_the_browser)
 * [`propel:insert-sql`](#day_03_the_orm)
 * [`test:all`](#day_09_tests_harness)
 * [`test:coverage`](#day_08_sidebar_code_coverage)
 * [`test:functional`](#day_09_running_functional_tests)
 * [`test:unit`](#day_08_running_unit_tests)

También puedes [crear tus propias tareass](#day_11_maintenance_tasks).

Hasta pronto
------------

Antes de dejarte, me gustaría hablar de una última cosa acerca de symfony. El framework tiene un montón de grandes características y una gran cantidad de documentación libre. Sin embargo, uno de los más valiosos recursos que el Open-Source puede tener es su comunidad. Y
symfony tiene una de las más sorprendentes y activa comunidades. En caso de empezar a usar symfony para tus proyectos, considera la posibilidad de unirte a la comunidad symfony:

  * Suscríbete al [user mailing-list](http://groups.google.com/group/symfony-users)
  * Suscríbete al [official blog feed](http://feeds.feedburner.com/symfony/blog)
  * Suscríbete al [symfony planet feed](http://feeds.feedburner.com/symfony/planet)
  * Ven y chatea en el [#symfony IRC](irc://irc.freenode.net/symfony)  canal de freenode

__ORM__