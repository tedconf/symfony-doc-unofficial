Giorno 13: L'utente
===================

Precedentemente su Jobeet
-------------------------

La giornata di ieri è stata archiviata con un sacco di informazioni. Con
pochissime line di codice PHP l'admin generator di symfony permette allo
sviluppatore di creare interfacce di backend in pochi minuti.

Oggi scopriremo come symfony gestisce i dati persistenti tra le richieste
HTTP. Come dovreste sapere il protocollo HTTP è di tipo stateless, questo significa
che ogni richiesta è indipendente da quelle che la precedono o la seguono.
I siti web moderni hanno bisogno di mantenere i dati persistenti tra le varie 
richieste per migliorare la user experience dell'utente.

Una sessione utente può essere identificata usando un cookie. In symfony 
lo sviluppatore non ha bisogno di manipolare la sessione in modo diretto,
piuttosto utilizza l'oggetto `sfUser` che rappresenta l'utente finale
dell'applicazione.

Flash utente
------------

Abbiamo già visto l'oggetto utente in azione con i flash. Un flash è un 
messaggio salvato nella sessione dell'utente che viene cancellato automaticamente
dopo la prima richiesta successiva. E' molto comodo quando avete bisogno
di mostrare un messaggio all'utente dopo un redirect. L'admin generatore
fa un largo uso di messaggi flash per dare feedback all'utente ogni
qual volta un'offerta di lavoro viene salvata, cancellata o rinnovata.

![Flash](http://www.symfony-project.org/images/jobeet/1_2/13/flashes.png)

Un flash è impostato usando il metodo `setFlash()` di `sfUser`:

    [php]
    // apps/frontend/modules/job/actions/actions.class.php
    public function executeExtend(sfWebRequest $request)
    {
      $request->checkCSRFProtection();

      $job = $this->getRoute()->getObject();
      $this->forward404Unless($job->extend());

<propel>
      $this->getUser()->setFlash('notice', sprintf('Your job validity has been extend until %s.', $job->getExpiresAt('m/d/Y')));
</propel>
<doctrine>
      $this->getUser()->setFlash('notice', sprintf('Your job validity has been extend until %s.', date('m/d/Y', strtotime($job->getExpiresAt()))));
</doctrine>

      $this->redirect($this->generateUrl('job_show_user', $job));
    }

Il primo argomento è l'identificatore del flash mentre il secondo è il
messaggio da mostrare. Potete definire tutti i flash che volete ma `notice`
e `error` sono due dei più comuni (sono usati dall'admin generator).

E' lasciato allo sviluppatore includere i messaggi flash nei template. Per
Jobeet vengono visualizzati dal `layout.php`:

    [php]
    // apps/frontend/templates/layout.php
    <?php if ($sf_user->hasFlash('notice')): ?>
      <div class="flash_notice"><?php echo $sf_user->getFlash('notice') ?></div>
    <?php endif; ?>

    <?php if ($sf_user->hasFlash('error')): ?>
      <div class="flash_error"><?php echo $sf_user->getFlash('error') ?></div>
    <?php endif; ?>

Nei template la sessione utente è accessibile dalla variabile speciale `sf_user`.

>**NOTE**
>Alcuni oggetti di symfony sono sempre accessibili nei template senza il 
>bisogno passarli dall'action: `sf_request`, `sf_user` e `sf_response`.

Attributi utente
----------------

Sfortunatamente le user stories di Jobeet non richiedono che qualcosa possa
essere incluso nella sessione utente. Quindi aggiungiamo un nuovo requisito:
per rendere più semplice la navigazione le ultime tre offerte visualizzate
dall'utente dovranno essere mostrate nel menù con i link per tornare 
alla pagina dell'offerta.

Quando un utente accede alla pagina di un'offerta di lavoro l'oggetto stesso
dell'offerta visualizzata deve essere aggiunto nella history dell'utente e 
salvato nella sessione:

    [php]
    // apps/frontend/modules/job/actions/actions.class.php
    class jobActions extends sfActions
    {
      public function executeShow(sfWebRequest $request)
      {
        $this->job = $this->getRoute()->getObject();

        // fetch jobs already stored in the job history
        $jobs = $this->getUser()->getAttribute('job_history', array());

        // add the current job at the beginning of the array
        array_unshift($jobs, $job->getId());

        // store the new job history back into the session
        $this->getUser()->setAttribute('job_history', $jobs);
      }

      // ...
    }

>**NOTE**
>Avremmo potuto salvare gli oggetti `JobeetJob` direttamente nella sessione.
>Vi scoraggiamo fortemente di agire in questo modo perchè le variabili di sessione
>vengono serializzate tra le richieste. Quando la sessione viene caricata
>gli oggetti `JobeetJob` vengono de-serializzati e possono presentare dati 
>incoerenti se nel frattempo sono stati modificati o cancellati.

### `getAttribute()`, `setAttribute()`

Dato un identificatore il metodo `sfUser::getAttribute()`prende i valori 
dalla sessione utente. Al contrario il metodo `setAttribute()` salva 
qualsiasi variabile PHP nella sessione con l'identificatore passato.

Il metodo `getAttribute()` prende un valore opzionale per segnalare se 
l'identificatore passato non è ancora stato definito.

>**NOTE**
>Il valore di default preso dal metodo `getAttribute()` è una scorciatoia per:
>
>     [php]
>     if (!$value = $this->getAttribute('job_history'))
>     {
>       $value = array();
>     }