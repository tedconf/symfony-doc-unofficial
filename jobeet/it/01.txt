Giorno 1: Impostare il progetto
==============================

Introduzione
------------

Il framework symfony è un progetto Open-Source da più di tre anni ed è diventato
uno dei framework PHP più popolari grazie alle molte feature offerte ed alla ottima
documentazione. Questa tradizione è iniziata molto presto.

Nel dicembre 2005, appena dopo il primo rilascio ufficiale di symfony, abbiamo pubblicato
l'"[Askeet tutorial](http://www.symfony-project.org/askeet/1_0/en/)", una serie di 24
lezioni pubblicate giornalmente tra il primo dicembre e Natale.

Questo tutorial ha dimostrato di avere un inestimabile valore per la promozione del
framework per i nuovi utenti. Molti sviluppatori hanno imparato ad usare symfony
grazie ad Askeet, molte aziende usano ancora oggi Askeet come palestra primaria per
il training degli sviluppatori.

Ora stiamo festeggiando il rilascio di symfony 1.2 e l'Askeet tutorial inizia a 
dimostrare la sua età. Quindi è giunto il momento per un nuovo tutorial.


Jobeet, il tutorial per l'advent calendar del 2008!

La sfida
--------

Esattamente, lo faremo di nuovo. Ogni giorno, week-end inclusi, un nuovo tutorial
verrà pubblicato. Ogni tutorial è pensato per durare circa un'ora e rappresenta
l'occasione per imparare ad utilizzare symfony realizzando un sito web reale
dall'inizio alla fine.

Un'ora per ventiquattro volte equivale ad una giornata ed è proprio quanto noi
pensiamo sia necessario ad uno sviluppatore per imparare i concetti fondamentali
di symfony. Ogni giorno verranno aggiunte nuove feature all'applicazione,
sfrutteremo queste novità per introdurvi alle nuove funzionalità di symfony ed alle
good practice dello sviluppo web con symfony.

Per Askeet il ventunesimo giorno fu il "get-a-symfony-guru-for-a-day". Non avevamo
piani e la community doveva proporre delle feature da aggiungere ad Askeet. Fu
davvero un successo e la community decise che l'applicazione avesse bisogno di un
motore di ricerca. E venne fatto. Il giorno 21 del tutorial dimostrò anche di essere 
una delle parti più famose dell'intero tutorial di Askeet.

Per Jobeet festeggeremo l'inverno il 21 con un "design day".
Dopo il quarto giorno avrete a disposizione tutte le informazioni su HTML e CSS
per iniziare a realizzare il design de sito di Jobeet. Quindi se lavorate con
un designer, o la vostra società ha un reparto di design, sarete in grado di
contribuire con un vostro design del sito.
Il giorno 21 organizzeremo un sondaggio e la community dovrà scegliere il design
di default che verrà rilasciato con Jobeet. Chiaramente riceverete i credits e la
fama che ne deriverà!

Questo tutorial è differente
----------------------------

Ripensate agli albori del PHP4.
Ah, la [Belle Epoque](http://en.wikipedia.org/wiki/Belle_Époque)! PHP era uno dei primi
linguaggi dedicati al web ed uno dei più semplici.

Ma con la veloce evoluzione delle tecnologie web gli sviluppatori devono tenersi al passo
con le ultime best practice e con gli strumenti più aggiornati. La via migliore per 
imparare è sicuramente quella di leggere blog, tutorial e libri. Ne abbiamo letti molti,
siano scritti per PHP, Python, Java, Ruby, o Perl e molti di essi perdono di vista l'obiettivo
finale quando l'autore inizia a dare porzioni di codice come esempio.

Probabilmente siete abituati a leggere avvisi come questi:

  "Per un'applicazione reale non dimenticare di aggiungere la validazione ed una corretta gestione degli errori."

oppure

  "La sicurezza è lasciata al lettore come esercizio."

o ancora

  "Avrai sicuramente bisogno di scrivere dei test."

Cosa? Queste cose sono attività serie. Sono forse le parti più importanti di ogni
altra parte di codice. E come lettori venite abbandonati. Senza tenere conto di queste
cose gli esempi sono molto meno utili visto che non possono essere usati come punto 
di partenza. Questo è male! Perché? Perché la sicurezza, la validazione, la gestione 
degli errori e i test (solo per dirne alcuni) permettono di scrivere codice corretto.

In questo tutorial non vedrete mai frasi come quelle viste in precedenza: scriveremo test, 
gestiremo errori, valideremo il codice e state pure certi che realizzeremo un'applicazione
sicura. Questo è dovuto al fatto che symfony si occupa del codice ma anche di
utilizzare le best practice e di mostrare come sviluppare in modo professionale
applicazioni per il mondo enterprise. Saremo in grado di fornire questo lusso perché
symfony mette a disposizione tutti gli strumenti necessari per affrontare questi
aspetti in modo semplice e senza scrivere troppo codice.

Validazione, gestione degli errori, sicurezza e test sono argomenti di prima classe 
in symfony perciò non servirà molto tempo per spiegarli. Questa è solo una delle molteplici
ragioni per usare un framework per realizzare progetti reali.

Tutto il codice che leggerete in questo tutorial potrete usarlo per un progetto reale.
Vi incoraggiamo a riutilizzare parti del codice o a "rubare" intere porzioni.

Il progetto
-----------

L'applicazione da progettare potrebbe essere stata un'altra volta il motore di un blog.
Ma vogliamo usare symfony per un progetto utile. Lo scopo è quello di dimostrare
che symfony può essere utilizzato per sviluppare applicazioni professionali con 
stile e senza sforzarsi troppo.

Terremo segreto il contenuto del progetto per un altro giorno visto che abbiamo già 
abbastanza cose da fare oggi. Tuttavia conoscete già il nome dell'applicazione:
**Jobeet**.

Cosa facciamo oggi?
-------------------

Visto che 24 ore sono molte per sviluppare un'applicazione con symfony, oggi non scriveremo
codice PHP. Ma anche senza scrivere una sola riga di codice inizierete a capire i 
benefici derivanti dall'utilizzo di un framework come symfony già dall'avvio di un 
nuovo progetto.

L'obiettivo del giorno è quello di impostare l'ambiente di sviluppo e visualizzare
una pagina dell'applicazione in un browser web. Questo include l'installazione
di symfony, la creazione dell'applicazione e la configurazione del server web.

Prerequisiti
------------

Prima di tutto controllate di avere già a disposizione un ambiente di sviluppo web
funzionante con un web server (Apache per esempio), un database engine (MySQL, PostgreSQL,
or SQLite) e PHP 5.2.4 o superiore.

Visto che useremo molto la linea di comando sarebbe meglio usare un sistema operativo
Unix-like, ma se utilizzi un sistema Windows funzionerà lo stesso dovrai solo scrivere 
qualche comando nel `cmd` prompt.

>**Nota**
>I comandi della shell Unix possono tornare utili in un sistema Windows.
>Se vi può essere utile usare comandi come `tar`, `gzip` o `grep` su Windows
>potete installare [Cygwin](http://cygwin.com/). La documentazione ufficiale
>è un po' frammentata, quindi una buona guida all'installazione la potete trovare
>[qui](http://www.soe.ucsc.edu/~you/notes/cygwin-install.html).
>Ai più avventurosi potrebbe piacere provare Microsoft's
>[Windows Services for Unix](http://technet.microsoft.com/en-gb/interopmigration/bb380242.aspx).

Visto che il tutorial si focalizzerà principalmente sul symfony framework, diamo per 
scontato che abbiate già una buona conoscenza di PHP5 e di programmazione Object Oriented.

Installazione di symfony
------------------------

Prima di tutto create una cartella per contenere i file relativi al progetto Jobeet:

    $ mkdir -p /home/sfprojects/jobeet
    $ cd /home/sfprojects/jobeet

Su Windows:

    c:\> mkdir c:\development\sfprojects\jobeet
    c:\> cd c:\development\sfprojects\jobeet

>**Nota**: agli utenti Windows raccomandiamo di eseguire symfony e di creare il nuovo progetto
>in un path che non contenga spazi.
>Evitate l'utilizzo della cartella `Documents and Settings`, stessa cosa per qualsiasi
>sotto-cartella di `My Documents`.

Create una cartella per contenere i file delle librerie di symfony framework:

    $ mkdir -p lib/vendor

Per installare symfony scaricate il [pacchetto](http://www.symfony-project.org/installation/1_2)
che trovate sul sito di symfony. Visto che questo tutorial è stato scritto per
symfony 1.2 scaricate l'ultima versione disponibile per questo ramo di sviluppo.

Dentro la sezione "Source Download" troverete l'archivio in formato `.tgz` e nel 
formato `.zip`. Scaricate il pacchetto salvandolo nella cartella `lib/vendor`
appena creata e estraetene i file:

    $ cd lib/vendor
    $ tar zxpf symfony-1.2-latest.tgz
    $ mv symfony-1.2.0 symfony

Su Windows l'estrazione dal file zip può essere fatta con explorer. Dopo che avrete
rinominato la cartella con `symfony` dovreste vedere una cartella di nome
`c:\development\sfprojects\jobeet\lib\vendor\symfony`.

Controllare che symfony sia correttamente installato usando la riga di comando
per visualizzare la versione (attenzione all'uso del maiuscolo `V`):

    $ cd ../..
    $ php lib/vendor/symfony/data/bin/symfony -V

Su Windows:

    c:\> cd ..\..
    c:\> php lib\vendor\symfony\data\bin\symfony -V

Se siete curiosi e volete sapere cosa può fare per voi questa linea di comando
digitate `symfony` per ottenere la lista di tutte le opzioni e dei task disponibili:

    $ php lib/vendor/symfony/data/bin/symfony

Su Windows:

    c:\> php lib\vendor\symfony\data\bin\symfony

La linea di comando di symfony è il miglior amico dello sviluppatore. Mette
a disposizione molti strumenti che aumentano la vostra produttività per le 
attività giornaliere come la pulizia della cache, la generazione del codice
e molto altro.

Inizializzazione del progetto
-----------------------------

In symfony **applicazioni** che condividono lo stesso modello di dati sono raggruppate
in **progetti**. Per il progetto Jobeet avremo due diverse applicazioni:
il frontend ed il backend.

### Creazione del progetto

Dalla cartella `jobeet`, eseguire il task `generate:project` per creare il progetto
symfony:

    $ php lib/vendor/symfony/data/bin/symfony generate:project jobeet

Su Windows:

    c:\> php lib\vendor\symfony\data\bin\symfony generate:project jobeet

Il task `generate:project` genera la struttura di default delle cartelle ed i file
necessari per il progetto stesso:

 | Cartella  | Descrizione
 | --------- | -------------------------------------
 | apps/     | Contiene le applicazioni del progetto
 | cache/    | I file di cache del progetto
 | config/   | I file di configurazione del progetto
 | lib/      | Le librerie e le classi del progetto
 | log/      | I file di log del framework
 | plugins/  | I plugin installati
 | test/     | Test unitari e funzionali
 | web/      | La cartella principale del web (leggi sotto)

>**NOTA**
>Perché symfony genera così tanti file? Uno dei maggiori benefici di usare
>un framework full-stack è quello di standardizzare ciò che sviluppate. Grazie
>alla struttura di default di symfony dei file e delle cartelle, ogni sviluppatore
>con un minimo di conoscenza di symfony potrà occuparsi della manutenzione di
>un progetto symfony.
>In pochi minuti sarà in grado di tuffarsi nel codice risolvendo bug e aggiungendo
>nuove feature.

Il task `generate:project` ha inoltre creato un collegamento `symfony` nella 
cartella principale del progetto Jobeet per dover scrivere meno caratteri ogni volta
che si utilizza un task.

Quindi, da ora in poi, invece che usare l'intero percorso per l'eseguibile di symfony 
useremo la scorciatoia `symfony`.

### Creazione dell'applicazione

Ora create l'applicazione frontend usando il task `generate:app`:

    $ php symfony generate:app --escaping-strategy=on --csrf-secret=Unique$ecret frontend

>**SUGGERIMENTO**
>Visto che il file symfony è eseguibile gli utenti Unix possono sostituire tutte le 
>occorrenze di 'php symfony' con './symfony' da qui in avanti.
>
>Su Windows potete copiare il file 'symfony.bat' nel vostro progetto ed utilizzare
>'symfony' invece che 'php symfony':
>
>     c:\> copy lib\vendor\symfony\data\bin\symfony.bat .

Ancora una volta il task `generate:app` ha creato la struttura di default delle cartelle
necessarie all'applicazione nella cartella `apps/frontend`:

 | Cartella   | Descrizione
 | ---------- | ------------------------------------------
 | config/    | I file di configurazione dell'applicazione
 | lib/       | Le librerie e le classi dell'applicazione
 | modules/   | Il codice dell'applicazione (MVC)
 | templates/ | I file globali delle template

>**SUGGERIMENTO**
>Tutti i comandi `symfony` devono essere eseguiti nella cartella principale
>a meno esplicite altre direttive.

Usando il task `generate:app` abbiamo passato anche due parametri relativi alla sicurezza:

  * `--escaping-strategy`: Abilita l'output escaping per prevenire gli attacchi XSS
  * `--csrf-secret`: Abilita i token di sessione per i form per prevenire gli attacchi CSRF

Passando questi due parametri opzionali al task abbiamo messo in sicurezza 
gli sviluppo futuri dell'applicazione dalle due principali vulnerabilità 
riscontrate sul web. È esatto symfony predispone in modo automatico le misure
di sicurezza al posto nostro.

>**NOTA**
>Se non sapete nulla a proposito di 
>[XSS](http://en.wikipedia.org/wiki/Cross-site_scripting) o
>[CSRF](http://en.wikipedia.org/wiki/CSRF), prendeteve il tempo per sapere qualcosa in più
>su queste vulnerabilità della sicurezza.

### Il path di symfony

Potete ottenere la versione di symfony in uso nel vostro progetto digitando:

    $ php symfony -V

L'opzione `-V` mostra anche il path della cartella di installazione di symfony
che dovreste trovare in `config/ProjectConfiguration.class.php`:

    [php]
    // config/ProjectConfiguration.class.php
    require_once '/Users/fabien/work/symfony/dev/1.2/lib/autoload/sfCoreAutoload.class.php';

Per una migliore portabilità cambiate il path assoluto all'installazione di symfony
con il path relativo:

    [php]
    // config/ProjectConfiguration.class.php
    require_once dirname(__FILE__).'/../lib/vendor/symfony/lib/autoload/sfCoreAutoload.class.php';

In questo modo potrete spostare la cartella del progetto Jobeet ovunque sulla vostra
macchina o su un'altra ed il progetto continuerà a funzionare.

Gli ambienti
------------

Se date un'occhiata alla cartella `web/`, troverete due file PHP:
`index.php` e `frontend_dev.php`. Questi file sono chiamati **front
controller**: tutte le richieste all'applicazione vengono fatte tramite loro. Ma perché
abbiamo due front controller se abbiamo definito una sola applicazione?

Entrambi i file puntano alla stessa applicazione ma per diversi ambienti.
Mentre sviluppate un'applicazione, escluso quando si sviluppa direttamente 
sul server di produzione, avete bisogno di diversi ambienti:

  * L' **ambiente di sviluppo**: È l'ambiente usato dai **web
    developer** per aggiungere nuove feature, risolvere bug...
  * L' **ambiente di test**: Quest'ambiente è utilizzato per testare in modo
    automatico l'applicazione.
  * L' **ambiente di staging**: Quest'ambiente è utilizzato dal **cliente**
    per testare l'applicazione e riportare bug o feature mancanti.
  * L' **ambiente di produzione**: Questo è l'ambiente con cui l'**utente finale**
    interagisce.

Cosa rende un ambiente unico? Nell'ambiente di sviluppo l'applicazione necessita
di scrivere nei log tutti i dettagli di una richiesta per rendere più semplice
il debug, deve mostrare le eccezioni del browser e deve avere il sistema di cache
disabilitato per fare in modo che tutte le modifiche apportate al codice siano
subito disponibili. Quindi l'ambiente di sviluppo deve essere ottimizzato per 
lo sviluppatore:

![Un'eccezione nell'ambient di sviluppo](http://www.symfony-project.org/images/jobeet/1_2/01/exception_dev.png)

Ma nell'ambiente di produzione l'applicazione deve mostrare messaggi di errore 
personalizzati piuttosto che dati grezzi e, sicuramente, il cache layer deve essere
attivo. In questo modo l'ambiente di produzione deve essere ottimizzato per le
performance e per la user experience dell'utente finale.

![Un'eccezione nell'ambient di produzione](http://www.symfony-project.org/images/jobeet/1_2/01/exception_prod.png)

Un ambiente di symfony è un unico insieme di configurazioni, symfony si presenta
con tre ambienti prestabiliti: `dev`, `test`, and `prod`.

Se aprite i file dei front controller potrete notare che l'unica differenza è
l'impostazione dell'ambiente:

    [php]
    // web/index.php
    <?php

    require_once(dirname(__FILE__).'/../config/ProjectConfiguration.class.php');

    $configuration =
    ➥ ProjectConfiguration::getApplicationConfiguration('frontend', 'prod', false);
    sfContext::createInstance($configuration)->dispatch();

>**NOTA**
>Definire un nuovo ambiente per symfony è semplice quanto creare un nuovo front
>controller. Vedremo più avanti come cambiare le impostazioni di un ambiente.

Web Server Setup: La via brutta
-------------------------------

Nella sezione precedente è stata creata una cartella per contenere i progetto
Jobeet. Se l'avete creata da qualche parte dentro la cartella principale web
del vostro server web, siete in grado di accedere al progetto da un browser web.

Chiaramente, visto che non è richiesta nessuna configurazione, il tutto è stato 
molto rapido da realizzare, tuttavia provate ad accedere al `config/databases.yml`
file nel vostro browser per capire quante pericolose conseguenze può implicare 
questo modo di agire dettato dalla pigrizia.

**Mai e poi mai utilizzare un setup di questo tipo su un server in produzione** e
leggete la prossima sezione per imparare a configurare correttamente il 
vostro web server.

Web Server Setup: La via sicura
-------------------------------

Una buona pratica web è quella di mettere nella cartella principale web solamente i
file che devono essere utilizzati da un broswer web come fogli di stile, JavaScripts
o immagini. Come da default vi suggeriamo di salvare questi file dentro la sotto-cartella
`web` del progetto symfony.

Se date uno sguardo a questa cartella troverete alcune sotto-cartelle per i materiali
web e i due file dei front controller. Questi sono gli unici file PHP che necessitano
di essere nella cartella principale web. Tutti gli altri file PHP possono essere nascosti
al browser, questa è una buona idea in termini di sicurezza.

### Configurazione del Web Server

Ora è il momento di modificare la configurazione di Apache per rendere il nuovo
progetto accessibile a tutti.

Trovate e aprite il file di configurazione `httpd.conf` e aggiungete le seguenti 
configurazioni alla fine:

    # Assicuratevi di avere questa linea una sola volta nel file
    NameVirtualHost 127.0.0.1:8080

    # Questa è la configurazione per Jobeet
    Listen 127.0.0.1:8080

    <VirtualHost 127.0.0.1:8080>
      DocumentRoot "/home/sfprojects/jobeet/web"
      DirectoryIndex index.php
      <Directory "/home/sfprojects/jobeet/web">
        AllowOverride All
        Allow from All
      </Directory>

      Alias /sf /usr/local/symfony/data/web/sf
      <Directory "/usr/local/symfony/data/web/sf">
        AllowOverride All
        Allow from All
      </Directory>
    </VirtualHost>

>**NOTA**: L'alias `/sf` permette l'accesso alle immagini ed ai javascript
>necessari per la corretta visualizzazione delle pagine di default di symfony
>e della web debug toolbar.
>
>Su Windows dovrete sostituire la riga dell'`Alias` con qualcosa come:
>
>     Alias /sf "c:\development\symfony\data\web\sf"
>
> `/home/sfprojects/jobeet/web` dovrà essere rimpiazzata con:
>
>     c:\development\sfprojects\jobeet\web

Questa configurazione mette Apache in ascolto sulla porta `8080` della vostra macchina, 
quindi il sito Jobeet sarà accessibile dal seguente URL:

    http://localhost:8080/

Potete cambiare `8080` con qualsiasi numero preferendo comunque numeri maggiori di 1024
visto che non richiedono privilegi amministrativi.

>**SIDEBAR**
>Configura un nome a dominio dedicato per Jobeet
>
>Se avete i privilegi amministrativi sulla macchina su cui lavorate è meglio
>impostare dei virtual host piuttosto che aggiungere una nuova porta ogni volta
>che iniziate un nuovo progetto. Invece che selezionare una porta ed aggiungere
>una direttiva di tipo `Listen` scegliete un nome a dominio ed aggiungete
>una direttiva di tipo `ServerName`:
>
>     # Questa è la configurazione per Jobeet
>     <VirtualHost 127.0.0.1:80>
>       ServerName jobeet.localhost
>       <!-- stessa configurazione di prima -->
>     </VirtualHost>
>
>Il nome a dominio `jobeet.localhost` deve essere dichiarato localmente. Se utilizzate
>un sistema Linux questo va fatto nel file `/etc/hosts`. Se usate Windows
>XP, questo file è posizionato nella cartella `C:\WINDOWS\system32\drivers\etc\`.
>
>Aggiungi la seguente riga:
>
>     127.0.0.1         jobeet.localhost

### Provare la nuova configurazione

Riavviate Apache e verificate di avere accesso alla nuova applicazione aprendo
il browser e digitando `http://localhost:8080/index.php/` o 
`http://jobeet.localhost/index.php/` in base alla configurazione di Apache 
selezionata nella sezione precedente.

![Congratulazioni](http://www.symfony-project.org/images/jobeet/1_2/01/congratulations.png)

>**Nota**: Se avete il modulo di Apache `mod_rewrite` installato potete
>rimuovere la parte /index.php/ da tutti gli URL.

Potete anche provare ad accedere all'applicazione nell'ambiente di sviluppo.
Digitate il seguente URL:

    http://jobeet.localhost/frontend_dev.php/

La web debug toolbar dovrebbe apparire nell'angolo in alto a destra, incluse delle piccole icone
a riprova del fatto che la configurazione dell'alias `sf/` è corretta.

![web debug toolbar](http://www.symfony-project.org/images/jobeet/1_2/01/web_debug_toolbar.png)

>**Nota**
>Il setup è leggermenti diverso se volete utilizzare symfony su un server IIS
>in un ambiente Windows. Trovate come configurare il tutto in 
>[questo tutorial](http://www.symfony-project.com/cookbook/1_0/web_server_iis).

Subversion
----------

È una buona abitudine usare source version control mentre si sviluppa un'applicazione
web. Usare un source version control vi permette di:

 * lavorare in sicurezza
 * tornare ad una versione precedente se qualche modifica blocca qualcosa
 * permette a più persone di lavorare in modo efficiente sul progetto
 * avere accetto a tutte le versioni successive dell'applicazione

In questa sezione descriveremo come usare [Subversion](http://subversion.tigris.org/) 
con symfony. Se usate un altro strumento per il source code control dovrebbe essere
abbastanza semplice adattare quanto descritto per Subversion.

Ipotizziamo che abbiate già l'accesso a un Subversion server.

>**SUGGERIMENTO**
>Se non avete un server Subversion a disposizione potete crearne uno
>in modo gratuito su [Google Code](http://code.google.com/hosting/) o solo digitando
>"free subversion repository" su Google per avere molte opzioni.

Primo, create un nuovo repository per il progetto `jobeet`:

    $ svnadmin create http://svn.example.com/jobeet
    $ svn mkdir -m "created default directory structure"
    ➥ http://svn.example.com/jobeet/trunk
    ➥ http://svn.example.com/jobeet/tags
    ➥ http://svn.example.com/jobeet/branches

Poi rimuovete il contenuto delle cartelle `cache/` e `log/` visto che non intendiamo
inserirle nel repository.

    $ cd /home/sfprojects/jobeet
    $ rm -rf cache/*
    $ rm -rf log/*

Ora assicuratevi di impostare i giusti permessi di scrittura sulle cartelle `cache`
e `log`, per fare in modo che il web server possa scriverci dentro:

    $ chmod 777 cache
    $ chmod 777 log

Poi eseguire la prima importazione:

    $ svn import -m "made the initial import" .
    ➥ http://svn.example.com/jobeet/trunk

Siccome non avremo mai bisogno di eseguire il commit per file delle cartelle 
`cache/` e `/log` potete specificare una ignore list:

    $ svn propedit svn:ignore cache

L'editor di testo di default configurato per SVN dovrebbe aprirsi. Subversion deve ignorare
tutti i contenuti delle seguenti cartelle:

    *

Salvare e uscire. Abbiamo finito.

Ripetere la procedura per la cartella `log/`:

    $ svn propedit svn:ignore log

E inserite:

    *

Infine, fate il commit di questi cambiamenti al repository:

    $ svn import -m "added cache/ and log/ content in the ignore list"

>**Suggerimento**
>Gli utenti Windows possono usare il client [TortoiseSVN](http://tortoisesvn.tigris.org/)
per gestire i propri repository subversion.

-

>**Nota**
>Il Jobeet SVN repository verrà reso pubblico giorno per giorno.
>
>Quindi anche se l'intero repository non è ancora pubblico su
>(`http://svn.jobeet.org/`) trovate il codice di oggi.
>
>Potete eseguire il checkout `release_day_01`:
>
>       $ svn co http://svn.jobeet.org/tags/release_day_01/ jobeet/

A domani
--------

Bene, il tempo per oggi è finito! Anche se non abbiamo ancora iniziato a parlare
di symfony abbiamo impostato un solido ambiente di sviluppo, abbiamo parlato di 
alcune best practice riguardanti lo sviluppo web e siamo pronti per iniziare a scrivere
codice.

Domani sveleremo ciò che l'applicazione farà e inizieremo ad affrontare symfony. Nel 
frattempo se volete restare aggiornati sulla ultime news di Jobeet non dimenticate di
abbonarvi al [feed del blog di symfony](http://www.symfony-project.org/blog/).

Assicuratevi di tornare domani!
