Giorno 11: Testare i Form
=========================

Precedentemente su Jobeet
-------------------------

Ieri abbiamo creato il nostro primo form con symfony. GLi utenti possono ora 
inserire una nuova offerta di lavoro si Jobeet, però abbiamo finito il
tempo a disposizione prima che potessimo aggiungere alcuni test.

E' quello che faremo oggi. Nel mentre impareremo ancora qualcosa sul form
framework.

>**SIDEBAR**
>Usare il Form Framewor senza symfony
>
>I componenti di symfony framework sono disaccoppiati. Questo significa che
>la maggior parte di essi può essere usata senza ricorrere all'intero framework
>MVC. Questo è il caso del form framework il quale non ha dipendenze da symfony.
>Potete usarlo in ogni applicazione PHP usando le directory `lib/form/`, `lib/widgets/`
>e `lib/validators/`.
>
>Un altro componente riutilizzabile è il routing framework. Copiate la directory
>`lib/routing/` nel vostro progetto non-symfony e sfruttatene i benefici per gli URL
>gratuitamente.
>
>Ecco i componenti che sono indipendenti da symfony dalla **symfony platform**:
>
>![The symfony plaform](http://www.symfony-project.org/images/jobeet/1_2/11/platform.png)

Inviare un Form
---------------

Aprite il file `jobActionsTest` per aggiungere i test per la creazione di 
un'offerta di lavoro e per il processo di validazione.

Alla fine del file aggiungete il seguente codice per avere la pagina di creazione
offerta:

    [php]
    // test/functional/frontend/jobActionsTest.php
    $browser->info('3 - Post a Job page')->
      info('  3.1 - Submit a Job')->

      get('/job/new')->
      with('request')->begin()->
        isParameter('module', 'job')->
        isParameter('action', 'new')->
      end()
    ;

Abbiamo già usato il metodo `click()` per simulare i click sui link. Lo stesso
metodo `click()` può essere usato per inviare un form. Per un form potete passare
i valori da inviare per ogni campo come secondo argomento di un metodo. Come 
un vero broswer l'oggetto browser si occuperà del merge dei valori di default
con i valori inviati dal form.

Ma per inviare i valori dei campi abbiamo bisogno di conoscere i loro nomi. Se
aprite il codice sorgente oppure utilizzare la Firefox Web Developer Toolbar con 
la funzione "Forms > Display Form Details" potrete vedere che il nome del campo
`company` è `jobeet_job[company]`.

>**NOTA**
>Quando PHP incontra un campo di input con un nome tipo `jobeet_job[company]`
>lo converte automaticamente in un array di nome `jobeet_job`.

Per far sembrare le cose un po' più semplici cambiamo il formato a `job[%s]`
aggiungendo il seguente codice alla fine del metodo `configure()` del `JobeetJobForm`:

    [php]
    // lib/form/JobeetJobForm.class.php
    $this->widgetSchema->setNameFormat('job[%s]');

Dopo questa modifica il nome del campo `company` dovrebbe essere `job[company]`.
E' giunto quindi il momento di cliccare sul pulsante "Preview your job" passando
dati validi al form:

    [php]
    // test/functional/frontend/jobActionsTest.php
    $browser->info('3 - Post a Job page')->
      info('  3.1 - Submit a Job')->

      get('/job/new')->
      with('request')->begin()->
        isParameter('module', 'job')->
        isParameter('action', 'new')->
      end()->

      click('Preview your job', array('job' => array(
        'company'      => 'Sensio Labs',
        'url'          => 'http://www.sensio.com/',
        'logo'         => sfConfig::get('sf_uploads_dir').'/jobs/sensio-labs.gif',
        'position'     => 'Developer',
        'location'     => 'Atlanta, USA',
        'description'  => 'You will work with symfony to develop websites for our customers.',
        'how_to_apply' => 'Send me an email',
        'email'        => 'for.a.job@example.com',
        'is_public'    => false,
      )))
    ;

Il form deve essere inviato all'action `create`:

    [php]
    with('request')->begin()->
      isParameter('module', 'job')->
      isParameter('action', 'create')->
    end()->

Il browser inoltre simula l'upload di file passando il path assoluto del file 
da caricare.

Il Form Tester
--------------

Il form che abbiamo inviato dovrebbe essere valido. Potete testarlo usando il
**form tester**:

    [php]
    with('form')->begin()->
      hasErrors(false)->
    end()->

Il form tester ha diversi metodi per testare lo stato corrente di un form, come
gli per gli errori.

Se fate un errore nel test, ed il test non passa, potete usare lo statement
`with('response')->debug()` visto durante il giorno 9. Ma dovrete scavare nell'HTML
generato per verificare i messaggi d'errore. Non è molto conveniente. Quindi il 
form tester mette a disposizione un metodo `debug()` che mostra lo stato del
form e tutti i messaggi d'errore associati:

    [php]
    with('form')->debug()

Redirection Test
----------------

Con un form valido l'offerta di lavoro dovrebbe venire creata e l'utente rediretto
alla pagina `show`:

    [php]
    isRedirected()->
    followRedirect()->

    with('request')->begin()->
      isParameter('module', 'job')->
      isParameter('action', 'show')->
    end()->

`isRedirected()` verifica se la pagina è stata redirezionata ed il metodo
`followRedirect()` segue il redirect.

Il Propel Tester
----------------

Alla fine vorremo verificare che l'offerta di lavoro sia stata creata sul database
e verificare che la colonna `is_activated` sia impostata sul valore `false`
visto che l'utente non l'ha ancora pubblicata.

Questo può essere fatto facilmente utilizzando un altro tester, il **Propel
tester**. Visto che il Propel tester non è inserito di default aggiungiamolo
ora:

    [php]
    $browser->setTester('propel', 'sfTesterPropel');

Il Propel tester offre il metodo `check()` per verificare che uno o più oggetti
nel database corrispondano al criterio passato come argomento.

    [php]
    with('propel')->begin()->
      check('JobeetJob', array(
        'location'     => 'Atlanta, USA',
        'is_activated' => false,
        'is_public'    => false,
      ))->
    end()

Il criterio può essere un array di valori come qui sopra o un'istanza di 
`Criteria` per query più complesse. Potete verificare l'esistenza di oggetti 
corrispondenti al criterio con un Boolean come terzo argomento (il default è `true`)
o il numero di oggetti corrispondenti passando un intero.