Day 24: Another Look at symfony
===============================

Today is the last stop of our trip to the wonderful world of symfony. During these
twenty-three days, you learned symfony by example: from the design
patterns used by the framework, to the powerful built-in features. You are
not a symfony master yet, but you have all the needed knowledge to start
building your symfony applications with confidence.

As we wrap up the Jobeet tutorial, let's have another look at the
framework. Forget Jobeet for an hour, and recall all the features you learned
during the last three weeks.

What is symfony?
----------------

The symfony framework is a set of
[cohesive but decoupled sub-frameworks](#day_11_sidebar_using_the_form_framework_without_symfony),
that forms a full-stack [MVC framework](#day_04_the_mvc_architecture)
(Model, View, Controller).

Before coding head first, take some time to read the
[symfony history and philosophy](#day_01_introduction).
Then, check the framework [prerequisites](#day_01_prerequisites)
and use the [`check_configuration.php` script](#day_01_symfony_installation)
to validate your configuration.

Eventually, [install symfony](#day_01_symfony_installation). After some time
you will also want to [upgrade](#day_23_sub_upgrading_symfony) to the latest
version of the framework.

The framework also provides tools to ease [deployment](#day_23_deploying).

The Model
---------

The Model part of symfony can be done with the help of the
<propel>
[Propel ORM](http://propel.phpdb.org/). Based on the
</propel>
<doctrine>
[Doctrine ORM](http://www.doctrine-project.org/). Based on the
</doctrine>
[database description](#day_03_the_schema), it generates classes for
[objects](#day_03_the_orm), [forms](#day_10_the_forms), and
[filters](#day_12_filters_configuration). ##ORM## also
[generates the SQL](#day_03_the_orm) statements used to create the tables in the
database.

The database configuration can be done with a [task](#day_03_the_database)
or by editing a [configuration file](#day_03_the_database). Beside its
configuration, it is also possible to inject initial data, thanks to
[fixture files](#day_03_the_initial_data). You can even make these files
[dynamic](#day_06_dynamic_fixtures).

<propel>
Propel objects can also be easily [internationalized](#day_19_sub_propel_objects).
</propel>
<doctrine>
Doctrine objects can also be easily [internationalized](#day_19_sub_doctrine_objects).
</doctrine>

The View
--------

By default, the View layer of the MVC architecture uses plain PHP files as
templates.

Templates can use [helpers](#day_04_the_stylesheets_images_and_javascripts) for
recurrent tasks like creating a [URL](#day_05_routing_in_actions_and_templates)
or a [link](#day_05_routing_in_actions_and_templates).

A template can be decorated by a [layout](#day_04_the_layout) to abstract the
header and footer of pages. To make views even more reusable, you can
define [slots](#day_04_slots), [partials](#day_07_partials), and
[components](#day_19_language_switching).

To speed up things, you can use the
[cache sub-framework](#day_22_cache_configuration) to cache a
[whole page](#day_22_page_cache), just the [action](#day_22_action_cache),
or even just [partials or components](#day_22_partial_and_component_cache).
You can also [remove the cache](#day_22_removing_the_cache) manually.

The Controller
--------------

The Controller part is managed by [front controllers](#day_01_the_environments)
and [actions](#day_03_see_it_in_action_in_the_browser).

Tasks can be used to create [simple modules](#day_07_job_category_module_creation),
[CRUD modules](#day_03_see_it_in_action_in_the_browser), or even to generate
fullly working [admin modules](#day_12_backend_modules) for model classes.

Admin modules allows you to built a fully functional application without
coding anything.

To abstract the technical implementation of a website, symfony uses a
[routing](#day_05_routing_configuration) sub-framework that generates
[pretty URLs](#day_05_urls). To make implementing web services even easier,
symfony supports [formats](#day_15_formats) out of the box. You can also
create your own [formats](#day_16_sub_the_code_yaml_code_format).

An action can be [forwarded](#day_04_sidebar_the_forward_methods_family) to another
one, or [redirected](#day_05_sidebar_the_redirect_methods_family).

Configuration
-------------

The symfony framework makes it easy to have different configuration settings
for different environments. An [environment](#day_01_the_environments) is a set
of settings that allows different behaviors on the development or production
servers. You can also create new
[environments](#day_22_creating_a_new_environment).

The symfony configuration files can be defined at
[different levels](#day_04_sidebar_configuration_principles_in_symfony) and
most of them are
[environment aware](#day_08_sidebar_configuration_principles_in_symfony):

 * [`app.yml`](#day_06_custom_configuration)
 * [`cache.yml`](#day_22_cache_configuration)
 * [`databases.yml`](#day_03_the_database)
 * [`factories.yml`](#day_23_the_factories)
 * [`generator.yml`](#day_12_the_symfony_cache)
 * [`routing.yml`](#day_05_routing_configuration)
 * [`schema.yml`](#day_03_the_schema)
 * [`security.yml`](#day_13_sub_authentication)
 * [`settings.yml`](#day_11_sub_built_in_security_features)
 * [`view.yml`](#day_04_the_stylesheets_images_and_javascripts)

The configuration files mostly uses the
[YAML format](#day_03_sidebar_the_yaml_format).

Instead of using the default directory structure and organize your application
files by layers, you can also organize them by feature, and bundle them in
[a plugin](#day_20_sub_a_different_way_to_organize_code). Speaking of the default
directory structure, you can also
[customize it](#day_23_customizing_the_directory_structure)
according to your needs.

Debugging
---------

<propel>
From [logging](#day_06_debugging_propel_generated_sql) to the
[web debug toolbar](#day_06_debugging_propel_generated_sql), and
</propel>
<doctrine>
From [logging](#day_06_debugging_doctrine_generated_sql) to the
[web debug toolbar](#day_06_debugging_doctrine_generated_sql), and
</doctrine>
[meaningful exceptions](#day_01_the_environments), symfony provides a lot of
useful tools to help the developer debug problems faster.

Main symfony Objects
--------------------

The symfony frameworks provides quite a few core objects that abstract
recurrent needs in web projects: the [request](#day_04_sub_the_request),
the [response](#day_04_sub_the_response), the
[user](#day_13_sub_the_code_myuser_code_class), the [logging](#day_23_sub_logging),
the [routing](#day_05_routing_configuration), and the
[view cache manager](#day_22_removing_the_cache).

These core objects are managed by the
[`sfContext` object](#day_22_sidebar_the_code_sfcontext_code_class), and
they are configured via the [factories](#day_23_the_factories).

The user manages user [authentication](#day_13_sub_authentication),
[authorization](#day_13_sub_authorization), [flashes](#day_13_user_flashes),
and [attributes](#day_13_user_attributes) to be serialized in the session.

Security
--------

The symfony framework has built-in protections against
[XSS](#day_01_sub_application_creation) and
[CSRF](#day_01_sub_application_creation). These settings can be configured
from the [command line](#day_01_sub_application_creation),
or by editing a [configuration file](#day_11_sub_xss_and_csrf_protection).

The form framework also provides
[built-in security features](#day_11_sub_built_in_security_features).

Forms
-----

As managing forms is one of the most tedious task for a web developer, symfony
provides a [form sub-framework](#day_10_the_form_framework). The form framework
comes bundled with a lot of [widgets](http://www.symfony-project.org/api/1_2/widget)
and [validators](http://www.symfony-project.org/api/1_2/validator). One of the
strength of the form sub-framework is that templates are very easily
[customizables](#day_10_sidebar_customizing_the_look_and_feel_of_a_form).

If you use ##ORM##, the form framework also makes it easy to
<propel>
[generate forms and filters](#day_10_propel_forms) based on your models.
</propel>
<doctrine>
[generate forms and filters](#day_10_doctrine_forms) based on your models.
</doctrine>

Internationalization and Localization
-------------------------------------

[Internationalization](#day_19_internationalization) and
[localization](#day_19_localization) are supported by symfony, thanks to the
ICU standard. The [user culture](#day_19_sub_the_user_culture) determines the
language and the country of the user. It can be defined by the user itself, or
embedded in the [URL](#day_19_culture_in_the_url).

Tests
-----

The lime library, used for **unit tests**, provides a lot of
[testing methods](#day_08_the_code_lime_code_testing_framework). The
<propel>
[Propel objects can also be tested](#day_08_propel_unit_tests) from
</propel>
<doctrine>
[Doctrine objects can also be tested](#day_08_doctrine_unit_tests) from
</doctrine>
a [dedicated database](#day_08_sub_database_configuration) and
with dedicated [fixtures](#day_08_sub_test_data).

Unit tests can be run
[one at a time](#day_08_running_unit_tests) or
[all together](#day_08_unit_tests_harness).

**Functional tests** are written with the
[`sfFunctionalTest`](#day_09_the_code_sftestfunctional_code_class) class, which
uses a [browser simulator](#day_09_the_code_sfbrowser_code_class) and allows
symfony core objects introspection through
[Testers](#day_09_the_code_sftestfunctional_code_class). Testers exist for
the [request object](#day_09_sub_the_request_tester), the
[response object](#day_09_sub_the_response_tester), the
[user object](#day_13_user_testing), the
[current form object](#day_11_the_form_tester), the
[cache layer](#day_22_testing_the_cache) and the
<propel>
[Propel objects](#day_11_the_propel_tester).
</propel>
<doctrine>
[Doctrine objects](#day_11_the_doctrine_tester).
</doctrine>

You can also use debugging tools for the
[response](#day_09_debugging_functional_tests)
and [forms](#day_11_the_form_tester).

As for the unit tests, functional tests can be run
[one by one](#day_09_running_functional_tests) or
[all together](#day_09_functional_tests_harness).

You can also run [all tests together](#day_09_tests_harness).

Plugins
-------

The symfony framework only provides the foundation for your web applications
and relies on [plugins](#day_20_using_plugins) to add more
features. In this tutorial, we have talked about [`sfGuardPlugin`](#day_13_plugins),
[`sfFormExtraPlugin`](#day_19_language_switching), and
[`sfTaskExtraPlugin`](#day_20_contributing_a_plugin).

A plugin must be [activated](#day_20_sidebar_plugin_activation) after
installation.

Plugins are the best way to [contribute back](#day_20_contributing_a_plugin)
to the symfony project.

Tasks
-----

The symfony CLI provides a lot of tasks, and the most useful have been
discussed in this tutorial:

 * [`app:routes`](#day_05_route_debugging)
 * [`cache:clear`](#day_22_clearing_the_cache)
 * [`configure:database`](#day_03_the_database)
 * [`generate:project`](#day_01_sub_project_creation)
 * [`generate:app`](#day_01_sub_application_creation)
 * [`generate:module`](#day_07_job_category_module_creation)
 * [`help`](#day_03_the_orm)
 * [`i18n:extract`](#day_19_sub__code_i18n_extract_code_)
 * [`list`](#day_13_backend_security)
 * [`plugin:install`](#day_13_plugins)
 * [`plugin:publish-assets`](#day_20_sub_the_assets)
 * [`project:deploy`](#day_23_sub_deploying_strategies)
 * [`propel:build-all`](#day_03_the_orm)
 * [`propel:build-all-load`](#day_07_update_the_database)
<propel>
 * [`propel:build-forms`](#day_10_propel_forms)
</propel>
<doctrine>
 * [`doctrine:build-forms`](#day_10_doctrine_forms)
</doctrine>
 * [`propel:build-model`](#day_03_the_orm)
 * [`propel:build-sql`](#day_03_the_orm)
 * [`propel:data-load`](#day_03_the_initial_data)
 * [`propel:generate-admin`](#day_12_backend_modules)
 * [`propel:generate-module`](#day_03_see_it_in_action_in_the_browser)
 * [`propel:insert-sql`](#day_03_the_orm)
 * [`test:all`](#day_09_tests_harness)
 * [`test:coverage`](#day_08_sidebar_code_coverage)
 * [`test:functional`](#day_09_running_functional_tests)
 * [`test:unit`](#day_08_running_unit_tests)

You can also [create your own tasks](#day_11_maintenance_tasks).

Acknowledgements
----------------

Writing a tutorial like Jobeet is both exciting and exhausting. You spend hour
after hour trying to figure out how to convey your message, how to explain
concepts, and how to provide simple but meaningful and reusable examples.

Writing such a big tutorial is just impossible to do without people around
supporting you along the process. For Jobeet, I (**Fabien Potencier**) had the
chance to benefit from top notch reviewers. They are all part of the symfony
adventure and I want to thank them all for the time they spent on the Jobeet
project.

**Kris Wallsmith**, our community manager and soon-to-be-announced symfony 1.3
release manager, took the time to proof-read my far-from-perfect English
prose. As this tutorial was published on a day-to-day basis, and because I
live in France, and he in the US, he got up very early every single morning
this month, including weekends, to read and fix each tutorial.

**Stefan Koopmanshap**, one of the most active symfony evangelist, took the
responsibility to run the Subversion repository. Thanks to his work, you can
view the code and start reading the tutorial for any day.

**Fabian Lange**, the symfony 1.2 release manager, and the symfony "guy",
read the book with a Windows perspective and tried to be our newbie
reader. On a side note, he recently bought a Mac so we need someone else to
take on the "Windows guy" responsibility.

**Jonathan Wage**, the Doctrine lead developer, took the time to create a
Doctrine edition of the tutorial. Thanks to his great efforts, you can choose
between Propel or Doctrine as your main ORM for symfony, and still enjoy the
same tutorial.

**Pascal Borelli**, an online barfly on the symfony french IRC channel, and
the most friendly symfony community member, read the tutorial chapter after
chapter at speed light. His continuous support and his kind words kept me in
good mood to write this tutorial from start to finish.

See you soon
------------

Before you leave, I would like to talk about one last thing about symfony. The
framework has a lot of great features and a lot of free documentation. But,
one of the most valuable asset an Open-Source can have is its community. And
symfony has one of the most amazing and active community around. If you
start using symfony for your projects, consider joining the symfony community:

  * Subscribe to the [user mailing-list](http://groups.google.com/group/symfony-users)
  * Subscribe to the official [blog feed](http://feeds.feedburner.com/symfony/blog)
  * Subscribe to the symfony [planet feed](http://feeds.feedburner.com/symfony/planet)
  * Come and chat on the [#symfony IRC](irc://irc.freenode.net/symfony) channel on freenode

Joyeux Noël !

__ORM__