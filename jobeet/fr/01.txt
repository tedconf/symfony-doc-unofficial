Jour 1: Démarrage du projet
==============================

Introduction
------------

Le framework symfony est un projet Open-Source depuis plus de 3 ans. Il est
.devenu l'un des plus populaire framework PHP grâce à ses fonctionnalités et sa
bonne documentation. Cette grande tradition à commencer dès le début.

En Décembre 2005, après la première version officielle de symfony, nous avons
publié "[le tutorial Askeet](http://www.symfony-project.org/askeet/1_0/fr/)",
une série de 24 tutoriaux publiés jour par jour entre le 1er Décembre et Noël.

Ce tutorial a prouvé qu'il était un formidable outils pour promouvoir le
framework aux nouveaux développeurs. Beaucoup de développeurs ont appris symfony
grâce à askeet, et beaucoup d'entreprises l'utilisent encore aujourd'hui comme
principal support d'apprentissage.

Nous célébrons actuellement la version 1.2 de symfony et le tutorial askeet
commence à montrer son âge. C'est le temps pour un nouveau tutorial tout
frais.

Découvrez Jobeet, le tutorial du calendrier l'Avent 2008 !

Le défi
-------

C'est vrai, nous le faisons à nouveau. Chaque jour, week-end inclus, nous
publierons un nouveau tutorial. Chaque tutorial dure 1 heure, et ce sera
l'occasion de développer un vrai site web du début à la fin.

24 fois une heure est égal à un jour, nous pensons que c'est le temps nécessaire
à un développeur pour apprendre les bases de symfony. Chaque jour nous
ajouterons de nouvelles fonctionnalités à l'application. Nous en profiterons
pour vous présenter les nouvelles fonctionnalités de symfony ainsi que les
bonnes pratiques de développement web.

Pour askeet, le 21ième jour était : "payez vous un gourou symfony pour un jour".
Nous n'avions pas de plan et la communauté devait nous proposer une
fonctionnalité à ajouter à askeet. Ce fût un énorme succès et la communauté
décida que l'application devait avoir un moteur de recherche. Et nous l'avons
fait. Le 21ième jour a également montré, que c'était l'un des plus populaires du
tutorial askeet.

Pour Jobeet, nous allons célébré le jour de l'hiver ce 21 Décembre par un "jour
du design". Après le 4ième jour, nous allons avoir tout le code HTML et CSS
nécessaire pour commencer le conception graphique du site web public de Jobeet.
Donc si vous travaillez avec un graphiste, ou que votre entreprise a un
département avec des graphistes, vous êtes alors capable de proposer une
conception graphique. Le 21 Décembre, nous proposerons un sondage, et la
communauté choisira la conception graphique fournie avec Jobeet. Vous serez bien
sûr dans les crédits et vous aurez la célébrité qui va avec !

Ce tutorial est différent
--------------------------

Souvenez-vous des premiers jours de PHP4. Ah,la [Belle
Époque](http://fr.wikipedia.org/wiki/Belle_Époque)! PHP était un des premiers
langages dédiés au web et un des plus simples à apprendre.

Mais comme les technologies du web évoluent à un rythme très rapide, les
développeurs doivent se tenir informé des dernières bonnes pratiques et des
derniers outils. La meilleure façon d'apprendre est de lire des articles de blog,
des tutoriaux, et des livres. Nous en avons beaucoup lu, que ce soit pour du
PHP, Python, Java, Ruby, ou Perl, et beaucoup d'entre eux commencent à être
limités lorsque l'auteur donne des bouts de code à titre d'exemple.

Vous avez probablement lu des avertissements comme ceux-ci :

  "Pour une application réelle, n'oubliez pas de gérer la validation et la
  gestion des erreurs."

ou

  "La sécurité n'est pas abordé car c'est un exercice."

ou

  "Vous devez bien sûr écrire des tests."

Comment ? Ces choses sont sérieuses. Ce sont probablement les parties les plus
importantes de n'importe quelle partie du code. Et comme un lecteur, on vous
laisse seul avec. Sans prendre en compte ces sujets, les exemples sont moins
utiles. Vous ne pouvez pas les utilise comme bon point de départ. C'est mauvais
! Pourquoi ? Parce que la sécurité, la validation, la gestion des erreurs, et
les tests, pour ne nommer qu'eux, sont à prendre en compte pour bien développer. 

Dans ce tutorial, vous ne lirez jamais d'avertissements comme ceux cités
ci-dessus car nous allons écrire des tests, du code pour la gestion d'erreur ou
de validation, et soyez certain que nous allons développer une application
sécurisée. C'est pourquoi symfony traite du code, mais également des bonnes
pratiques et comment développer des applications professionnelles pour les
entreprises. Nous allons nous permettre ce luxe car symfony fournit tous les
outils pour développer facilement ces aspects sans écrire trop de ligne de code.

La validation, la gestion des erreurs, la sécurité, et les tests sont des
citoyens de première classe dans symfony, cela ne prendra pas trop de temps à
expliquer. C'est seulement une des raisons pour utiliser un framework pour les
projets "de la vie réelle".

Le code que vous lirez dans ces tutoriaux est du code que vous pouvez utilisez
dans vos projets. Nous vous encourageons à copier et coller des bouts de code ou
voler des parties entières.

Le Projet
---------

L'application qui va être conçue aurait pu être encore un autre moteur de blog.
Mais nous voulons utiliser symfony pour un projet utile. L'objectif est de
montrer que symfony peut être utilisé pour développer des applications
professionnelles avec du style et le moindre effort.

Nous conserverons le contenu du projet secret jusqu'au prochain jour car nous
avons à faire aujourd'hui. Vous connaissez déjà le nom de l'application :
**Jobeet**.

Au menu aujourd'hui?
--------------------

Comme 24 heures représente un temps suffisant pour développer une application
avec symfony, nous n'écrirons pas de code aujourd'hui. Mais même sans écrire une
ligne de code, vous allez commencer à comprendre les bénéfices de l'utilisation
d'un framework comme symfony seulement en mettant en place un nouveau projet.

L'objectif du jour est d'installer l'environnement de développement et
d'afficher une page de l'application dans un navigateur. Cela demande
d'installer symfony, de créer une application, et de configurer un serveur web.

Pré requis
---------

Avant tout, vérifiez que vous avez un environnement de développement web avec
un serveur web ( Apache par exemple ), un moteur de base de données ( Mysql,
PostgreSQL, SQLite), et PHP dans sa version 5.2.4 ou supérieure.

Comme nous utilisons beaucoup la ligne de commande, il est préférable
d'utiliser un Unix-like OS. Si vous utilisez un système Windows, cela
fonctionnera également, vous devrez seulement taper quelques commandes dans la
fenêtre `cmd`.

>**Note**
>Les commandes shell Unix sont pratiques dans un environnement Windows.
>Si vous voulez utilisez des outils comme `tar`, `gzip`, ou `grep` dans Windows
>vous pouvez installer [Cygwin](http://cygwin.com/). La documentation officielle
>est un peut petite, mais un bon guide d'installation est disponible
>[ici](http://www.soe.ucsc.edu/~you/notes/cygwin-install.html).
>Les aventuriers pourront essayer 
>[Windows Services for Unix](http://technet.microsoft.com/en-gb/interopmigration/bb380242.aspx).
>de Microsoft.

Comme ce tutoriel se concentre plus particulièrement sur le framework symfony,
nous considérerons que vous disposez déjà d'un solide bagage en PHP5 et programmation
Orientée Objet.

L'installation de Symfony
-------------------------

Premièrement, créer un répertoire pour enregistrer les fichiers du projet Jobeet
:

    $ mkdir -p /home/sfprojects/jobeet
    $ cd /home/sfprojects/jobeet

Pour Windows:

    c:\> mkdir c:\development\sfprojects\jobeet
    c:\> cd c:\development\sfprojects\jobeet

>**Note**: Nous conseillons aux utilisateurs de windows de faire fonctionner
>symfony et d'installer leur nouveau projet dans un chemin qui ne contient pas
>d'espaces.
>Éviter d'utiliser le dossier `Documents and Settings` et `My Documents`

Créer un répertoire pour enregistrer les fichiers de la librairie du framework
symfony :

    $ mkdir -p lib/vendor

Pour installer symfony, télécharger le [paquet de
l'archive](http://www.symfony-project.org/installation/1_2) sur le site de
symfony. Le tutorial est écrit pour symfony version 1.2, télécharger le dernière version
de l'archive pour cette version.

En dessous de la section "Source Download" vous trouverez l'archive au format
`tgz` ou `.zip`. Téléchargez l'archive et mettez la dans le dossier `lib/vendor`
fraîchement créée, puis décompressez la.

    $ cd lib/vendor
    $ tar zxpf symfony-1.2-latest.tgz
    $ mv symfony-1.2.0 symfony

Avec Windows dézipper l'archive zip peut être fait avec l'explorateur. Après
avoir renommé le répertoire par `symfony`, vous devriez avoir un répertoire
nommé `c:\development\sfprojects\jobeet\lib\vendor\symfony`.

Comme la configuration de PHP varie d'une distribution à une autre, nous devons
vérifier que votre configuration répond aux exigences minimum de symfony.
Exécutez le script de vérification de configuration fournit avec symfony à
partir de la ligne de commande :

    $ cd ../..
    $ php lib/vendor/symfony/data/bin/check_configuration.php

S'il y a un problème, la sortie vous donnera les conseils pour le résoudre.
Comme la configuration de PHP peut être différente vous pouvez également
exécuter le script à partir d'un navigateur. Copier le script quelque part sous
la racine web de votre serveur web et appeler le fichier. N'oubliez pas
d'enlever le fichier par la suite.

![Configuration check](http://www.symfony-project.org/images/jobeet/1_2/01/configuration_check.png)

Si le script n'affiche aucune erreur, vérifiez que symfony est installé
correctement en utilisant la ligne de commande de symfony pour afficher sa
version ( la lettre `V` en majuscule ) : 

    $ php lib/vendor/symfony/data/bin/symfony -V

Pour Windows:

    c:\> cd ..\..
    c:\> php lib\vendor\symfony\data\bin\symfony -V

Si vous êtes curieux et que vous voulez voir ce que la ligne de commande peut
faire pour vous, tapez `symfony` pour lister les options et tâches disponibles :

    $ php lib/vendor/symfony/data/bin/symfony

Pour Windows:

    c:\> php lib\vendor\symfony\data\bin\symfony

La ligne de commande symfony est le meilleur ami du développeur. Elle fournit un
ensemble d'utilitaire qui augmente votre productivité pour vos activités de tous
les jours comme effacer le cache, générer du code, et beaucoup plus encore. 

Installation du Projet
---------------------

Dans symfony les **applications** partagent le même modèle de données et sont
regroupées par **projets**. Pour le projet Jobeet nous aurons deux applications
différentes : une nommée frontend et l'autre backend.

### Création du Projet

A partir du répertoire `jobeet` exécuter la tâche symfony `generate:project`
pour créer le projet.

    $ php lib/vendor/symfony/data/bin/symfony generate:project jobeet

Pour Windows:

    c:\> php lib\vendor\symfony\data\bin\symfony generate:project jobeet

La tâche `generate:project` génère la structure par défaut des répertoires et
crée les fichiers nécessaires d'un projet symfony.

 | Directory | Description
 | --------- | -----------------------------------------
 | apps/     | Contient les applications du projet
 | cache/    | Les fichiers en cache
 | config/   | Les fichiers de configuration du projet
 | lib/      | Les librairies et classes du projet
 | log/      | Les fichiers de logs du framework
 | plugins/  | Les plugins installés
 | test/     | Les tests unitaires et fonctionnels
 | web/      | Le répertoire racine web (voir dessous)

>**NOTE**
>Pourquoi symfony génère autant de fichiers ? Un des bénéfices d'utiliser un
>framework hiérarchisé c'est de standardiser vos développements. Grâce à la
>structure par défaut des fichiers et répertoires de symfony, n'importe quel
>développeur connaissant symfony peut reprendre n'importe quel projet symfony.
>En quelques minutes, il sera à même de naviguer dans le code, de fixer les
>bogues, et d'ajouter de nouvelles fonctionnalités. 

La tâche `generate:project` a également crée un raccourci `symfony` à la racine
du projet Jobeet pour faciliter l'écriture de la commande lorsque vous exécutez
une tâche.

À partir de maintenant, au lieu d'utiliser le chemin complet pour executer la
commande symfony, nous utiliserons le raccourci `symfony`.

### Création d'application

Créez l'application frontend en exécutant la tâche `generate:app` :

    $ php symfony generate:app --escaping-strategy=on --csrf-secret=Unique$ecret frontend

>**TIP**
>Le fichier symfony est executable, les utilisateurs Unix peuvent remplacer
>chaque occurrence 'php symfony' par './symfony' dès maintenant.
>
> Pour windows vous pouvez copier le fichier 'symfony.bat' dans votre projet et
> utiliser 'symfony' à la place de 'php symfony':
>
>     c:\> copy lib\vendor\symfony\data\bin\symfony.bat .

Une fois de plus, la tâche `generate:app` crée la structure par défaut des
répertoires de l'application dans le dossier `apps/frontend`.

 | Directory  | Description
 | ---------- | -----------------------------------------------
 | config/    | Les fichiers de configuration de l'application
 | lib/       | Les librairies et classes de l'application
 | modules/   | Le code de l'application ( MVC )
 | templates/ | Les gabarits principaux

>**TIP**
>Toutes les commandes `symfony` doivent être exécutées à partir du répertoire
>racine du projet, sauf si le contraire est explicitement indiqué.

Lorsque nous avons appelé la tâche `generate:app` nous avons passé deux options
pour la sécurité :

  * `--escaping-strategy`: Active les échappements pour prévenir des attaques XSS
  * `--csrf-secret`: Active les jetons de sessions des formulaires pour prévenir
des attaques CSRF

En passant ces deux options à la tâche, nous avons sécurisé notre futur
développement des deux plus courantes vulnérabilités trouvées sur le web.
C'est bien, symfony va automatiquement prendre les mesures de sécurité pour
nous.

>**NOTE**
>Si vous ne connaissez pas
>[XSS](http://fr.wikipedia.org/wiki/Cross-site_scripting) ou 
>[CSRF](http://fr.wikipedia.org/wiki/Cross-Site_Request_Forgeries), prenez le temps d'apprendre un peu
>plus sur ces failles de sécurité.

### Le Chemin de Symfony

Vous pouvez voir la version de symfony utilisée par votre projet en tapant :

    $ php symfony -V

L'option `V` affiche également le chemin vers le répertoire d'installation de
symfony, que vous retrouvez également dans le fichier `config/ProjectConfiguration.class.php`:

    [php]
    // config/ProjectConfiguration.class.php
    require_once '/Users/fabien/work/symfony/dev/1.2/lib/autoload/sfCoreAutoload.class.php';

Pour une meilleur portabilité du projet, changez le chemin absolu de
l'installation de symfony par un chemin relatif :

    [php]
    // config/ProjectConfiguration.class.php
    require_once dirname(__FILE__).'/../lib/vendor/symfony/lib/autoload/sfCoreAutoload.class.php';

De cette façon vous pouvez déplacer votre projet Jobeet n'importe où sur votre
machine ou sur une autre, cela fonctionnera toujours.

Les environnements
--------------------

Si vous jetez un œil au répertoire `web/`, vous trouvez deux fichiers PHP :
`index.php` et `frontend_dev.php`. Ces fichiers sont appelés **front
controllers** : toutes les requêtes vers l'application sont faites en passant
par eux. Mais pourquoi avons-nous 2 front controllers alors que nous n'avons
qu'une seule application ?

Les deux fichiers pointent sur la même application mais en utilisant deux
environnements différents. Lorsque vous développez une application, sauf si
vous développez directement sur le serveur de production, vous avez besoin de
plusieurs environnements.

  * **L'environnement de développement** : c'est l'environnement utilisé par
    **les développeurs** pour ajouter de nouvelles fonctionnalités, fixer les
    bogues...
  * **L'environnement de tests** : c'est l'environnement pour tester
    automatiquement l'application.
  * **L'environnement de recette** : c'est l'environnement utilisé par le
    **client** pour tester l'application et faire un retour sur les bogues ou
    les fonctionnalités manquantes.
  * **L'environnement de production** : c'est l'environnement utilisé par
    **l'utilisateur final**

Qu'est-ce qui fait qu'un environnement est unique ? Dans l'environnement de
développement, l'application doit 'loguée' tous les détails d'une requête pour
faciliter le 'débugage', elle doit également afficher les exceptions dans le
navigateur, mais le système de cache doit être désactivé car les changements
dans le code doivent être pris en compte de suite. Donc l'environnement de
développement doit être optimisé pour le développeur:

![Une exception dans l'environnement de développement](http://www.symfony-project.org/images/jobeet/1_2/01/exception_dev.png)

Par contre dans l'environnement de production, l'application doit afficher des
messages d'erreur adaptés à la place d'exceptions PHP, et bien sûr, le cache
doit être activé. Donc l'environnement de production doit être optimisé pour
la performance et l'expérience utilisateur.

![Une exception dans l'environnement de production](http://www.symfony-project.org/images/jobeet/1_2/01/exception_prod.png)

Dans symfony un environnement est un jeu unique de paramètres de configuration
et symfony est installé avec trois d'entre eux : `dev`, `test`, et `prod`.

Si vous ouvrez les fichiers de front controllers, vous verrez que la seule
différence est le paramètre d'environnement :

    [php]
    // web/index.php
    <?php

    require_once(dirname(__FILE__).'/../config/ProjectConfiguration.class.php');

    $configuration =
    ➥ ProjectConfiguration::getApplicationConfiguration('frontend', 'prod', false);
    sfContext::createInstance($configuration)->dispatch();

>**NOTE**
>Définir un nouvel environnement dans symfony est aussi simple que de créer un
>nouveau front controller. Nous verrons plus tard comment modifier les
>paramètres pour un environnement.

Configuration du serveur web : la pire méthode
----------------------------------------------

Dans la section précédente, un répertoire a été créée pour héberger le projet
Jobeet. Si vous l'avez créée quelque part en dessous de la racine web de votre
serveur, vous pouvez dès à présent y accéder par un navigateur.

Bien sûr comme cela vous n'avez rien à configurer, c'est très rapide à
installer, mais essayer d'accéder au ficher `config/databases.yml` à partir du
navigateur pour comprendre les mauvaises conséquences que peuvent avoir une
attitude de paresseux. 

**Ne jamais utiliser cette installation sur un serveur de production** et lisez
la section suivante pour apprendre à configurer correctement votre serveur web.

Configuration du server web : la méthode sécurisée
--------------------------------------------------

Une bonne pratique pour le web est de mettre seulement sous la racine web les
fichiers qui seront appelés par un navigateur comme les feuilles de style, les
fichiers Javascript ou les images. Par défaut nous vous recommandons de stocker
ces fichiers dans des sous-répertoires du dossier `web` de votre projet symfony.

Si vous regardez ce répertoire, vous trouverez des sous-répertoires avec les
éléments cités ci-dessus et les deux fichiers de front controller. Les front
controllers sont les seuls fichiers PHP qui doivent être sous la racine web.
Tous les autres fichiers PHP doivent être inaccessible par un navigateur, ce qui
est une bonne idée notamment pour la sécurité.

### Configuration du serveur web

Maintenant il est temps de modifier votre configuration d'Apache pour rendre
accessible au monde entier votre projet.

Trouvez et ouvrez votre fichier de configuration `httpd.conf` puis ajoutez ces
lignes à la fin :

    # soyez certain de n'avoir cette ligne qu'une seule fois dans votre fichier
    NameVirtualHost 127.0.0.1:8080

    # Configuration pour Jobeet
    Listen 127.0.0.1:8080

    <VirtualHost 127.0.0.1:8080>
      DocumentRoot "/home/sfprojects/jobeet/web"
      DirectoryIndex index.php
      <Directory "/home/sfprojects/jobeet/web">
        AllowOverride All
        Allow from All
      </Directory>

      Alias /sf /usr/local/symfony/data/web/sf
      <Directory "/usr/local/symfony/data/web/sf">
        AllowOverride All
        Allow from All
      </Directory>
    </VirtualHost>

>**NOTE**: l'alias `/sf` vous donne accès aux images et fichiers Javascript
>nécessaires au bon affichage des pages par défaut de symfony et de la barre
>d'outils web de débugage ( web degug toolbar )
>
>Pour windows, vous devez remplacer la ligne `Alias` avec quelque chose comme :
>
>     Alias /sf "c:\development\symfony\data\web\sf"
>
> `/home/sfprojects/jobeet/web` doit être remplacé par :
>
>     c:\development\sfprojects\jobeet\web

Cette configuration fait écouter Apache sur le port `8080` de votre machine,
donc le site Jobeet sera accessible par l'adresse :

    http://localhost:8080/

Vous pouvez changer ce numéro de port `8080` par un autre numéro mais utilisez
en un supérieur à 1024 car il ne nécessite pas de droits administrateurs.

>**SIDEBAR**
>Configurer un nom de domaine dédié à Jobeet
>
> Si vous êtes l'administrateur de votre machine, c'est une meilleure pratique
> que d'utiliser les virtual host à la place d'un nouveau port pour chaque
> nouveau projet. Plutôt que d'utiliser un port et d'insérer une directive
> `Listen`, choisissez un nom de domaine et ajouter une directive `ServerName` :
>
>     # Configuration pour Jobeet
>     <VirtualHost 127.0.0.1:80>
>       ServerName jobeet.localhost
>       <!-- même configuration que précédemment -->
>     </VirtualHost>
>
> Le nom de domaine `jobeet.localhost` doit être déclaré localement. Si vous
> utilisez un système Linux, vous devez le faire dans le fichier `/etc/hosts`.
> Si vous utilisez Windows XP, ce fichier est situé dans le répertoire
> `C:\WINDOWS\system32\drivers\etc\`.
>
>Ajoutez ces lignes :
>
>     127.0.0.1         jobeet.localhost

### Tester la nouvelle configuration

Redémarrez Apache, et vérifiez que vous avez accès à la nouvelle application à
partir d'un navigateur en tapant `http://localhost:8080/index.php/`, ou 
`http://jobeet.localhost/index.php/` cela dépend de la configuration d'Apache
que vous avez choisi dans les sections précédentes.

![Congratulations](http://www.symfony-project.org/images/jobeet/1_2/01/congratulations.png)

>**Note**: Si vous avez installé le module d'Apache `mod_rewrite` vous n'avez
>pas besoin d'utiliser /index.php/ dans les URLs.

Vous pouvez également essayer d'accéder à l'environnement de développement de
l'application par l'adresse :

    http://jobeet.localhost/frontend_dev.php/

La barre d'outils web de débugage ( the web debug toolbar ) doit être présente
en haut dans le coin droit de votre navigateur, incluant de petites icônes.
C'est la preuve que votre alias de configuration `sf/` est correct.

![web debug toolbar](http://www.symfony-project.org/images/jobeet/1_2/01/web_debug_toolbar.png)

>**Note**
>L'installation est un petit peu différente si vous voulez exécuter symfony à
>partir d'un serveur IIS dans un environnement windows. Vous trouverez comment
>le configurer dans ce [tutorial](http://www.symfony-project.com/cookbook/1_0/web_server_iis).

Subversion
----------

C'est une bonne pratique d'utiliser un système de gestion de version de code
source lorsque vous développez une application web. Cela vous permet :
 
 * travaillez en confiance
 * retournez à une version précédente si un changement à casser quelque chose
 * à plus d'une personne de travaillez efficacement sur le projet
 * d'accéder aux versions successives de l'application

Dans cette section nous décrivons comment utiliser
[Subversion](http://subversion.tigris.org/) avec symfony. Si vous utilisez un
autre outils que subversion, il sera facile d'adapter ce que nous décrivons pour
Subversion.

Nous supposons que vous avez déjà accès à un serveur Subversion.

>**TIP**
>Si vous n'avez pas de serveur Subversion à votre disposition, vous pouvez en
>créer un gratuitement sur [Google Code](http://code.google.com/hosting/) ou
>seulement chercher "free subversion repository" dans Google pour avoir plus de
>choix.

Premièrement créer un nouveau dépôt pour le projet `jobeet` :

    $ svnadmin create http://svn.example.com/jobeet
    $ svn mkdir -m "created default directory structure"
    ➥ http://svn.example.com/jobeet/trunk
    ➥ http://svn.example.com/jobeet/tags
    ➥ http://svn.example.com/jobeet/branches

Ensuite enlevez le contenu des répertoires `cache/` et `log/` car nous ne
voulons pas les insérer dans le dépôt.

    $ cd /home/sfprojects/jobeet
    $ rm -rf cache/*
    $ rm -rf log/*

Maintenant, appliquez les bons droits d'écritures aux répertoires cache et log
pour que votre serveur web puisse écrire dedans :

    $ chmod 777 cache
    $ chmod 777 log

Ensuite faites le premier import :

    $ svn import -m "made the initial import" .
    ➥ http://svn.example.com/jobeet/trunk

Comme nous ne voulons jamais commiter les fichiers situés dans les répertoires
`cache/` et `/log`, nous spécifions une liste 'ignore' :

    $ svn propedit svn:ignore cache

L'éditeur de texte par défaut pour SVN doit être lancé. Subversion doit ignoré
tout le contenu de ce répertoire

    *

Sauvez et quitter. C'est fait.

Faites la même procédure pour le répertoire `log/` :

    $ svn propedit svn:ignore log

Et saisissez :

    *

Pour finir, commiter les derniers changements au dépôt :

    $ svn commit -m "added cache/ and log/ content in the ignore list"

>**Tip**
>Les utilisateurs windows peuvent utiliser le client
>[TortoiseSVN](http://tortoisesvn.tigris.org/) pour gérer leur dépôt subversion.

-

>**Note**
>Le dépôt Jobeet SVN sera public jour après jour.
>
>Donc, tant que le dépôt entier n'est pas public (`http://svn.jobeet.org/`),
>pour aujourd'hui le code a été commité et taggué.
>
>Vous pouvez faire un checkout de `release_day_01`:
>
>       $ svn co http://svn.jobeet.org/tags/release_day_01/ jobeet/

A demain
---------

Bien, c'est fini pour aujourd'hui ! Même si nous n'avons pas encore parlé de
symfony, nous avons installé un environnement de développement solide, nous
avons parlé des bonnes pratiques de développement web, et nous sommes prêt à
coder.

Demain nous révélerons ce que l'application fait et nous naviguerons dans
symfony. Si vous voulez rester informé avec la dernière information sur Jobeet,
n'oubliez pas de souscrire au [symfony blog
feed](http://www.symfony-project.org/blog/).


Assurez-vous de revenir demain !
