23日目: デプロイ
================

昨日のキャッシュシステムの設定によって、JobeetのWebサイトは
本番サーバーにデプロイされる準備ができています。

22日間、開発マシンでJobeetを開発してきました。
ほとんどの方がローカルマシンで作業したでしょう;
本番サーバーで直接開発するのは、もちろん非常に悪いアイディアです。
では、本番サーバーにWebサイトを移行しましょう。

今日は、本番環境に移行する前に必要なもの、
使用するデプロイ戦略の種類、
継続したデプロイに必要なツールも見ることにします。


本番サーバーを用意する
----------------------

プロジェクトを本番サーバーにデプロイする前に、
本番サーバーを正しく設定する必要があります。
1日目を読み返すと、Webサーバーの設定方法が説明されています。

このセクションでは、Webサーバー、データベースサーバー、
とPHP5.2.4以降をインストールしたことを前提とします。

>**NOTE**
>WebサーバーにSSHでアクセスできない場合、
>コマンドラインにアクセスする必要のあるセクションは読み飛ばしてください。

### サーバーの構成

最初に、PHPが必要なエクステンションと一緒にインストールされ
正しく設定されていることを確認する必要があります。1日目に関して、
symfonyによって提供される`check_configuration.php`スクリプトを使います。
本番サーバーにsymfonyをインストールしないので、
symfony公式サイトからファイルを直接ダウンロードします:

    http://trac.symfony-project.org/browser/branches/1.2/data/bin/check_configuration.php?format=raw

Webのrootディレクトリにファイルをコピーして
ブラウザ**と**コマンドラインから実行します:

    $ php check_configuration.php

スクリプトが見つける致命的なエラーを修正し**両方の**環境で
すべてが良い状態で動作するまで作業を繰り返します。

### PHPアクセレータ

本番サーバーに関して、可能な限りベストなパフォーマンスを得ることを望んでいらっしゃるでしょう。
[PHPアクセレータ](http://en.wikipedia.org/wiki/PHP_accelerator)をインストールすれば
最高のお金の節約になります。

>**NOTE**
>Wikipediaより: PHPアクセレータは
>リクエストごとのソースの解析とコンパイルのオーバーヘッドを回避するために
>PHPスクリプトのコンパイルされたバイトコードをキャッシュすることで動作します。

[APC](http://www.php.net/apc)は最も人気のあるアクセレータで、インストール作業がシンプルです:

    $ pecl install APC

OSによって、OSネイティブのパッケージマネージャーで
インストールすることもできます。

>**NOTE**
>[APCの設定方法](http://www.php.net/manual/ja/apc.configuration.php)を学ぶために
>時間を取ってください。

symfonyのライブラリ
-------------------

### symfonyを埋め込む

symfonyの強みの1つはプロジェクトが自己完結していることです。
プロジェクトを動作させるために
必要なすべてのファイルはメインのrootディレクトリの元にあります。
symfonyは相対パスのみを使用するのでプロジェクトで何も変更せずに
プロジェクトを別のディレクトリに移動できることを意味します。
本番サーバーのディレクトリは開発マシンと同じである必要はないことを意味します。

唯一の絶対パスは`config/ProjectConfiguration.class.php`ファイルで見つかります; 
しかし1日目を読み返して、
symfonyコアのオートローダーへの相対パス
が含まれていることを確認します:

    [php]
    // config/ProjectConfiguration.class.php
    require_once dirname(__FILE__).'/../lib/vendor/symfony/lib/autoload/sfCoreAutoload.class.php';

### symfonyをアップグレードする

すべての内容が単独のディレクトリに収まっている場合、
symfonyを新しいリリースにアップグレードする作業はものすごく簡単です。

バグとセキュリティ問題の修正は定期的に行われるので、
時々symfonyを最新のマイナーリリースにアップグレードすることを望むでしょう。
良い知らせはすべてのsymfonyのバージョンは少なくとも1年間は維持され
メンテナンス期間の間、新しい機能は小さくても追加されません。
ですので、1つのマイナーリリースから別のマイナーリリースへのアップグレードは
常に速く、安全でセキュアです。

symfonyのアップグレード作業は`lib/vendor/symfony/`ディレクトリの内容を
変更するだけなのでシンプルです。
アーカイブでsymfonyをインストールする場合、現在のファイルを削除して最新のものに置き換えます。

プロジェクトでSubversionを使う場合、
プロジェクトを最新のsymfony1.2のタグにリンクすることもできます:

    $ svn propedit svn:externals lib/vendor/
      # symfony http://svn.symfony-project.com/tags/RELEASE_1_2_1/

symfonyのアップグレード作業はタグを
最新のバージョンに変更するだけなのでシンプルです。

リアルタイムで修正される1.2系のブランチも利用できます:

    $ svn propedit svn:externals lib/vendor/
      # symfony http://svn.symfony-project.com/branches/1.2/

`svn up`を行うたびに、
最新のsymfony 1.2が手に入ります。

新しいバージョンにアップグレードするとき、とりわけ本番環境では、
常にキャッシュをクリアすることをお勧めします:

    $ php symfony cc

>**TIP**
>本番サーバーにFTPのアクセス権限もある場合、
>`cache/`ディレクトリの元にあるすべてのファイルとディレクトリを削除することで
>`symfony cc`をシミュレートできます。

symfonyの既存のバージョンを置き換えずに新しいバージョンをテストすることもできます。
新しいリリースをテストしたいだけで、簡単にロールバックできるようにしたい場合、
別のディレクトリ(例えば`lib/vendor/symfony_test`)にsymfonyをインストールし 
`ProjectConfiguration`クラスのパスを変更し、キャッシュをクリアします。
ロールバックはディレクトリを削除して`ProjectConfiguration`のパスを元に戻すだけです。

設定を調整する
--------------

### データベースの設定

ほとんどの場合、本番のデータベースはローカルのものと異なるクレデンシャルを持ちます。 
symfonyの環境システムのおかげで、
本番のデータベース用の異なる設定を
用意するのはたやすいことです:

    $ php symfony configure:database
       ➥ "mysql:host=localhost;dbname=prod_dbname" prod_user prod_pass

`databases.yml`設定ファイルを直接編集することもできます。

### アセット

Jobeetはアセットを埋め込むプラグインを使用するので、
symfonyは`web/`ディレクトリに相対的なシンボリックリンクを作成しました。
`plugin:install`タスク無しでプラグインをインストールする場合
`plugin:publish-assets`タスクはこれらを再生成もしくは作成します:

    $ php symfony plugin:publish-assets

### エラーページをカスタマイズする

本番に移行する前に、"Page Not Found"ページ、もしくはデフォルトの例外ページのような
symfonyのデフォルトページをカスタマイズするのは良いことです。

16日目の間に`config/error/`ディレクトリに`error.yaml.php`と`exception.yaml.php`ファイルを作ることで
`YAML`フォーマット用のエラーページを設定しました。
`prod`環境のときは`error.yaml.php`ファイルが
`dev`環境では
`exception.yaml.php`が使われます。

ですので、HTMLフォーマット用にデフォルトの例外ページをカスタマイズするには、
2つのファイル: `config/error/error.html.php`と`config/error/exception.html.php`を作ります。

`404`ページ(page not found)は
`error_404_module`と`error_404_action`設定を変更することでカスタマイズできます:

    [yml]
    # apps/frontend/config/settings.yml
    all:
      .actions:
        error_404_module: default
        error_404_action: error404

ディレクトリ構造をカスタマイズする
--------------------------------

コードの構造化と標準化のために、
symfonyには予め定義された名前を持つデフォルトのディレクトリ構造があります。
しかしときには、何らかの外部の制約から構造を変更せざるを得ないことがあります。

`config/ProjectConfiguration.class.php`クラスで
ディレクトリの名前の設定をできます。

### Webのrootディレクトリ

Webのホスティングの状況によって、Webのrootディレクトリの名前を変更できないことがあります。
`web/`の代わりに`public_html/`である場合を考えてみましょう:

    [php]
    // config/ProjectConfiguration.class.php
    class ProjectConfiguration extends sfProjectConfiguration
    {
      public function setup()
      {
        $this->setWebDir($this->getRootDir().'/public_html');
      }
    }

`setWebDir()`メソッドはWebrootディレクトリの絶対パスを受け取ります。
このディレクトリもどこかに移動させる場合、
`ProjectConfiguration`ファイルへのパスがまだ有効であることを確認するために
コントローラスクリプトを編集することを忘れないでください:

    [php]
    require_once(dirname(__FILE__).'/../config/ProjectConfiguration.class.php');

### キャッシュとログディレクトリ

symfonyフレームワークは2つのディレクトリ: `cache/`と`log/`のみに書き込みします。
セキュリティの理由から、Webホスティング会社の中には
メインディレクトリに書き込みのパーミッションを設定しないところがあります。 
これが該当する場合、これらのディレクトリを他のファイルシステムに移動させることができます:

    [php]
    // config/ProjectConfiguration.class.php
    class ProjectConfiguration extends sfProjectConfiguration
    {
      public function setup()
      {
        $this->setCacheDir('/tmp/symfony_cache');
        $this->setLogDir('/tmp/symfony_logs');
      }
    }

`setWebDir()`メソッドに関して、`setCacheDir()`と`setLogDir()`はそれぞれ
`cache/`と`log/`ディレクトリへの絶対パスを受け取ります。

ファクトリ
----------

Jobeetチュートリアルの間、`sfUser`、`sfRequest`、`sfResponse`、`sfI18N`、`sfRouting`
などのコアオブジェクトの話をしました。
これらのオブジェクトはsymfonyフレームワークによって自動的に作成され、設定され管理されます。 
これらは`sfContext`オブジェクトから常にアクセス可能で、フレームワークの多くのものと同じように、
これらは設定ファイルで設定できます:
`factories.yml`. このファイルは環境によって設定できます。

`sfContext`がコアファクトリを初期化するとき、
コンストラクタに渡すクラスの名前(`class`)とパラメータ(`param`)のために
`factories.yml`ファイルを読み込みます:

    [yml]
    response:
      class: sfWebResponse
      param:
        send_http_headers: false

上記のスニペットにおいて、レスポンスファクトリを作成するために、
symfonyは`sfWebResponse`オブジェクトをインスタンス化してパラメータとして
`send_http_headers`オプションを渡します。

ファクトリをカスタマイズできることはsymfonyのコアオブジェクトに対してデフォルトの代わりに
カスタムのクラスを利用できることを意味します。
これらのクラスに送るパラメータを変更することでこれらの振る舞いを変更することもできます。

おそらくお望みの古典的なカスタマイズ方法を見てみましょう。

### Cookieの名前

ユーザーセッションを扱うために、symfonyはCookieを使用します。
このCookieはデフォルトの名前として`symfony`を持ちます。これは`factories.yml`で変更できます。 
`all`キーの下で、Cookieの名前を`jobeet`に変更するために次の設定を追加します:

    [yml]
    # apps/frontend/config/factories.yml
    storage:
      class: sfSessionStorage
      param:
        session_name: jobeet

### セッションストレージ

デフォルトのセッションストレージクラスは`sfSessionStorage`です。
このクラスはセッション情報を保存するためにファイルシステムを使用します。
複数のWebサーバーがある場合、データベーステーブルのような中心位置で
複数のセッションを保存すると良いでしょう:

    [yml]
    # apps/frontend/config/factories.yml
    storage:
      class: sfPDOSessionStorage
      param:
        session_name: jobeet
        db_table:     session
<propel>
        database:     propel
</propel>
<doctrine>
        database:     doctrine
</doctrine>
        db_id_col:    id
        db_data_col:  data
        db_time_col:  time

### セッションのタイムアウト

デフォルトでは、ユーザーセッションのタイムアウトは`1800`秒です。
これは`user`エントリを編集することで変更できます:

    [yml]
    # apps/frontend/config/factories.yml
    user:
      class: myUser
      param:
        timeout: 1800

### ロギング

デフォルトでは、`prod`環境ではロギングは行われません。
ロガークラスの名前が`sfNoLogger`だからです:

    [yml]
    # apps/frontend/config/factories.yml
    prod:
      logger:
        class:   sfNoLogger
        param:
          level:   err
          loggers: ~

例えばロガークラスの名前を`sfFileLogger`に変更することで
ファイルシステムでのロギングを有効にできます:

    [yml]
    # apps/frontend/config/factories.yml
    logger:
      class: sfFileLogger
      param:
        level: error
        file:  %SF_LOG_DIR%/%SF_APP%_%SF_ENVIRONMENT%.log

>**NOTE**
>`factories.yml`設定ファイルにおいて、
>`%XXX%`の文字列は`sfConfig`オブジェクトからの対応する値に置き換えられます。
>ですので、設定ファイルの`%SF_APP%`はPHPコードの`sfConfig::get('sf_app')`と同等です。
>この表記は`app.yml`設定ファイルでも利用できます。
>パス(`SF_ROOT_DIR`, `SF_WEB_DIR`, ...)を決め打ちせずに
>設定ファイルでパスを参照する必要があるときにとても便利です。

デプロイする
------------

### デプロイとは？

JobeetのWebサイトを本番サーバーにデプロイするとき、 
不要なファイルをアップロードしないもしくは企業のロゴのように、
ユーザーによってアップロードされたファイルを
上書きしないように注意する必要があります。

symfonyプロジェクトにおいて、転送から除外されるディレクトリは
3つ: `cache/`、`log/`、と`web/uploads/`あります。
そのほかはすべてそのまま転送できます。

セキュリティ上の理由から、`frontend_dev.php`、`backend_dev.php`と`frontend_cache.php`スクリプトのような
"本番用ではない"フロントコントローラも転送したくないことでしょう。

### デプロイ戦略

このセクションでは、本番サーバーを完全にコントロールできることを前提とします。
サーバーへのアクセス権限がFTPアカウントの場合は、
唯一可能なデプロイの解決方法はデプロイするたびにすべてのファイルを転送することです。

Webサイトをデプロイする最もシンプルな方法は組み込みの`project:deploy`タスクを使うことです。
これは接続して1つのコンピュータから別のコンピュータにファイルを転送するために`SSH`と`rsync`を使用します。

`project:deploy`タスク用のサーバーは
`config/properties.ini`設定ファイルで設定できます:

    [ini]
    # config/properties.ini
    [production]
      host=www.jobeet.org
      port=22
      user=jobeet
      dir=/var/www/jobeet/
      type=rsync
      pass=

新しく設定した`production`サーバーをデプロイするには、
`project:deploy`タスクを使います:

    $ php symfony project:deploy production

>**NOTE**
>初めて`project:deploy`タスクを実行する前に、
>キーを既知のホストファイルに追加するために手動でサーバーに接続する必要があります。

このコマンドを実行すると、symfonyは転送のシミュレーションのみを行います。
実際にWebサイトをデプロイするには、`--go`オプションを追加します:

    $ php symfony project:deploy production --go

>**NOTE**
>`properties.ini`ファイルでSSHパスワードを提供できる場合でも、
>パスワード無しの接続ができるように
>SSHキーでサーバーを設定する方がベターです。

デフォルトでは、symfonyは以前のセクションで話したディレクトリを転送しませんし、
`dev`のフロントコントローラスクリプトも転送しません。
これは`project:deploy`タスクが`config/rsync_exclude.txt`ファイルで
設定されたファイルとディレクトリを除外するからです:

    # config/rsync_exclude.txt
    .svn
    /web/uploads/*
    /cache/*
    /log/*
    /web/*_dev.php

Jobeetに対して、`frontend_cache.php`ファイルを追加する必要があります:

    # config/rsync_exclude.txt
    .svn
    /web/uploads/*
    /cache/*
    /log/*
    /web/*_dev.php
    /web/frontend_cache.php

>**TIP**
>ファイルとディレクトリの転送を強制するために
>`config/rsync_include.txt`ファイルを作ることもできます。

`project:deploy`タスクがとても柔軟であるとしても、
さらにカスタマイズできます。
デプロイはサーバーと設定とトポロジーに基づいて大きく異なる可能性があるので、
デフォルトのタスクを拡張することをためらわないでください。

Webサイトを本番サーバーにデプロイするたびに、
少なくとも本番サーバーの設定キャッシュをクリアすることを忘れないでください:

    $ php symfony cc --type=config

ルートを変更したら、ルーティングのキャッシュも
クリアする必要があります:

    $ php symfony cc --type=routing

>**NOTE**
>キャッシュを選別してクリアすることで
>テンプレートキャッシュのような、キャッシュの一部を維持できます。

また明日
--------

プロジェクトのデプロイはsymfonyの開発のライフサイクルの一番最後のステップです。
これはすべてが終わったことを意味しません。全くの逆です。
Webサイトの人生の始まりです。
おそらくバグを修正しなければならず時間が経過したら新しい機能も追加したくなります。
しかしsymfonyの構造と自由に使えるツールのおかげで、
Webサイトのアップグレード作業はシンプルで、速く、安全です。

明日はJobeetチュートリアルの最後の日です。
Jobeetの23日間に学んだことを振り返ります。

__ORM__
