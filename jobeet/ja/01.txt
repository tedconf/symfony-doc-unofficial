1日目: プロジェクトを始める
==========================

イントロダクション
------------------

symfonyフレームワークは3年間OSSとして開発され、すばらしい特性とドキュメントのおかげで今では最も人気のあるフレームワークの1つになっています。この良き傾向は早くから見られていました。

2005年の12月、symfonyの最初のオフィシャルリリースがあったすぐ後、我々は[「Askeet tutorial」](http://www.symfony-project.org/askeet/1_0/ja/)を発表しました。それは24つのチュートリアルから構成され、12/1からクリスマスの間で1日ずつ公開されました。

このチュートリアルはフレームワーク初心者へ勧めるのに非常に有用なツールです。たくさんの開発者がaskeetのおかげでsymfonyを学習でき、多くの会社で未だ主なトレーニング素材としてaskeetを使っています。

我々は今symfony1.2のリリースで祝杯をあげていて、askeetチュートリアルは古くなったように思います。なので、別の新たなチュートリアルを始めることにしました。

このチュートリアルは2008年にsymfonyの公式blogで1日づつ公開され、少しずつ読み進めることができます。

チャレンジ
---------

我々は再度チュートリアルを行います。週末を含めた毎日、新しいチュートリアルを公開します。各チュートリアルは約1時間ほどで終わる程度であり、全てやり終えると実際のWebアプリのコーディングでsymfonyを学習できるチャンスになるでしょう。

1日は24時間であり、その期間の長さは開発者がsymfonyの基本を学習するのに必要なものだと考えています。

我々は毎日アプリケーションに新しい要素を追加し、symfonyのWeb開発の良い手本となるだけでなくsymfonyの新しい機能性がWeb開発の利点となっていることを紹介していきます。

askeetでは、21日目は「get-a-symfony-guru-for-a-day」でした。我々はノープランで、コミュニティへaskeetへ追加する要素を提案しなければならなかった。21日目は良い成功例で、コミュニティがアプリケーションに検索エンジンが必要であることを決定しました。そして我々は実装しました。21日目のチュートリアルはaskeetチュートリアルの中で人気のある1つの章です。

Jobeetでは、21日目に「design day」と題し祝うつもりです。4日目の後、Jobeetの公式サイトのデザインを開始するために必要なHTMLとCSSの情報を持つことになるでしょう。それで、もしあなたがデザイナーとして働いているか、あなたの会社がデザインを担当するところであれば、Jobeetのデザインに貢献することができます。21日目に、世論調査を行いコミュニティがJobeetにバンドルされるデフォルトデザインを選ぶことになるでしょう。もちろんデザインが使われれば開発者クレジットに名前がのることになり、有名になれるでしょう!

このチュートリアルは今迄のものとは違います
----------------------------------------

初期のころのPHP4を覚えていますか? それは「[ベル・エポック(良き時代)](http://en.wikipedia.org/wiki/Belle_Époque)」でした。PHPはWeb向けの習得しやすいファーストランゲージの1つでした。

しかし、非常に歩調の速いWebテクノロジーの進化のため、Web開発者は最新のベストなプラクティスとツールに遅れずについていくことが必要となりました。学習するためのベストな方法はブログやチュートリアルや書籍を読むことです。我々はPHP、Python、 Java、Rubyで書かれた上記の参考資料をたくさん読みましたが、それらの多くはサンプルコード集でチュートリアルとしては不十分でした。

あなたはおそらく次のような注意書きを見たことがあるでしょう:

「実際のアプリケーションでは、バリデーションと適切なエラーハンドリングを追加するのを忘れないようにしてください」

や

「読者の練習のため、セキュリティについては考慮していません」

や

「もちろんテストの記述は必要になります」

などです。

これらの点は深刻な問題です。おそらくコードの最も重要な一部分です。そして読者はほっておかれます。これらの懸念点について何の考慮もないのでサンプルは役に立ちません。良い出発点としては使えないでしょう。それはひどいことです。なぜならセキュリティやバリデーションやエラーハンドリングやテストは2・3の例を挙げると、丁寧なコーディングとなるからです。

このチュートリアルでは、我々が書いたテストコードやエラーハンドリング、バリデーションコードのステートメントを見ることはないですが、我々はセキュアなアプリケーションを開発しています。symfonyを使うことでベストプラクティスでエンタープライズ向けのプロフェッショナルなアプリケーションの開発が可能です。symfonyが提供する全ての機能はたくさんのコードを書かずに簡単に利用できるようにしていきます。

バリデーションやエラーハンドリング、セキュリティ、テストはsymfonyでは主要クラスです。だから説明は非常に長くなります。この点が「real life」プロジェクトとしてフレームワークが使われる多くの理由の1つとなっています。

このチュートリアルで読むすべてのコードは実際のプロジェクトに使えます。コードのスニペットをコピー＆ペーストするもしくはコードの塊を流用することを推奨します。

プロジェクト
------------

デザインされていたアプリケーションはもう1つのブログエンジンでした。しかし我々はsymfonyを実用的なプロジェクトとして使いたい。symfonyがスタイルと少しの努力でプロ仕様のアプリケーションの開発に使えるように見せるのがデモンストレーションのゴールです。

我々は別の日のプロジェクトコンテンツは秘密にするようにします。しかしながらアプリケーションの名前はもう知ってますよね?: **Jobeet**です。

今日は何を?
-----------

24時間というのはsymfonyでアプリケーションを開発するにはたくさんの時間となりますので、本日はPHPコードは書きません。しかし1行もコードを書かないにしても新規プロジェクトのブートストラップをすることでsymfonyのようなフレームワークを使うことの利点を理解し始めることができるでしょう。

今日の目標は開発環境のセットアップとWebブラウザでアプリケーションのページを表示させることです。これらはsymfonyのインストールとアプリケーションの作成、Webサーバーの設定も含まれます。


前提条件
--------

まず第一に、すでに動いているWeb開発環境をチェックします。Webサーバー(例：Apache)、データベースエンジン(MySQL, PostgreSQL, SQLite)、PHP5.2.4以降が必要です。コマンドラインから各々調べてください。

コマンドラインを多用するので、UnixライクなOSを利用する方がベターですが、
but if you run a Windowsシステムを稼働させていても、立派に動作するので、`cmd`プロンプトでいくかのコマンドを入力するだけです。

>**Note**
>UnixシェルのコマンドはWindows環境で重宝します。
>Windowsで`tar`、`gzip`、もしくは`grep`のようなツールを使いたいなら、[Cygwin](http://cygwin.com/)をインストールします。公式ドキュメントはまばらですが、よいインストール方法のガイドが
>[ここ](http://www.soe.ucsc.edu/~you/notes/cygwin-install.html)で見つかります。
>冒険好きな人はMicrosoftの
>[Windows Services for Unix](http://technet.microsoft.com/en-gb/interopmigration/bb380242.aspx)を試すのも良いでしょう。

またこのチュートリアルはsymfonyフレームワークにフォーカスしたものになるので、PHP5やOOPの知識は持っているものと仮定してすすめます。

symfonyのインストール
---------------------

最初に、Jobeetプロジェクトに関連するファイルをホストする ディレクトリを作ります:

    $ mkdir -p /home/sfprojects/jobeet
    $ cd /home/sfprojects/jobeet

Windowsでは次の通りです:

    c:\> mkdir c:\development\sfprojects\jobeet
    c:\> cd c:\development\sfprojects\jobeet

>**Note**: Windowsユーザーにはスペースが含まれないパスで
>symfonyの新しいプロジェクトをセットアップすることをお勧めします。
>`My Documents`より下の場所を含めて
>`Documents and Settings`ディレクトリを使うのは避けるべきです。

symfonyフレームワークライブラリファイルをホストするディレクトリを作ります:

    $ mkdir -p lib/vendor

symfony公式サイトの[インストールの手引きのページ](http://www.symfony-project.org/installation)では
symfonyの利用可能なすべてのバージョンの一覧と比較をしています。

このチュートリアルはsymfony 1.2用に書かれたので
[symfony 1.2](http://www.symfony-project.org/installation/1_2)の
インストールの手引きのページを参照してください。

"**Source Download**"セクションで、
`.tgz`もしくは`.zip`フォーマットでアーカイブが見つかります。
アーカイブをダウンロードし、新しい`lib/vendor/`ディレクトリに設置し展開します:

    $ cd lib/vendor
    $ tar zxpf symfony-1.2.2.tgz
    $ mv symfony-1.2.2 symfony
    $ rm symfony-1.2.2.tgz

Windows環境ではzipファイルの解凍はエクスプローラで可能です。
ディレクトリを`symfony`にリネームすると、
パスは`c:\development\sfprojects\jobeet\lib\vendor\symfony`となります。

PHPの設定はディストリビューションによって大きく異なるので、
PHPの設定がsymfonyの最小要件を満たすか確認する必要があります。
コマンドラインからsymfony付属の設定チェッカースクリプトを
起動します:

    $ cd ../..
    $ php lib/vendor/symfony/data/bin/check_configuration.php

問題がある場合、出力は修正方法のヒントを示します。You
PHPの設定が異なる可能性があるのでブラウザからもチェッカーを実行すべきです。
webサーバーーのディレクトリのどこかにファイルをコピーして
そのファイルにアクセスします。
後でウェブのrootディレクトリからこのファイルを削除することを
お忘れなく:

    $ rm web/check_configuration.php

![設定チェック](http://www.symfony-project.org/images/jobeet/1_2/01/configuration_check.png)

スクリプトがエラーを出力しない場合、symfonyコマンドを使用して
バージョンを表示することで、symfonyが正しくインストールされたか
確認します(大文字の`V`に注意):

    $ php lib/vendor/symfony/data/bin/symfony -V

Windows環境では:

    c:\> cd ..\..
    c:\> php lib\vendor\symfony\data\bin\symfony -V

コマンドラインツールが何をできるのか興味があれば、
利用可能なオプションとタスクの一覧を表示するには`symfony`を入力します:

    $ php lib/vendor/symfony/data/bin/symfony

Windows環境では:

    c:\> php lib\vendor\symfony\data\bin\symfony

symfonyコマンドラインは開発者の最良の友です。
これはキャッシュをクリアしたりコードを生成するなど、毎日の活動の生産性を改善する
たくさんのユーティリティを提供します。

プロジェクトのセットアップ
--------------------------

symfonyではアプリケーションはプロジェクト内で再編成された同じデータモデルを共有します。Jobeetでは2種類の異なるアプリケーション: `frontend`と`backend`を持ちます。

プロジェクトの作成
------------------

`jobeet`ディレクトリから、実際にsymfonyプロジェクトを作成するために
`generate:project`タスクを実行します:

    $ php lib/vendor/symfony/data/bin/symfony generate:project jobeet

Windowsでは:

    c:\> php lib\vendor\symfony\data\bin\symfony generate:project jobeet

`generate:project`タスクはsymfonyプロジェクトに必要な
ディレクトリとファイルのデフォルト構造を生成します:

 | ディレクトリ | 説明
 | ----------- | ----------------------------------
 | `apps/`     | プロジェクトのすべてのアプリケーションをホストする
 | `cache/`    | フレームワークによってキャッシュされるファイル  
 | `config/`   | プロジェクトの設定ファイル
 | `lib/`      | プロジェクトのライブラリとクラス
 | `log/`      | フレームワークのログファイル
 | `plugins/`  | インストールされたプラグイン
 | `test/`     | ユニットと機能テストのファイル
 | `web/`      | ウェブのrootディレクトリ(下記を参照)

>**NOTE**
>なぜsymfonyはたくさんのファイルを生成するのでしょうか？
>フルスタックフレームワークを使う主な利点の1つは開発作業を標準化することです。
>symfonyのファイルとディレクトリのデフォルト構造のおかげで、
>symfonyのある程度の知識がある開発者はsymfonyプロジェクトのメンテナンスを引き継ぎできます。
>ほんの数分で、引き継ぎ者はコードに飛び込むことが可能で、
>バグを修正し新しい機能を追加します。

タスクを実行するときに入力しなければならない文字数を短くするために
Jobeetプロジェクトのrootディレクトリで
`generate:project`タスクは`symfony`のショートカットを作成しました。

これからは、symfonyプログラムへのフルパスの代わりに
`symfony`ショートカットを使います。

### アプリケーションの作成

今度は`generate:app`タスクを実行してfrontendアプリケーションを生成します。

    $ symfony generate:app --escaping-strategy=on --csrf-secret=Unique$ecret frontend

>**TIP**
>symfonyのファイルが実行可能なので、Unixユーザーは
>すべての'php symfony'を'./symfony'に置き換えられます。
>
>Windowsでは'symfony.bat'ファイルをプロジェクトにコピーして
>'php symfony'の代わりに'symfony'を利用できます:
>
>     c:\> copy lib\vendor\symfony\data\bin\symfony.bat .

project生成と同じように、`generate:app`タスクは`apps/frontend`ディレクトリ以下にアプリケーションに必要なディレクトリを生成します。

 | ディレクトリ    | 説明
 | -------------- | -------------------------------------
 | `config/`      | アプリケーションの設定ファイル
 | `lib/`         | アプリケーションのライブラリとクラス
 | `modules/`     | アプリケーションのコード(MVC)
 | `templates/`   | グローバルテンプレートファイル

>**TIP**
>すべての`symfony`コマンドは明示的な場所を言及しない限りプロジェクトのディレクトリ内で実行しなければなりません。

`generate:app`タスクを実行する際、2つのセキュリティに関するオプションを渡しています。

  * `--escaping-strategy`: XSSを防ぐための出力エスケープを有効にします
  * `--csrf-secret`: CSRFを防ぐためにフォーム内でのセッショントークンを有効にします 

タスクにこれらの追加オプションを渡すことで、Webで最も広く知れ渡る2つの脆弱性から将来の開発を守りました。これで、我々に代わってsymfonyは自動的にセキュリティの対策を取ります。 

>**NOTE**
>[XSS](http://en.wikipedia.org/wiki/Cross-site_scripting) もしくは
>[CSRF](http://en.wikipedia.org/wiki/CSRF) に関して
> 何も知らなければ、
>これらの脆弱性について学ぶ時間を割いてください。

### symfonyのパス

symfonyのバージョンは下記のコマンドで取得できます。

    $ symfony -V

`-V`オプションはsymfonyがインストールされたディレクトリパスを表示します。`config/ProjectConfiguration.class.php`にそのパスが含まれているか確認します。

    [php]
    // config/ProjectConfiguration.class.php
    require_once '/Users/fabien/work/symfony/dev/1.2/lib/autoload/sfCoreAutoload.class.php';

よりベターなポータビリティのために、symfonyがインストールされたディレクトリへの絶対パスを相対パスに変更します:

    [php]
    // config/ProjectConfiguration.class.php
    require_once dirname(__FILE__).'/../lib/vendor/symfony/lib/autoload/sfCoreAutoload.class.php';

これで、Jobeetプロジェクトのディレクトリをマシンのどこかに移動させても、きちんと動作します。

環境について
------------

`web/`ディレクトリを見ると、2つのPHPファイル、`index.php`と`frontend_dev.php`があります。これらはフロントコントローラと呼ばれます。アプリケーションへの全てのリクエストはこのコントローラを通ります。しかしなぜ1つしかアプリケーションを定義していないのに2つもコントローラがあるのでしょう?

これら2つのファイルは同じアプリケーションを指していますが異なった環境で動作します。アプリケーションを開発する際、本番サーバーで直接開発する場合を除き、いくつかの環境を指定できます。

  * **開発環境**: **開発者**が新しい要素を追加したりバグを修正するときに利用
  * **テスト環境**: アプリケーションの自動テストで利用
  * **ステージング環境**: **取引先**向けにアプリケーションのテストをするときに利用
  * **本番環境**: **エンドユーザー**向けに利用 

何によって環境を識別できるようになっているのでしょうか？ 例えば開発において、
アプリケーションはデバッグ作業を楽にするためにリクエストのすべての詳細内容をログに記録する必要がありますが
、しかしコードへのすべての変更が即座に反映されるように
キャッシュシステムは無効にしなければなりません。ですので、開発環境は開発者のために最適化されます。
最高の例は例外処理のときです。 
開発者が問題を速くデバッグできるよう手助けするために、
symfonyはすべての情報を持つ例外を表示します。 
現在のリクエストが即座にブラウザに表示されます:

![開発環境での例外](http://www.symfony-project.org/images/jobeet/1_2/01/exception_dev.png)

しかし本番環境では、キャッシュレイヤーを有効にし、
もちろん、アプリケーションは生の例外の代わりにカスタマイズされたエラーメッセージを表示しなければなりません。
ですので本番環境はパフォーマンスとユーザーエクスペリエンスのために
最適化しなければなりません。

![本番環境での例外](http://www.symfony-project.org/images/jobeet/1_2/01/exception_prod.png)

symfonyの環境は構成設定のユニークなセット(集まり)です。
symfonyフレームワークは3つの環境: `dev`、`test`、と`prodを搭載しています`。
22日目において、`staging`環境など、新しい環境の作り方を学びます。

フロントコントローラファイルを開けば、
環境設定以外、これらの内容が同じであることがわかります:

    [php]
    // web/index.php
    <?php

    require_once(dirname(__FILE__).'/../config/ProjectConfiguration.class.php');

    $configuration = ProjectConfiguration::getApplicationConfiguration('frontend', 'prod', false);
    sfContext::createInstance($configuration)->dispatch();

>**NOTE**
>symfonyの新しい環境を定義することは新しいフロントコントローラを作ることと同じぐらい簡単です。
>環境のために設定を変更する方法を後で見ることになります。

Webサーバーのセットアップ：ひどい方法
------------------------------------

上の節でJobeetプロジェクトのセットアップをしました。もしWebサーバーのrootディレクトリ下で生成したなら、既にWebブラウザからアクセスできる状態です。

もちろん非常に素早いセットアップで設定もいりませんが、`config/database.yml`にブラウザから直接アクセスできるのでひどい結果になるのは目にみえて理解できます。Webサイトがsymfonyで開発されたことをユーザーが知っていたら、たくさんのデリケートなファイルにアクセスすることでしょう。

**本番サーバーでこのセットアップは絶対にしてはなりません。**次のセクションを読んで適切なWebサーバーの設定方法を学んでください。

Webサーバーのセットアップ：セキュアな方法
----------------------------------------

Webのグッドプラクティスはスタイルシート、JavaScript、もしくは画像のようなWebブラウザがアクセスする必要のあるファイルだけをwebのルートディレクトリの元に設置することです。デフォルトでは、symfonyプロジェクトの`web`サブディレクトリにこれらのファイルを保存することをお勧めします。

このディレクトリを見ると、webアセットと2つのコントローラのファイル用のサブディレクトリがいくつか見つかります。
フロントコントローラはwebディレクトリの元で必要な唯一のPHPファイルです。
他のすべてのPHPファイルはブラウザから隠匿され、セキュリティに関してこれはよいアイディアです。

### Webサーバーの設定

世界中から新しいプロジェクトにアクセスできるようにApacheの設定を変更しましょう。

`httpd.conf`設定ファイルを見つけて開き最後の箇所に次の設定を追加します:

    # Be sure to only have this line once in your configuration
    NameVirtualHost 127.0.0.1:8080

    # This is the configuration for Jobeet
    Listen 127.0.0.1:8080

    <VirtualHost 127.0.0.1:8080>
      DocumentRoot "/home/sfprojects/jobeet/web"
      DirectoryIndex index.php
      <Directory "/home/sfprojects/jobeet/web">
        AllowOverride All
        Allow from All
      </Directory>

      Alias /sf /home/sfprojects/jobeet/lib/vendor/symfony/data/web/sf
      <Directory "/home/sfprojects/jobeet/lib/vendor/symfony/data/web/sf">
        AllowOverride All
        Allow from All
      </Directory>
    </VirtualHost>

>**NOTE**: `/sf`エイリアスによってsymfonyのデフォルトページとWebデバッグツールバーを適切に表示するために
>必要な画像とJavaScriptファイルにアクセスできるようになります。
>
>Windowsでは、`Alias`の行を次のように置き換える必要があります:
>
>     Alias /sf "c:\development\sfprojects\jobeet\lib\vendor\symfony\data\web\sf"
>
> `/home/sfprojects/jobeet/web`は次のように置き換えられます:
>
>     c:\development\sfprojects\jobeet\web

この設定によってApacheはマシンのポート番号`8080`をリスンするようになるので、JobeetのWebサイトは次のURLからアクセスできます:

    http://localhost:8080/

`8080`以外の好きな番号に変更できますが管理者権限を必要としない1024よりも大きな番号が望ましいです。

>**SIDEBAR**
>Jobeet専用のドメイン名を設定する
>
>マシンの管理者であるなら、新しいプロジェクトを始めるたびに新しいポート番号を
>追加する代わりにバーチャルホストをセットアップする方がベターです。
>ポート番号を選ぶ代わりに`Listen`ステートメントを追加し、ドメイン名を選び
>`ServerName`ステートメントを追加します:
>
>     # This is the configuration for Jobeet
>     <VirtualHost 127.0.0.1:80>
>       ServerName jobeet.localhost
>       <!-- same configuration as before -->
>     </VirtualHost>
>
>ドメイン名の`jobeet.localhost`はローカルで宣言されなければなりません。
>Linuxシステムを稼働させているのであれば、`/etc/hosts`ファイルで行わなければなりません。
>Windows XPを稼働させているのであれば、このファイルは`C:\WINDOWS\system32\drivers\etc\`ディレクトリの中で見つかります。
>
>次の行を追加します:
>
>     127.0.0.1         jobeet.localhost

### 新しい設定をテストする

Apacheを再起動し、and check that you now have access to the new application by
opening a browser and typing `http://localhost:8080/index.php/`、もしくは
`http://jobeet.localhost/index.php/`を入力することで depending on the Apache configuration you
chose in the previous section.

![初期ページ](http://www.symfony-project.org/images/jobeet/1_2/01/congratulations.png)

>**Note**: If you have the Apache ~`mod_rewrite`|`mod_rewrite` (Apache)~ 
>module installed, you can remove the `index.php/` part of the URL. This is 
>possible thanks to the rewriting rules configured in the 
>`web/~.htaccess|.htaccess (Apache)~` file.

You should also try to access the application in the development environment.
Type in the following URL:

    http://jobeet.localhost/frontend_dev.php/

ウェブデバッグツールバーは右上コーナーに表示され、including small
icons proving that your `sf/` alias configuration is correct.

![ウェブデバッグツールバー](http://www.symfony-project.org/images/jobeet/1_2/01/web_debug_toolbar.png)

The ~web debug toolbar|Web Debug Toolbar~ is present on all pages in the 
development environment and gives you access to a lot of information by clicking 
on the different tabs: the current application configuration, the logs for the 
current request, the SQL statements executed on the database engine, memory 
information, and time information.

>**Note**
>The setup is a little different if you want to run symfony on an IIS server in
>a Windows environment. Find how to configure it in the
>[関連チュートリアル](http://www.symfony-project.org/cookbook/1_0/ja/web_server_iis).

Subversion
----------

Webアプリケーションを開発するときにバージョン管理ツールを利用するのはグッドプラクティスです。バージョン管理ツールを利用することで次のことが可能になります:

 * 信頼して共同作業する
 * 変更によって何かが壊れたときに以前のバージョンに差し戻す
 * 複数の人がプロジェクトを効率的に取り組むことができる
 * 連続したすべてのバージョンのアプリケーションを入手できる

この節では、[Subversion](http://subversion.tigris.org/)の使い方を説明します。
別のソースコード管理ツールを利用するのであれば、我々がSubversionについて説明することを適用するのは簡単でしょう。

Subversionサーバーへの権限を持ちHTTPを通してアクセスできることを前提とします。

>**TIP**
>自由に使えるSubversionサーバーがなければ、
>無料の[Google Code](http://code.google.com/hosting/)で作成するか
>より多くの選択肢を探すためにGoogleに"free subversion repository"を入力して検索します。

最初に、リポジトリサーバーで`jobeet`プロジェクト用のリポジトリを作成します:

    $ svnadmin create /path/to/jobeet/repository

マシン上で、ディレクトリの基本構造を作成します:

    $ svn mkdir -m "created default directory structure"
    ➥ http://svn.example.com/jobeet/trunk
    ➥ http://svn.example.com/jobeet/tags
    ➥ http://svn.example.com/jobeet/branches

そして空の`trunk/`ディレクトリをチェックアウトします:

    $ cd /home/sfprojects/jobeet
    $ svn co http://svn.example.com/jobeet/trunk/ .

それから、`cache/`と`log/`ディレクトリをリポジトリに置きたくないので
これらの内容を削除します。

    $ rm -rf cache/* log/*

Webサーバーが書き込みできるように
cacheとlogsディレクトリに適切なレベルの書き込み権限を必ず設定ください:

    $ chmod 777 cache/ log/

すべてのファイルとディレクトリをインポートします:

    $ svn add *

`cache/`と`/log`ディレクトリに設定されたファイルをコミットしたくないので、無視リストを指定する必要があります:

    $ svn propedit svn:ignore cache

SVN用に設定されたデフォルトのテキストエディタが起動します。
Subversionはこのディレクトリのすべての内容を無視しなければなりません:

    *

保存して終了します。終わりました。

`log/`ディレクトリ用に手順を繰り返します:

    $ svn propedit svn:ignore log

そして次のコマンドを入力します:

    *

最後に、これらの変更をレポジトリにコミットします:

    $ svn import -m "made the initial import" .
      ➥ http://svn.example.com/jobeet/trunk

>**Tip**
>WindowsユーザーはSubvresionのレポジトリを管理するために素晴らしい [TortoiseSVN](http://tortoisesvn.tigris.org/) クライアントを利用できます。

-

>**Note**
>JobeetのSVNレポジトリは毎日公開されます。
>
>リポジトリは(`http://svn.jobeet.org/`)はまだ公開されていませんが、今日のコードはコミットされタグ付けされました。
>
>`release_day_01`をチェックアウトできます:
>
>       $ svn co http://svn.jobeet.org/tags/release_day_01/ jobeet/

それではまた明日
----------------

はい、今日はここまでです！symfonyについてまだ何も話していませんが、確固とした開発環境をセットアップし、Web開発のベストプラクティスを話し、コーディングを始める準備ができています。

明日は、アプリケーションが何を行いsymfonyの中に飛び込み始めます。それまでの間、Jobeetの最新ニュースを得たければ、[公式blogのフィード](http://www.symfony-project.org/blog/)の購読をお忘れ無く。

明日お会いしましょう！

>**Note**
>今日もしく他の日のコードを確認したい場合、
>Jobeetの公式SVNリポジトリから一日分ごとに入手可能です
>(`http://svn.jobeet.org/##ORM_LOWER##/`)。
>
>例えば、`release_day_01`タグをチェックアウトすることで
>今日のコードを入手できます:
>
>       $ svn co http://svn.jobeet.org/##ORM_LOWER##/tags/release_day_01/ jobeet/

__ORM__
