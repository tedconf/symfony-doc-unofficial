24日目: 別の視点からsymfonyを見る
=================================

今日でsymfonyの素晴らしい世界の旅行は最後です。
23日間、具体例: デザインからフレームワークによって使用されるパターン、強力な組み込み機能から
symfonyを学びました。
あなたはまだsymfonyマスターではありませんが、自信を持ってsymfonyアプリケーションの開発を始めるために
必要な知識はすべてあります。

Jobeetチュートリアルのまとめとして、別の視点からフレームワークを見てみましょう。
Jobeetは忘れてこの3週間の間に学んだすべての機能を思い出しましょう。

symfonyとは？
------------

symfonyフレームワークは
フルスタックの[MVCフレームワーク](#chapter_04_the_mvc_architecture)
(Model、View、Controller)を形成する
[疎結合された(cohesive but decoupled)サブフレームワーク](#chapter_11_sidebar_using_the_form_framework_without_symfony)の集まりです。

コーディングを始める前に、
[symfonyの歴史と哲学](#chapter_01_introduction)を読む時間を取ります。
それから、フレームワークの[前提要件](#chapter_01_prerequisites)を確認し

設定を検証するために[`check_configuration.php`スクリプト](#chapter_01_symfony_installation)を使います。

最後に、[symfonyをインストール](#chapter_01_symfony_installation)します。
しばらくしてから フレームワークの最新バージョンに[アップグレード](#chapter_23_sub_upgrading_symfony)します。

フレームワークは[デプロイ](#chapter_23_deploying)作業を楽にするツールも提供します。

~Model~
-------

symfonyのModel部分は
<propel>
[Propel ORM](http://propel.phpdb.org/).
</propel>
<doctrine>
[Doctrine ORM](http://www.doctrine-project.org/).
</doctrine>
の助けを借りて物事を行うことができます。
[データベースの記述](#chapter_03_the_schema)に基づいて、
[オブジェクト](#chapter_03_the_orm)、[フォーム](#chapter_10_##ORM_LOWER##_forms)、と
[フィルタ](#chapter_12_filters_configuration)用のクラスが生成されます。
##ORM## はデータベースのテーブルを作成するために使用される
[SQLステートメントを生成します](#chapter_03_the_orm)。

データベースの設定は[タスク](#chapter_03_the_database)
もしくは[設定ファイル](#chapter_03_the_database)を編集することで行うことができます。
設定に加えて、[フィクスチャファイル](#chapter_03_the_initial_data)のおかげで、
初期データを投入することもできます。
これらのファイルを[動的なもの](#chapter_06_dynamic_fixtures)にすることもできます。

<propel>
Propelのオブジェクトも簡単に[国際化](#chapter_19_sub_propel_objects)できます。
</propel>
<doctrine>
Doctrineのオブジェクトも簡単に[国際化](#chapter_19_sub_doctrine_objects)できます。
</doctrine>

View
----

デフォルトでは、MVCアーキテクチャのViewレイヤーは
プレーンなPHPファイルをテンプレートとして使用します。

[URL](#chapter_05_routing_in_actions_and_templates)
もしくは[リンク](#chapter_05_routing_in_actions_and_templates)を作成する
などの頻繁に行われるタスクのために
テンプレートは[ヘルパー](#chapter_04_the_stylesheets_images_and_javascripts)を使用します。

ページのヘッダーとフッターを抽出するためにテンプレートは[レイアウト](#chapter_04_the_layout)によって
デコレートされます。 ビューの再利用性を高めるために、
[スロット](#chapter_04_slots)、[パーシャル](#chapter_07_partials)、と
[コンポーネント](#chapter_19_language_switching)を定義できます。

開発を加速するために、
[ページ全体](#chapter_22_page_cache)、[アクション](#chapter_22_action_cache)だけ、
もしくは[パーシャルもしくはコンポーネント](#chapter_22_partial_and_component_cache)だけをキャッシュするために
[キャッシュサブフレームワーク](#chapter_22_cache_configuration)を利用できます。
手動で[キャッシュを削除](#chapter_22_removing_the_cache)することもできます。

Controller
----------

Controllerの部分は[フロントコントローラ](#chapter_01_the_environments)
と[アクション](#chapter_03_see_it_in_action_in_the_browser)によって管理されます。

タスクは[シンプルなモジュール](#chapter_07_job_category_module_creation)、
[CRUDモジュール](#chapter_03_see_it_in_action_in_the_browser)を作成する、もしくは
モデルクラス用に十分に実用的な[adminモジュール](#chapter_12_backend_modules)を生成するために使用できます。

adminモジュールによってコーディングをまったくしなくても十分な機能を持つアプリケーションを作ることができます。 

ウェブサイトの技術的な実装を抽出するために、
symfonyは[プリティURL](#chapter_05_urls)を生成する[ルーティング](#chapter_05_routing_configuration)サブフレームワークを使用します。
ウェブサービスの実装を簡単にするために、
symfonyは複数の[フォーマット](#chapter_15_formats)をネイティブでサポートします。
独自[フォーマット](#chapter_16_sub_the_yaml_format)を作成することもできます。

アクションを別のアクションに[フォワード](#chapter_04_sidebar_the_forward_methods_family)、
もしくは[リダイレクト](#chapter_05_sidebar_the_redirect_methods_family)できます。

構成
----

symfonyフレームワークでは異なる環境に対して異なる設定を用意するのが楽です。
[環境](#chapter_01_the_environments)は設定の集まりで
開発もしくは本番サーバーで異なる振る舞いを可能にします。
新しい[環境](#chapter_22_creating_a_new_environment)を作成することもできます。

symfonyの設定ファイルは
[異なるレベル](#chapter_04_sidebar_configuration_principles_in_symfony)で定義可能で
これらの大部分が
[環境を認識します](#chapter_08_sidebar_configuration_principles_in_symfony):

 * [`app.yml`](#chapter_06_custom_configuration)
 * [`cache.yml`](#chapter_22_cache_configuration)
 * [`databases.yml`](#chapter_03_the_database)
 * [`factories.yml`](#chapter_23_the_factories)
 * [`generator.yml`](#chapter_12_the_symfony_cache)
 * [`routing.yml`](#chapter_05_routing_configuration)
 * [`schema.yml`](#chapter_03_the_schema)
 * [`security.yml`](#chapter_13_sub_authentication)
 * [`settings.yml`](#chapter_11_sub_built_in_security_features)
 * [`view.yml`](#chapter_04_the_stylesheets_images_and_javascripts)

大部分の設定ファイルは
[YAMLフォーマット](#chapter_03_sidebar_the_yaml_format)を使用します。

デフォルトのディレクトリ構造を利用してレイヤーごとにアプリケーションを編成する代わりに、
これらを機能ごとに編成し、[プラグイン](#chapter_20_sub_a_different_way_to_organize_code)
にまとめることができます。
デフォルトのディレクトリ構造に関して、
ニーズに応じて[カスタマイズ](#chapter_23_customizing_the_directory_structure)する
こともできます。

デバッグ
--------

<propel>
[ロギング](#chapter_06_debugging_propel_generated_sql)から
[ウェブデバッグツールバー](#chapter_06_debugging_propel_generated_sql)、
</propel>
<doctrine>
[ロギング](#chapter_06_debugging_doctrine_generated_sql)から
[ウェブデバッグツールバー](#chapter_06_debugging_doctrine_generated_sql)、
</doctrine>
[重大な例外](#chapter_01_the_environments)まで、
symfonyは開発者が問題を速くデバッグするために便利で助けになるツールをたくさん提供します。

symfonyの主要なオブジェクト
---------------------------

symfonyフレームワークはウェブプロジェクトで
頻度の高いニーズを抽出するコアオブジェクトを
精選して提供します: [リクエスト](#chapter_04_sub_the_request)、
[レスポンス](#chapter_04_sub_the_response)、
[ユーザー](#chapter_13_sub_the_myuser_class)、[ロギング](#chapter_23_sub_logging),
[ルーティング](#chapter_05_routing_configuration)、と
[ビューキャッシュマネージャー](#chapter_22_removing_the_cache)

これらのコアオブジェクトは
[`sfContext`オブジェクト](#chapter_22_sidebar_the_sfcontext_class)によって管理され、
[ファクトリ](#chapter_23_the_factories)を通してこれらを設定できます。

ユーザーオブジェクトはユーザーの[認証](#chapter_13_sub_authentication)、
[権限付与](#chapter_13_sub_authorization)、[flash](#chapter_13_user_flashes)、
とセッションでシリアライズされる[属性](#chapter_13_user_attributes)を管理します。

セキュリティ
-----------

symfonyフレームワークは[XSS](#chapter_01_sub_application_creation)と
[CSRF](#chapter_01_sub_application_creation)に対して組み込みの防御機能を持ちます。
これらの設定は
[コマンドライン](#chapter_01_sub_application_creation)から、
もしくは[設定ファイル](#chapter_11_sub_xss_and_csrf_protection)を編集することで設定できます。

フォームフレームワークは
[組み込みのセキュリティ機能](#chapter_11_sub_built_in_security_features)も提供します。

フォーム
--------

ウェブ開発者にとってフォームの管理が最も退屈なタスクの1つなので、
symfonyは[フォームサブフレームワーク](#chapter_10_the_form_framework)を提供します。
フォームフレームワークはたくさんの[ウィジェット](http://www.symfony-project.org/api/1_2/widget)
と[バリデータ](http://www.symfony-project.org/api/1_2/validator)を搭載しています。

フォームサブフレームワークの強みの1つはテンプレートがとても簡単に
[カスタマイズ可能](#chapter_10_sidebar_customizing_the_look_and_feel_of_a_form)であることです。

##ORM##を利用する場合、フォームフレームワークはモデルに基づいて
<propel>
[フォームとフィルタを生成する](#chapter_10_propel_forms)ことも簡単にします。
</propel>
<doctrine>
[フォームとフィルタを生成する](#chapter_10_doctrine_forms)ことも簡単にします。
</doctrine>

国際化とローカライゼーション
----------------------------

ICU標準のおかげで、[国際化](#chapter_19_internationalization)と
[ローカライゼーション](#chapter_19_localization)はsymfonyによってサポートされます。
[ユーザーculture](#chapter_19_sub_the_user_culture)はユーザーの言語と国を決定します。
これはユーザー自身もしくは[URL](#chapter_19_culture_in_the_url)に埋め込むことで定義できます。

テスト
------

**ユニットテスト**のために使用されるlimeライブラリは
たくさんの[テスト用のメソッド](#chapter_08_the_lime_testing_framework)を提供します。

[専用のデータベース](#chapter_08_sub_database_configuration)と
専用の[フィクスチャ](#chapter_08_sub_test_data)から
<propel>
[Propelオブジェクトもテストできます](#chapter_08_propel_unit_tests)。
</propel>
<doctrine>
[Doctrineオブジェクトもテストできます](#chapter_08_doctrine_unit_tests)。
</doctrine>

ユニットテストは
[一度に1つ](#chapter_08_running_unit_tests)もしくは
[まとめて](#chapter_08_unit_tests_harness)実行できます。

**機能テスト**は
[`sfFunctionalTest`](#chapter_09_the_sftestfunctional_class)クラスで記述され、
[ブラウザシミュレータ](#chapter_09_the_sfbrowser_class)を使用し、
symfonyは[テスター](#chapter_09_the_sftestfunctional_class)を通して
コアオブジェクトのイントロスペクトができます。
[リクエストオブジェクト](#chapter_09_sub_the_request_tester),、
[レスポンスオブジェクト](#chapter_09_sub_the_response_tester)、
[ユーザーオブジェクト](#chapter_13_user_testing)、
[現在のフォームオブジェクト](#chapter_11_the_form_tester)、
[キャッシュレイヤー](#chapter_22_testing_the_cache)と
<propel>
[Propelオブジェクト](#chapter_11_the_propel_tester)
</propel>
<doctrine>
[Doctrineオブジェクト](#chapter_11_the_doctrine_tester)
</doctrine>
のためのテスターが存在します。

[レスポンス](#chapter_09_debugging_functional_tests)
と[フォーム](#chapter_11_the_form_tester)用のデバッグツールも
利用できます。

ユニットテストに関して、機能テストは
[1つづつ](#chapter_09_running_functional_tests)もしくは
[まとめて](#chapter_09_functional_tests_harness)実行できます。

[すべてのテストを一緒に](#chapter_09_tests_harness)実行することもできます。

プラグイン
----------

symfonyフレームワークはウェブアプリケーションに対して土台のみを提供し
より多くの機能を追加するために[プラグイン](#chapter_20_using_plugins)を頼りにします。
このチュートリアルでは、[`sfGuardPlugin`](#chapter_13_plugins)、
[`sfFormExtraPlugin`](#chapter_19_language_switching)、
[`sfTaskExtraPlugin`](#chapter_20_contributing_a_plugin)を話しました。

インストールの後でプラグインを
[アクティベイト](#chapter_20_sidebar_plugin_activation)にしなければなりません。

プラグインはsymfonyの公式サイトに
[寄付](#chapter_20_contributing_a_plugin)する最高の方法です。

タスク
------

symfony CLIはたくさんのタスクを提供し、
最も便利なものはこのチュートリアルで検討しました:

 * [`app:routes`](#chapter_05_route_debugging)
 * [`cache:clear`](#chapter_22_clearing_the_cache)
 * [`configure:database`](#chapter_03_the_database)
 * [`generate:project`](#chapter_01_sub_project_creation)
 * [`generate:app`](#chapter_01_sub_application_creation)
 * [`generate:module`](#chapter_07_job_category_module_creation)
 * [`help`](#chapter_03_the_orm)
 * [`i18n:extract`](#chapter_19_sub_i18n_extract)
 * [`list`](#chapter_13_backend_security)
 * [`plugin:install`](#chapter_13_plugins)
 * [`plugin:publish-assets`](#chapter_20_sub_the_assets)
 * [`project:deploy`](#chapter_23_sub_deploying_strategies)
 * [`propel:build-all`](#chapter_03_the_orm)
 * [`propel:build-all-load`](#chapter_07_update_the_database)
<propel>
 * [`propel:build-forms`](#chapter_10_propel_forms)
</propel>
<doctrine>
 * [`doctrine:build-forms`](#chapter_10_doctrine_forms)
</doctrine>
 * [`propel:build-model`](#chapter_03_the_orm)
 * [`propel:build-sql`](#chapter_03_the_orm)
 * [`propel:data-load`](#chapter_03_the_initial_data)
 * [`propel:generate-admin`](#chapter_12_backend_modules)
 * [`propel:generate-module`](#chapter_03_see_it_in_action_in_the_browser)
 * [`propel:insert-sql`](#chapter_03_the_orm)
 * [`test:all`](#chapter_09_tests_harness)
 * [`test:coverage`](#chapter_08_sidebar_code_coverage)
 * [`test:functional`](#chapter_09_running_functional_tests)
 * [`test:unit`](#chapter_08_running_unit_tests)

[独自のタスクを作成する](#chapter_11_maintenance_tasks)こともできます。

またお会いしましょう
-------------------

立ち去る前に、symfonyに関して話したいことが最後に1つあります。
フレームワークはたくさんの素晴らしい機能と無料のドキュメントを提供します。
しかし、オープンソースが持つ最も貴重な資産の1つはコミュニティです。
そしてsymfonyは最も面白くて活発なコミュニティの1つを持ちます。
プロジェクトでsymfonyを使い始めるのであれば、symfonyのコミュニティに参加することを考えてください:

  * [ユーザーのメーリングリスト](http://groups.google.com/group/symfony-users)を購読する
  * 公式[blogのフィード](http://feeds.feedburner.com/symfony/blog)を購読する
  * symfonyの[planetフィード](http://feeds.feedburner.com/symfony/planet)を購読する
  * freenodeの[#symfony IRC](irc://irc.freenode.net/symfony)チャネルに来てチャットをする

__ORM__
