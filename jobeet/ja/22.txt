22日目: キャッシュ
==================

今日は、~キャッシュ~の話をします。symfonyフレームワークには、多くのキャッシュ機構が組み込まれています。
たとえば、~YAML~~設定|コンフィギュレーション~ファイルは最初にPHPに変換され、ファイルシステムにキャッシュされます。
adminジェネレーターによって生成されたモジュールが、~パフォーマンス~を向上させるためにキャッシュされることもすでに見てきました。

しかし今日は、別のキャッシュ: HTMLキャッシュについて話します。
Webサイトのパフォーマンスを改善するために、HTMLページ全体もしくは一部だけをキャッシュできます。

新しい環境を作成する
--------------------

symfonyの~テンプレートキャッシュ|テンプレート(キャッシュ)~機能は、デフォルトの`settings.yml`設定ファイルの`prod`~環境~では有効ですが、`test`や`dev`環境では有効になっていません:

    [yml]
    prod:
      .settings:
        cache: on

    dev:
      .settings:
        cache: off

    test:
      .settings:
        cache: off

運用に移行する前にキャッシュ機能をテストする必要があるので、`dev`環境用のキャッシュを有効にするか新しい環境を作ります。
環境は名前(文字列)、関連するフロントコントローラー、オプションとして固有の設定値のセットによって定義されることを思い出しましょう。

Jobeetでキャッシュシステムを試すために、`cache`環境を作ります。
`cache`環境は`prod`環境と似ていますが、`dev`環境で利用可能なログとデバッグ情報も有効にします。

`dev`環境のフロントコントローラーである`web/frontend_dev.php`を`web/frontend_cache.php`にコピーして、新しい`cache`環境用のフロントコントローラーを作ります:

    [php]
    // web/frontend_cache.php
    if (!in_array(@$_SERVER['REMOTE_ADDR'], array('127.0.0.1', '::1')))
    {
      die('You are not allowed to access this file. Check '.basename(__FILE__).' for more information.');
    }

    require_once(dirname(__FILE__).'/../config/ProjectConfiguration.class.php');

    $configuration = ProjectConfiguration::getApplicationConfiguration('frontend', 'cache', true);
    sfContext::createInstance($configuration)->dispatch();

作業はこれだけです。
これで新しい`cache`環境を利用できます。
唯一の違いは、`getApplicationConfiguration()`メソッドの2番目の引数で環境の名前が`cache`になっていることです。

ブラウザーでこのフロントコントローラーを呼び出すことで`cache`環境をテストできます:

    http://jobeet.localhost/frontend_cache.php/

>**NOTE**
>フロントコントローラースクリプトの先頭には、ローカルのIPアドレスからのみ呼び出されることを保証するコードがあります。
>このセキュリティ対策は運用サーバーでフロントコントローラーが呼び出されないようにするためです。
>明日のチュートリアルでより詳しく話します。

現在は、`cache`環境はデフォルトのコンフィギュレーションを継承しています。
`settings.yml`設定ファイルを編集して、`cache`環境固有のコンフィギュレーションを追加します:

    [yml]
    # apps/frontend/config/settings.yml
    cache:
      .settings:
        error_reporting: <?php echo (E_ALL | E_STRICT)."\n" ?>
        web_debug:       on
        cache:           on
        etag:            off

この設定では、`cache`設定でsymfonyのテンプレートキャッシュ機能を有効にし、`web_debug`設定で~Webデバッグツールバー~を有効にしています。

<propel>
また、SQLステートメントの~ロギング~を行うために、データベースのコンフィギュレーションを変更します。
`databases.yml`を編集してファイルの始めに次の設定を追加します:

    [yml]
    # config/databases.yml
    cache:
      propel:
        class: sfPropelDatabase
        param:
          classname: DebugPDO
</propel>

デフォルトのコンフィギュレーションでは、すべての設定をキャッシュするので、キャッシュをクリアするまで設定の変更が有効になりません:

    $ php symfony cc

ブラウザーでページを更新すると、`dev`環境と同じようにWebデバッグツールバーがページ右上に表示されます。


キャッシュのコンフィギュレーション
--------------------------------

symfonyのテンプレートキャッシュは~`cache.yml`~設定ファイルで設定できます。
アプリケーションごとのデフォルトコンフィギュレーションは`apps/frontend/config/cache.yml`にあります:

    [yml]
    default:
      enabled:     off
      with_layout: false
      lifetime:    86400

symfonyで扱うすべてのページは動的な情報を持つことができるので、デフォルトでは、グローバルなキャッシュは無効に設定されています(`enabled: off`)。
ページごとにキャッシュを有効にする予定なので、今回はグローバルな設定を変更する必要はありません。

`lifetime`設定には、サーバーサイドの~キャッシュの有効期間~を秒単位で定義します(`86400`秒は1日に等しい)。

>**TIP**
>次善策があります: グローバルなキャッシュを有効にして、キャッシュさせたくない特定のページでのみキャッシュを無効にします。
>開発するアプリケーションで、作業が少なくて済む方法を選択してください。

ページのキャッシュ
------------------

JobeetのホームページはWebサイトの中でおそらくもっとも訪問されるページになりますので、ユーザーがアクセスするたびにデータベースにデータをリクエストする代わりにページをキャッシュしましょう。

`sfJobeetJob`モジュール用の`cache.yml`ファイルを作ります:

    [yml]
    # plugins/sfJobeetPlugin/modules/sfJobeetJob/config/cache.yml
    index:
      enabled:     on
      with_layout: true

>**TIP**
>`cache.yml`設定ファイルには、`view.yml`と同じようなsymfonyの設定ファイルのプロパティがあります。
>例えば、特別な`all`キーを使うと、モジュールのすべてのアクションに対してキャッシュを有効にできます。

ブラウザーでページを更新すると、コンテンツがキャッシュされたことを示すボックスが表示されているのがわかります:

![新しいキャッシュ](http://www.symfony-project.org/images/jobeet/1_2/22/fresh_cache.png)

ボックスには、キャッシュの有効期間や経過時間など、キャッシュキーに関するデバッグのための貴重な情報が表示されます。

ページを再度更新すると、ボックスの色が緑から黄色に変わります。
これはページがキャッシュから読み込まれたことを示します:

![キャッシュ](http://www.symfony-project.org/images/jobeet/1_2/22/cache.png)

2番目のケースでは、Webデバッグツールバーで示されるように、データベースへのリクエストが行われなかったことがわかります。

>**TIP**
>言語をユーザーごとに変更できる場合でも、言語をURLに埋め込むようにすればキャッシュは機能します。

ページがキャッシュ可能で、キャッシュがまだ存在しない場合、symfonyはリクエスト処理の最後でレスポンスオブジェクトをキャッシュに保存します。
これ以降のすべてのリクエストでは、symfonyはコントローラーを呼び出さずにキャッシュされたレスポンスを送信します:

![ページキャッシュのフロー](http://www.symfony-project.org/images/jobeet/1_2/22/flow_cache_page.png)

[JMeter](http://jakarta.apache.org/jmeter/)のようなツールを利用することで、~パフォーマンス~が大きく変化することを自分自身で測定できます。

>**NOTE**
>パラメーターを伴っている`GET`リクエストや、`POST`、`PUT`、`DELETE`メソッドで投稿されるリクエストは、コンフィギュレーションにかかわらずsymfonyではキャッシュされません。 

求人作成ページもキャッシュできます:

    [yml]
    # plugins/sfJobeetPlugin/modules/sfJobeetJob/config/cache.yml
    new:
      enabled:     on

    index:
      enabled:     on

    all:
      with_layout: true

2つのページともにレイアウト付きでキャッシュできるので、`sfJobeetJob`モジュールのすべてのアクション用のデフォルトコンフィギュレーションを定義する`all`セクションを作りました。

キャッシュをクリアする
----------------------

ページのキャッシュをクリアしたい場合、`cache:clear`タスクを使います:

    $ php symfony cc

`cache:clear`タスクでは、メインの`cache/`ディレクトリに保存されたすべてのキャッシュがクリアされます。
このタスクには、キャッシュの一部を指定してクリアするためのオプションもあります。
`cache`環境用のテンプレートキャッシュのみをクリアするには、`--type`と`--env`オプションを指定します:

    $ php symfony cc --type=template --env=cache

変更を行うたびにキャッシュをクリアする代わりに、クエリ文字列をURLに追加するか、Webデバッグツールバーから"Ignore cache"ボタンを使うことでキャッシュを無効にできます:

![Webデバッグツールバー](http://www.symfony-project.org/images/jobeet/1_2/22/debug.png)

アクションキャッシュ
----------------------

ページ全体のキャッシュはできなくても、~アクション~テンプレートのキャッシュが可能な場合もあります。
それでは、レイアウト以外のすべてをキャッシュする例をみてみましょう。

Jobeetアプリケーションでは、"history job"バーがあるためにページ全体をキャッシュできません。

`job`モジュールのキャッシュコンフィギュレーションを次のように変更します:

    [yml]
    # plugins/sfJobeetPlugin/modules/sfJobeetJob/config/cache.yml
    new:
      enabled:     on

    index:
      enabled:     on

    all:
      with_layout: false

`with_layout`設定を`false`に変更することで、レイアウトのキャッシュを無効にしました。

キャッシュをクリアします:

    $ php symfony cc

違いを確認するためにブラウザーのページを更新します:

![アクションキャッシュ](http://www.symfony-project.org/images/jobeet/1_2/22/action_cache.png)

簡略化されたダイアグラムではリクエストのフローがレイアウトありの場合とよく似ていますが、レイアウトなしのキャッシュでは、はるかにリソースを集約します。

![アクションキャッシュのフロー](http://www.symfony-project.org/images/jobeet/1_2/22/flow_cache_action.png)

~パーシャル|パーシャルテンプレート~と~コンポーネント~のキャッシュ
---------------------------------------------------------------

高度に動的なサイトでは、アクションテンプレート全体をキャッシュできない場合があります。
これらのケースでは、キャッシュをきめ細かく設定する方法が必要になります。
ありがたいことに、パーシャルとコンポーネントもキャッシュできます。

![パーシャルキャッシュ](http://www.symfony-project.org/images/jobeet/1_2/22/partial_cache.png)

`language`コンポーネントをキャッシュできるように、`sfJobeetLanguage`モジュール用の`cache.yml`ファイルを作りましょう:

    [yml]
    # plugins/sfJobeetPlugin/modules/sfJobeetLanguage/config/cache.yml
    _language:
      enabled: on

パーシャルもしくはコンポーネントに対してキャッシュを設定するには、設定ファイルに名前つきのエントリーを追加します。
この種類のキャッシュでは、`with_layout`オプションは意味がないので指定しても無視されます:

![パーシャルとコンポーネントキャッシュのフロー](http://www.symfony-project.org/images/jobeet/1_2/22/flow_cache_partial.png)

>**SIDEBAR**
>~コンテキスト依存|コンテキスト上のキャッシュ~であるか？
>
>多くの異なるテンプレートから、同じコンポーネントもしくはパーシャルを使うことができます。
>たとえばjobの`_list.php`パーシャルは`sfJobeetJob`と`sfJobeetCategory`モジュールで使われます。 
>レンダリングは常に同じなので、パーシャルは使われるコンテキストに依存せず、キャッシュはすべてのテンプレートに対して同じです(キャッシュは異なるパラメーターに対して明らかに異なります)。
>
>しかし、パーシャルもしくはコンポーネントの出力は、含まれるアクションに基づいて異なる場合があります。
たとえばblogのサイドバーは、ホームページとblog投稿ページでは微妙に違います。 
>このような場合パーシャルもしくはコンポーネントはコンテキスト依存なので、キャッシュの設定で`contextual`オプションを`true`にセットする必要があります:
>
>     [yml]
>     _sidebar:
>       enabled:    on
>       contextual: true

フォームにおけるキャッシュ
-------------------------

求人作成ページにはフォームが含まれるので、キャッシュに保存することには問題があります。
問題をよりわかりやすくするために、ブラウザーで"Post a Job"ページに移動してキャッシュを生成させます。
それから、セッションCookieをクリアし、求人の投稿を試します。 
"~CSRF~攻撃"を警告するエラーメッセージが表示されます:

![CSRFとキャッシュ](http://www.symfony-project.org/images/jobeet/1_2/22/csrf.png)

なぜでしょうか？
フロントエンドアプリケーションを作成したときCSRF用の秘密の文字列を設定したので、symfonyはすべてのフォームにCSRFトークンを埋め込みます。
CSRF攻撃を防ぐために、このトークンはユーザーとフォームに対してユニークです。

最初にページが表示されるときに、生成されたHTMLフォームは現在のユーザーのトークンとともにキャッシュに保存されます。
次に別のユーザーがフォームにアクセスすると、キャッシュからのページは最初のユーザーのCSRFトークンのまま表示されます。
フォームを投稿すると、トークンが一致せずエラーが表示されます。

フォームをキャッシュに保存するのは適切だと思われますが、この問題を修正するにはどうしたらよいでしょうか？
求人作成フォームはユーザーに依存せず、現在のユーザーに対して何も変更しません。
このような場合、CSRFの防御が不要なので、CSRFトークンを完全に削除できます:

    [php]
<propel>
    // plugins/sfJobeetPlugin/lib/form/JobeetJobForm.class.php
    class JobeetJobForm extends BaseJobeetJobForm
</propel>
<doctrine>
    // plugins/sfJobeetPlugin/lib/form/doctrine/PluginJobeetJobForm.class.php
    abstract PluginJobeetJobForm extends BaseJobeetJobForm
</doctrine>
    {
<propel>
      public function __construct(BaseObject $object = null, $options = array(), $CSRFSecret = null)
</propel>
<doctrine>
      public function __construct(sfDoctrineRecord $object = null, $options = array(), $CSRFSecret = null)
</doctrine>
      {
        parent::__construct($object, $options, false);
      }

      // ...
    }

この変更の後で、期待通りに動作するか検証するために、キャッシュをクリアして上記のシナリオを繰り返してください。

レイアウトには言語フォームも含まれておりキャッシュに保存されるので、言語フォームにも同じコンフィギュレーションを適用する必要があります。
デフォルトの`sfLanguageForm`を使い、新しいクラスを作る代わりにCSRFトークンを削除します。
`sfJobeetLanguage`モジュールのアクションとコンポーネントで次のように変更します:

    [php]
    // plugins/sfJobeetPlugin/modules/sfJobeetLanguage/actions/components.class.php
    class sfJobeetLanguageComponents extends sfComponents
    {
      public function executeLanguage(sfWebRequest $request)
      {
        $this->form = new sfFormLanguage($this->getUser(), array('languages' => array('en', 'fr')));
        unset($this->form[$this->form->getCSRFFieldName()]);
      }
    }

    // plugins/sfJobeetPlugin/modules/sfJobeetLanguage/actions/actions.class.php
    class sfJobeetLanguageActions extends sfActions
    {
      public function executeChangeLanguage(sfWebRequest $request)
      {
        $form = new sfFormLanguage($this->getUser(), array('languages' => array('en', 'fr')));
        unset($form[$form->getCSRFFieldName()]);

        // ...
      }
    }

`getCSRFFieldName()`メソッドはCSRFトークンを含むフィールドの名前を返します。
このフィールドを`unset`すると、ウィジェットと関連するバリデーターは削除されます。

~キャッシュを削除する|キャッシュの削除~
--------------------------------------

ユーザーが求人を投稿してアクティベートするたびに、新しい求人を一覧に表示するためにホームページをリフレッシュしなければなりません。

リアルタイムで求人をホームページに表示させる必要はないので、ベストな戦略はキャッシュの有効期間を短くすることです:

    [yml]
    # plugins/sfJobeetPlugin/modules/sfJobeetJob/config/cache.yml
    index:
      enabled:  on
      lifetime: 600

デフォルトの設定の1日ではなく10分ごとに、ホームページのキャッシュは自動的に削除されます。

ユーザーが新しい求人をアクティベートしたらすぐにホームページを更新したい場合は、`sfJobeetJob`モジュールの`executePublish()`メソッドを編集してキャッシュをクリアする機能を追加します:

    [php]
    // plugins/sfJobeetPlugin/modules/sfJobeetJob/actions/actions.class.php
    public function executePublish(sfWebRequest $request)
    {
      $request->checkCSRFProtection();

      $job = $this->getRoute()->getObject();
      $job->publish();

      if ($cache = $this->getContext()->getViewCacheManager())
      {
        $cache->remove('sfJobeetJob/index?sf_culture=*');
        $cache->remove('sfJobeetCategory/show?id='.$job->getJobeetCategory()->getId());
      }

      $this->getUser()->setFlash('notice', sprintf('Your job is now online for %s days.', sfConfig::get('app_active_days')));

      $this->redirect($this->generateUrl('job_show_user', $job));
    }

キャッシュは`sfViewCacheManager`クラスによって管理されます。
`remove()`メソッドは、引数で指定した内部URIに関連するキャッシュを削除します。
変数の可能なすべてのパラメーターに対するキャッシュを削除するには、`*`を値として使います。
上記のコードで使った`sf_culture=*`は、symfonyが英語とフランス語のホームページ用のキャッシュを削除することを意味します。

キャッシュが無効なときキャッシュマネージャーは`null`なので、`if`ブロックでキャッシュの削除処理を囲みました。

>**SIDEBAR**
>`sfContext`クラス
>
>~`sfContext`~オブジェクトはリクエスト、レスポンス、ユーザーなどのsymfonyのコアオブジェクトへの参照を保持します。
>`sfContext`はSingletonのようにふるまいます。
>`sfContext::getInstance()`ステートメントを使って任意の場所から取得でき、symfonyコアオブジェクトにアクセスできます:
>
>     [php]
>     $user = sfContext::getInstance()->getUser();
>
>自分のクラスの1つで`sfContext::getInstance()`を使いたくなったときは、~密結合~になってしまうためよく考え直すべきです。
>必要なオブジェクトを引数として渡すほうがよいでしょう。
>
>~`sfContext`~をレジストリとして利用し、`set()`メソッドを使ってオブジェクトを追加することもできます。
>このメソッドは引数として名前とオブジェクトを受け取ります。
>この名前は、後で`get()`メソッドを使ってオブジェクトを読み取るために使います:
>
>     [php]
>     sfContext::getInstance()->set('job', $job);
>     $job = sfContext::getInstance()->get('job');

~キャッシュをテストする|テスト(キャッシュ)~
------------------------------------------

テストを始める前に、キャッシュレイヤーを有効にするために`test`環境のコンフィギュレーションを変更します:

    [yml]
    # apps/frontend/config/settings.yml
    test:
      .settings:
        error_reporting: <?php echo ((E_ALL | E_STRICT) ^ E_NOTICE)."\n" ?>
        cache:           on
        web_debug:       off
        etag:            off

求人作成ページをテストしましょう:

    [php]
    // test/functional/frontend/jobActionsTest.php
    $browser->
      info('  7 - Job creation page')->

      get('/fr/')->
      with('view_cache')->isCached(true, false)->

<propel>
      createJob(array('category_id' => $browser->getProgrammingCategory()->getId()), true)->
</propel>
<doctrine>
      createJob(array('category_id' => Doctrine::getTable('CategoryTranslation')->findOneBySlug('programming')->getId()), true)->
</doctrine>

      get('/fr/')->
      with('view_cache')->isCached(true, false)->
      with('response')->checkElement('.category_programming .more_jobs', '/23/')
    ;

`view_cache`テスターはキャッシュをテストするために使います。
`isCached()`メソッドは2つのbooleanを受け取ります:

  * ページがキャッシュされているかどうか
  * レイアウト付きのキャッシュかどうか

>**TIP**
>機能テストフレームワークによって提供されるすべてのツールがあるにせよ、ブラウザーで問題を診断するほうが簡単であることがあります。
>これを実行するのは簡単で`test`環境用のフロントコントローラーを作るだけです。
>`log/frontend_test.log`に保存される~ログ|ロギング~も非常に役立ちます。

また明日
--------

他の多くのsymfonyの機能のように、symfonyのキャッシュサブフレームワークはとても柔軟なので、開発者はキャッシュをきめ細かく設定できます。

明日は、アプリケーションのライフサイクルの一番最後のステップ: 運用サーバーへのデプロイについて話します。

__ORM__
