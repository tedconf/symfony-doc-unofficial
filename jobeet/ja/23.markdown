23日目: 別の視点から symfony を見る
==================================

今日で symfony のすばらしい世界の旅行は最後です。23日間、デザインパターンから強力な組み込み機能までの具体例で symfony を学びました。あなたはまだ symfony マスターではありませんが、自信を持って symfony アプリケーションの開発を始めるために必要な知識はすべてあります。

Jobeet チュートリアルのまとめとして、別の視点からフレームワークを見てみましょう。Jobeet は忘れてこの3週間に学んだすべての機能を思い出しましょう。

symfony とは？
--------------

symfony~フレームワーク~はフルスタックの [MVC フレームワーク](#chapter_04_the_mvc_architecture)(Model、View、Controller) を形成する[疎結合されたサブフレームワーク](#chapter_11_sidebar_using_the_form_framework_without_symfony)の集まりです。

コーディングを始める前に、[symfony の歴史と哲学](#chapter_01_introduction)を読む時間をとります。

それから、フレームワークの[前提要件](#chapter_01_prerequisites)を確認し設定を検証するために[`check_configuration.php`スクリプト](#chapter_01_symfony_installation)を使います。

最後に、[symfony をインストール](#chapter_01_symfony_installation)します。しばらくしてから symfony の最新バージョンに[アップグレード](#chapter_22_sub_upgrading_symfony)します。

symfony は[デプロイ](#chapter_22_deploying)作業を楽にするツールも提供します。

~Model~
-------

symfony の Model 部分の作業は
<propel>
[Propel ORM](http://propel.phpdb.org/)
</propel>
<doctrine>
[Doctrine ORM](http://www.doctrine-project.org/)
</doctrine>
の助けを借りて行うことができます。
[データベースの記述](#chapter_03_the_schema)に基づいて、[オブジェクト](#chapter_03_the_orm)、[フォーム](#chapter_10_##ORM_LOWER##_forms)と[フィルター](#chapter_12_filters_configuration)用のクラスが生成されます。##ORM## はデータベースのテーブルを作成するために使用される [SQL ステートメントを生成します](#chapter_03_the_orm)。

データベースのコンフィギュレーションは[タスク](#chapter_03_the_database)もしくは[設定ファイル](#chapter_03_the_database)を編集することで行うことができます。コンフィギュレーションに加えて、[フィクスチャファイル](#chapter_03_the_initial_data)のおかげで、初期データを投入することもできます。これらのファイルを[動的なもの](#chapter_06_dynamic_fixtures)にすることもできます。

<propel>
Propel のオブジェクトも簡単に[国際化](#chapter_19_sub_propel_objects)できます。
</propel>
<doctrine>
Doctrine のオブジェクトも簡単に[国際化](#chapter_19_sub_doctrine_objects)できます。
</doctrine>

~View~
------

デフォルトでは、MVC アーキテクチャの View レイヤーはテンプレートとしてプレーンな PHP ファイルを使います。

[URL](#chapter_05_routing_in_actions_and_templates) もしくは[リンク](#chapter_05_routing_in_actions_and_templates)を作成するなどの頻繁に行われるタスクのためにテンプレートは[ヘルパー](#chapter_04_the_stylesheets_images_and_javascripts)を使います。

ページのヘッダーとフッターを抽出するためにテンプレートは[レイアウト](#chapter_04_the_layout)によってデコレートされます。
ビューの再利用性を高めるために、[スロット](#chapter_04_slots)、[パーシャル](#chapter_07_partials)と[コンポーネント](#chapter_19_language_switching)を定義できます。

開発を加速するために、[ページ全体](#chapter_21_page_cache)、[アクション](#chapter_21_action_cache)だけ、もしくは[パーシャルもしくはコンポーネント](#chapter_21_partial_and_component_cache)だけをキャッシュするために[キャッシュサブフレームワーク](#chapter_21_cache_configuration)を利用できます。手動で[キャッシュを削除](#chapter_21_removing_the_cache)することもできます。

~Controller~
------------

Controller の部分は[フロントコントローラー](#chapter_01_the_environments)と[アクション](#chapter_03_see_it_in_action_in_the_browser)によって管理されます。

タスクは[シンプルなモジュール](#chapter_07_job_category_module_creation)、[CRUD モジュール](#chapter_03_see_it_in_action_in_the_browser)を作成する、もしくはモデルクラス用に十分に実用的な [admin モジュール](#chapter_12_backend_modules)を生成するために使うことができます。

admin モジュールによってコードをまったく書かなくても十分な機能を持つアプリケーションを作ることができます。 

Web サイトの技術的な実装を抽出するために、symfony は[プリティ URL](#chapter_05_urls) を生成する[ルーティング](#chapter_05_routing_configuration)サブフレームワークを利用します。Web サービスの実装を簡単にするために、symfony は複数の[フォーマット](#chapter_14_formats)をネイティブでサポートします。独自[フォーマット](#chapter_15_sub_the_yaml_format)を作ることもできます。

アクションを別のアクションに[フォワード](#chapter_04_sidebar_the_forward_methods_family)、もしくは[リダイレクト](#chapter_05_sidebar_the_redirect_methods_family)できます。

~コンフィギュレーション~
-----------------------

symfony フレームワークでは異なる~環境~に対して異なる~コンフィギュレーション~を用意するのが楽です。[環境](#chapter_01_the_environments)はコンフィギュレーションの集まりで開発もしくは運用サーバーで異なるふるまいを可能にします。新しい[環境](#chapter_21_creating_a_new_environment)を作ることもできます。

symfony の設定ファイルは[異なるレベル](#chapter_04_sidebar_configuration_principles_in_symfony)で定義可能でこれらの大部分が[環境を認識します](#chapter_08_sidebar_configuration_principles_in_symfony):

 * [`app.yml`](#chapter_06_custom_configuration)
 * [`cache.yml`](#chapter_21_cache_configuration)
 * [`databases.yml`](#chapter_03_the_database)
 * [`factories.yml`](#chapter_16_sub_factories)
 * [`generator.yml`](#chapter_12_the_symfony_cache)
 * [`routing.yml`](#chapter_05_routing_configuration)
 * [`schema.yml`](#chapter_03_the_schema)
 * [`security.yml`](#chapter_13_sub_authentication)
 * [`settings.yml`](#chapter_11_sub_built_in_security_features)
 * [`view.yml`](#chapter_04_the_stylesheets_images_and_javascripts)

大部分の設定ファイルは [YAML フォーマット](#chapter_03_sidebar_the_yaml_format)を使います。

デフォルトのディレクトリ構造を利用してレイヤーごとにアプリケーションをわける代わりに、これらを機能ごとにわけて、[プラグイン](#chapter_20_sub_a_different_way_to_organize_code)にまとめることができます。デフォルトのディレクトリ構造に関して、ニーズに応じて[カスタマイズ](#chapter_22_customizing_the_directory_structure)することもできます。

~デバッグ~
----------

<propel>
[ロギング](#chapter_06_debugging_propel_generated_sql)から[Webデバッグツールバー](#chapter_06_debugging_propel_generated_sql)、
</propel>
<doctrine>
[ロギング](#chapter_06_debugging_doctrine_generated_sql)から[Webデバッグツールバー](#chapter_06_debugging_doctrine_generated_sql)、
</doctrine>
[重大な例外](#chapter_01_the_environments)まで、symfonyは開発者が問題を速くデバッグするために便利で助けになるツールをたくさん提供します。

symfony の主要なオブジェクト
----------------------------

symfony フレームワークはWebプロジェクトで頻度の高いニーズを抽出するコアオブジェクトを精選して提供します: [リクエスト](#chapter_04_sub_the_request)、[レスポンス](#chapter_04_sub_the_response)、[ユーザー](#chapter_13_sub_the_myuser_class)、[ロギング](#chapter_23_sub_logging)、[ルーティング](#chapter_05_routing_configuration)と[メーラー](#chapter_16)、と[ビューキャッシュマネージャー](#chapter_16_sidebar_the_code_sfcontext_code_class)です。

これらのコアオブジェクトは [`sfContext` オブジェクト](#chapter_16_sidebar_the_code_sfcontext_code_class)によって管理され、[ファクトリ](#chapter_16_sub_factories)をとおしてこれらを設定できます。

ユーザーオブジェクトはユーザーの[認証](#chapter_13_sub_authentication)、[認可](#chapter_13_sub_authorization)、[flash](#chapter_13_user_flashes) とセッションでシリアライズされる[属性](#chapter_13_user_attributes)を管理します。

~セキュリティ~
--------------

symfony フレームワークは [XSS](#chapter_01_sub_application_creation) と [CSRF](#chapter_01_sub_application_creation) に対して組み込みの防御機能を持ちます。これらの設定は[コマンドライン](#chapter_01_sub_application_creation)から、もしくは[設定ファイル](#chapter_11_sub_xss_and_csrf_protection)を編集することで設定できます。

フォームフレームワークは[組み込みのセキュリティ機能](#chapter_11_sub_built_in_security_features)も提供します。

~フォーム~
----------

Web 開発者にとってフォームの管理がもっとも退屈なタスクの1つなので、symfony は[フォームサブフレームワーク](#chapter_10_the_form_framework)を提供します。フォームフレームワークはたくさんの[ウィジェット](http://www.symfony-project.org/api/1_4/widget)と[バリデーター](http://www.symfony-project.org/api/1_4/validator)を搭載しています。

フォームサブフレームワークの強みの1つはテンプレートがとても簡単に[カスタマイズ可能](#chapter_10_sidebar_customizing_the_look_and_feel_of_a_form)であることです。

##ORM## を利用する場合、フォームフレームワークはモデルに基づいて
<propel>
[フォームとフィルターを生成する方法](#chapter_10_propel_forms)も簡単になります。
</propel>
<doctrine>
[フォームとフィルターを生成する方法](#chapter_10_doctrine_forms)も簡単になります。
</doctrine>

国際化とローカライゼーション
----------------------------

ICU 標準のおかげで、[国際化](#chapter_19_internationalization)と[ローカライゼーション](#chapter_19_localization)は symfony によってサポートされます。[ユーザー culture](#chapter_19_sub_the_user_culture) はユーザーの言語と国を決定します。これはユーザー自身もしくは [URL](#chapter_19_culture_in_the_url) に埋め込むことで定義できます。

テスト
------

**ユニットテスト**のために使われる lime ライブラリはたくさんの[テスト用のメソッド](#chapter_08_the_lime_testing_framework)を提供します。

[専用のデータベース](#chapter_08_sub_database_configuration)と専用の[フィクスチャ](#chapter_08_sub_test_data)から
<propel>
[Propelオブジェクトもテストできます](#chapter_08_propel_unit_tests)。
</propel>
<doctrine>
[Doctrineオブジェクトもテストできます](#chapter_08_doctrine_unit_tests)。
</doctrine>

ユニットテストは[一度に1つ](#chapter_08_running_unit_tests)もしくは[まとめて](#chapter_08_unit_tests_harness)実行できます。

**機能テスト**は
[`sfFunctionalTest`](#chapter_09_the_sftestfunctional_class)クラスで記述され、[ブラウザーシミュレーター](#chapter_09_the_sfbrowser_class)を使い、symfony は[テスター](#chapter_09_the_sftestfunctional_class)をとおして
コアオブジェクトのイントロスペクトができます。[リクエストオブジェクト](#chapter_09_sub_the_request_tester)、[レスポンスオブジェクト](#chapter_09_sub_the_response_tester)、[ユーザーオブジェクト](#chapter_13_user_testing)、[現在のフォームオブジェクト](#chapter_11_the_form_tester)、[キャッシュレイヤー](#chapter_21_testing_the_cache)と
<propel>
[Propel オブジェクト](#chapter_11_the_propel_tester)
</propel>
<doctrine>
[Doctrine オブジェクト](#chapter_11_the_doctrine_tester)
</doctrine>
のためのテスターが存在します。

[レスポンス](#chapter_09_debugging_functional_tests)と[フォーム](#chapter_11_the_form_tester)用のデバッグツールも利用できます。

ユニットテストに関して、機能テストは[1つづつ](#chapter_09_running_functional_tests)もしくは[まとめて](#chapter_09_functional_tests_harness)実行できます。

[すべてのテストを一緒に](#chapter_09_tests_harness)実行することもできます。

プラグイン
----------

symfony フレームワークは Web アプリケーションのための基盤のみを提供しより多くの機能を追加するために[プラグイン](#chapter_20_using_plugins)を頼りにします。このチュートリアルでは、[`sfGuardPlugin`](#chapter_13_plugins)、[`sfFormExtraPlugin`](#chapter_19_language_switching)、[`sfTaskExtraPlugin`](#chapter_20_contributing_a_plugin) を話しました。

インストールの後でプラグインを[アクティベート](#chapter_20_sidebar_plugin_activation)しなければなりません。

プラグインは symfony の公式サイトに[寄付](#chapter_20_contributing_a_plugin)する最高の方法です。

~タスク~
--------

symfony CLI はたくさんのタスクを提供し、もっとも便利なものはこのチュートリアルで検討しました:

 * [`app:routes`](#chapter_05_route_debugging)
 * [`cache:clear`](#chapter_21_clearing_the_cache)
 * [`configure:database`](#chapter_03_the_database)
 * [`generate:project`](#chapter_01_sub_project_creation)
 * [`generate:app`](#chapter_01_sub_application_creation)
 * [`generate:module`](#chapter_07_job_category_module_creation)
 * [`help`](#chapter_03_the_orm)
 * [`i18n:extract`](#chapter_19_sub_i18n_extract)
 * [`list`](#chapter_13_backend_security)
 * [`plugin:install`](#chapter_13_plugins)
 * [`plugin:publish-assets`](#chapter_20_sub_the_assets)
 * [`project:deploy`](#chapter_22_sub_deploying_strategies)
 * [`propel:build-all`](#chapter_03_the_orm)
 * [`propel:build-all-load`](#chapter_07_update_the_database)
<propel>
 * [`propel:build-forms`](#chapter_10_propel_forms)
</propel>
<doctrine>
 * [`doctrine:build --forms`](#chapter_10_doctrine_forms
</doctrine>
 * [`propel:build-model`](#chapter_03_the_orm)
 * [`propel:build-sql`](#chapter_03_the_orm)
 * [`propel:data-load`](#chapter_03_the_initial_data)
 * [`propel:generate-admin`](#chapter_12_backend_modules)
 * [`propel:generate-module`](#chapter_03_see_it_in_action_in_the_browser)
 * [`propel:insert-sql`](#chapter_03_the_orm)
 * [`test:all`](#chapter_09_tests_harness)
 * [`test:coverage`](#chapter_08_sidebar_code_coverage)
 * [`test:functional`](#chapter_09_running_functional_tests)
 * [`test:unit`](#chapter_08_running_unit_tests)

[独自タスクを作る](#chapter_11_maintenance_tasks)こともできます。

またお会いしましょう
-------------------

### 練習して学ぶ

symfony フレームワークには、どのソフトウェアのピースと同じように、学習曲線があります。学習プロセスにおいて、最初のステップはこの本のように実際の例から学ぶことです。2番目のステップは**練習です**。練習に勝るものはありません。

それが今日始められることです。ToDo リストマネージャー、シンプルなブログ、時間もしくは通貨コンバーター、などなんらかの価値を提供する Web プロジェクトを考えてください。1つ選び今日知っている知識で実装を始めてください。異なるオプションを学ぶためにタスクのヘルプメッセージを使い、symfony によって生成されるコードを眺め、[Eclipse](http://www.eclipse.org/) のような、PHP の自動入力補完があるテキストエディタを使います。symfonyによって提供されるすべてのコンフィギュレーションを見るために[リファレンスガイド](http://www.symfony-project.org/reference/1_4/ja/)を参照します。

symfony をより学ぶために自由にできるすべての無料の素材を楽しんでください。

### コミュニティ

チュートリアルが終わる前に、最後に symfony に関して話したいことが1つあります。symfony はたくさんのすばらしい機能と無料のドキュメントを提供します。しかし、オープンソースが持つもっとも貴重な資産の1つはコミュニティです。そして symfony にはもっとも面白くて活発なコミュニティの1つがあります。プロジェクトで symfony を使い始めるのであれば、symfony のコミュニティに参加することを考えてください:

  * [ユーザーのメーリングリスト](http://groups.google.com/group/symfony-users)を購読する
  * [公式ブログのフィード](http://feeds.feedburner.com/symfony/blog)を購読する
  * symfony の [planet フィード](http://feeds.feedburner.com/symfony/planet)を購読する
  * freenode の [#symfony IRC](irc://irc.freenode.net/symfony) チャンネルに来てチャットをする

__ORM__
