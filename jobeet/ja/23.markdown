23日目: 別の視点から symfony を見る
==================================

今日で symfony のすばらしい世界の旅行は最後です。23日間、デザインパターンから強力な組み込み機能までの具体例で symfony を学びました。あなたはまだ symfony マスターではありませんが、自信をもって symfony アプリケーションの開発を始めるために必要な知識はすべてあります。

Jobeet チュートリアルのまとめとして、別の視点からフレームワークを見てみましょう。Jobeet は忘れてこの3週間に学んだすべての機能を思い出しましょう。

symfony とは？
--------------

symfony~フレームワーク~はフルスタックの [MVC フレームワーク](#chapter_04) (Model、View、Controller) を形成する[疎結合されたサブフレームワーク](#chapter_11)の集まりです。

コーディングを始める前に、[symfony の歴史と哲学](#chapter_01)を読む時間をとります。

それから、フレームワークの[前提要件](#chapter_01)を確認し設定を検証するために[`check_configuration.php`スクリプト](#chapter_01)を使います。

最後に、[symfony をインストール](#chapter_01)します。しばらくしてから symfony の最新バージョンに[アップグレード](#chapter_22)します。

symfony は[デプロイ](#chapter_22)作業を楽にするツールも提供します。

~Model~
-------

symfony の Model 部分の作業は
<propel>
[Propel ORM](http://www.propelorm.org/)
</propel>
<doctrine>
[Doctrine ORM](http://www.doctrine-project.org/)
</doctrine>
の助けを借りて行うことができます。
[データベースの記述](#chapter_03)に基づいて、[オブジェクト](#chapter_03_the_orm)、[フォーム](#chapter_10)と[フィルタ](#chapter_12)用のクラスが生成されます。##ORM## はデータベースのテーブルを作成するために使用される [SQL 文を生成します](#chapter_03)。

データベースのコンフィギュレーションは[タスク](#chapter_03)もしくは[設定ファイル](#chapter_03)を編集することで行うことができます。コンフィギュレーションに加えて、[フィクスチャファイル](#chapter_03)のおかげで、初期データを投入することもできます。これらのファイルを[動的なもの](#chapter_06)にすることもできます。

<propel>
Propel のオブジェクトも簡単に[国際化](#chapter_19)できます。
</propel>
<doctrine>
Doctrine のオブジェクトも簡単に[国際化](#chapter_19)できます。
</doctrine>

~View~
------

デフォルトでは、MVC アーキテクチャの View レイヤーはテンプレートとしてプレーンな PHP ファイルを使います。

[URL](#chapter_05) もしくは[リンク](#chapter_05)を作成するなどの頻繁に行われるタスクのためにテンプレートは[ヘルパー](#chapter_04)を使います。

ページのヘッダーとフッターを抽出するためにテンプレートは[レイアウト](#chapter_04)によってデコレートされます。
ビューの再利用性を高めるために、[スロット](#chapter_04)、[パーシャル](#chapter_07)と[コンポーネント](#chapter_19)を定義できます。

開発を加速するために、[ページ全体](#chapter_21)、[アクション](#chapter_21)だけ、もしくは[パーシャルもしくはコンポーネント](#chapter_21)だけをキャッシュするために[キャッシュサブフレームワーク](#chapter_21)を利用できます。手動で[キャッシュを削除](#chapter_21)することもできます。

~Controller~
------------

Controller の部分は[フロントコントローラ](#chapter_01)と[アクション](#chapter_03)によって管理されます。

タスクは[シンプルなモジュール](#chapter_07)、[CRUD モジュール](#chapter_03)を作成する、もしくはモデルクラス用に十分に実用的な [admin モジュール](#chapter_12)を生成するために使うことができます。

admin モジュールによってコードをまったく書かなくても十分な機能をもつアプリケーションを作ることができます。 

Web サイトの技術的な実装を抽出するために、symfony は[プリティ URL](#chapter_05_url) を生成する[ルーティング](#chapter_05)サブフレームワークを利用します。Web サービスの実装を簡単にするために、symfony は複数の[フォーマット](#chapter_14)をネイティブでサポートします。独自[フォーマット](#chapter_15)を作ることもできます。

アクションを別のアクションに[フォワード](#chapter_04)、もしくは[リダイレクト](#chapter_05)できます。

~コンフィギュレーション~
-----------------------

symfony フレームワークでは異なる~環境~に対して異なる~コンフィギュレーション~を用意するのが楽です。[環境](#chapter_01)はコンフィギュレーションの集まりで開発もしくは運用サーバーで異なるふるまいを可能にします。新しい[環境](#chapter_21)を作ることもできます。

symfony の設定ファイルは[異なるレベル](#chapter_04)で定義可能でこれらの大部分が[環境を認識します](#chapter_08):

 * [`app.yml`](#chapter_06)
 * [`cache.yml`](#chapter_21)
 * [`databases.yml`](#chapter_03)
 * [`factories.yml`](#chapter_16)
 * [`generator.yml`](#chapter_12)
 * [`routing.yml`](#chapter_05)
 * [`schema.yml`](#chapter_03)
 * [`security.yml`](#chapter_13)
 * [`settings.yml`](#chapter_11)
 * [`view.yml`](#chapter_04)

大部分の設定ファイルは [YAML フォーマット](#chapter_03)を使います。

デフォルトのディレクトリ構造を利用してレイヤーごとにアプリケーションをわける代わりに、これらを機能ごとにわけて、[プラグイン](#chapter_20)にまとめることができます。デフォルトのディレクトリ構造に関して、ニーズに応じて[カスタマイズ](#chapter_22)することもできます。

~デバッグ~
----------

<propel>
[ロギング](#chapter_06)から[Webデバッグツールバー](#chapter_06)、
</propel>
<doctrine>
[ロギング](#chapter_06)から[Webデバッグツールバー](#chapter_06)、
</doctrine>
[重大な例外](#chapter_01)まで、symfony は開発者が問題を速くデバッグするために便利で助けになるツールをたくさん提供します。

symfony の主要なオブジェクト
----------------------------

symfony フレームワークは Web プロジェクトで頻度の高いニーズを抽出するコアオブジェクトを精選して提供します: [リクエスト](#chapter_04)、[レスポンス](#chapter_04)、[ユーザー](#chapter_13)、[ロギング](#chapter_23)、[ルーティング](#chapter_05)と[メーラー](#chapter_16)、と[ビューキャッシュマネージャ](#chapter_16)です。

これらのコアオブジェクトは [`sfContext` オブジェクト](#chapter_16)によって管理され、[ファクトリ](#chapter_16)をとおしてこれらを設定できます。

ユーザーオブジェクトはユーザーの[認証](#chapter_13)、[認可](#chapter_13)、[flash](#chapter_13) とセッションでシリアライズされる[属性](#chapter_13)を管理します。

~セキュリティ~
--------------

symfony フレームワークは [XSS](#chapter_01) と [CSRF](#chapter_01) に対して組み込みの防御機能を持ちます。これらの設定は[コマンドライン](#chapter_01)から、もしくは[設定ファイル](#chapter_11)を編集することで設定できます。

フォームフレームワークは[組み込みのセキュリティ機能](#chapter_11)も提供します。

~フォーム~
----------

Web 開発者にとってフォームの管理がもっとも退屈なタスクの1つなので、symfony は[フォームサブフレームワーク](#chapter_10)を提供します。フォームフレームワークはたくさんの[ウィジェット](http://www.symfony-project.org/api/1_4/widget)と[バリデータ](http://www.symfony-project.org/api/1_4/validator)を搭載しています。

フォームサブフレームワークの強みの1つはテンプレートがとても簡単に[カスタマイズ可能](#chapter_10)であることです。

##ORM## を利用する場合、フォームフレームワークはモデルに基づいて
<propel>
[フォームとフィルタを生成する方法](#chapter_10)も簡単になります。
</propel>
<doctrine>
[フォームとフィルタを生成する方法](#chapter_10)も簡単になります。
</doctrine>

国際化とローカライゼーション
----------------------------

ICU 標準のおかげで、[国際化](#chapter_19)と[ローカライゼーション](#chapter_19)は symfony によってサポートされます。[ユーザーカルチャ](#chapter_19) はユーザーの言語と国を決定します。これはユーザー自身もしくは [URL](#chapter_19) に埋め込むことで定義できます。

テスト
------

**ユニットテスト**のために使われる lime ライブラリはたくさんの[テスト用のメソッド](#chapter)を提供します。

[専用のデータベース](#chapter_08)と専用の[フィクスチャ](#chapter_08)から
<propel>
[Propel オブジェクトもテストできます](#chapter_08)。
</propel>
<doctrine>
[Doctrine オブジェクトもテストできます](#chapter_08)。
</doctrine>

ユニットテストは[一度に1つ](#chapter_08)もしくは[まとめて](#chapter_08)実行できます。

**機能テスト**は
[`sfFunctionalTest`](#chapter_09)クラスで記述され、[ブラウザシミュレータ](#chapter_09)を使い、symfony は[テスター](#chapter_09)をとおして
コアオブジェクトのイントロスペクトができます。[リクエストオブジェクト](#chapter_09)、[レスポンスオブジェクト](#chapter_09)、[ユーザーオブジェクト](#chapter_13)、[現在のフォームオブジェクト](#chapter_11)、[キャッシュレイヤー](#chapter_21)と
<propel>
[Propel オブジェクト](#chapter_11)
</propel>
<doctrine>
[Doctrine オブジェクト](#chapter_11)
</doctrine>
のためのテスターが存在します。

[レスポンス](#chapter_09)と[フォーム](#chapter_11)用のデバッグツールも利用できます。

ユニットテストに関して、機能テストは[1つづつ](#chapter_09)もしくは[まとめて](#chapter_09)実行できます。

[すべてのテストを一緒に](#chapter_09)実行することもできます。

プラグイン
----------

symfony フレームワークは Web アプリケーションのための基盤のみを提供しより多くの機能を追加するために[プラグイン](#chapter_20)を頼りにします。このチュートリアルでは、[`sfGuardPlugin`](#chapter_13)、[`sfFormExtraPlugin`](#chapter_19)、[`sfTaskExtraPlugin`](#chapter_20) を話しました。

インストールの後でプラグインを[アクティベート](#chapter_20)しなければなりません。

プラグインは symfony の公式サイトに[寄付](#chapter_20)する最高の方法です。

~タスク~
-------

symfony CLI はたくさんのタスクを提供し、もっとも便利なものはこのチュートリアルで検討してきました:

 * [`app:routes`](#chapter_05_route_debugging)
 * [`cache:clear`](#chapter_21_clearing_the_cache)
 * [`configure:database`](#chapter_03_the_database)
 * [`generate:project`](#chapter_01_sub_project_creation)
 * [`generate:app`](#chapter_01_sub_application_creation)
 * [`generate:module`](#chapter_07_job_category_module_creation)
 * [`help`](#chapter_03_the_orm)
 * [`i18n:extract`](#chapter_19_sub_i18n_extract)
 * [`list`](#chapter_13_backend_security)
 * [`plugin:install`](#chapter_13_plugins)
 * [`plugin:publish-assets`](#chapter_20_sub_the_assets)
 * [`project:deploy`](#chapter_22_sub_deploying_strategies)
 * [`propel:build --all`](#chapter_03_the_orm)
 * [`propel:build --all -and-load`](#chapter_07_update_the_database)
<propel>
 * [`propel:build-forms`](#chapter_10_propel_forms)
</propel>
<doctrine>
 * [`doctrine:build --all`](#chapter_03_the_orm)
 * [`doctrine:build --all -and-load`](#chapter_07_update_the_database)
 * [`doctrine:build --forms`](#chapter_10_doctrine_forms)
</doctrine>
 * [`propel:build-model`](#chapter_03_the_orm)
 * [`propel:build-sql`](#chapter_03_the_orm)
 * [`propel:data-load`](#chapter_03_the_initial_data)
 * [`propel:generate-admin`](#chapter_12_backend_modules)
 * [`propel:generate-module`](#chapter_03_see_it_in_action_in_the_browser)
 * [`propel:insert-sql`](#chapter_03_the_orm)
 * [`test:all`](#chapter_09_tests_harness)
 * [`test:coverage`](#chapter_08_sidebar__code_coverage_)
 * [`test:functional`](#chapter_09_running_functional_tests)
 * [`test:unit`](#chapter_08_running_unit_tests)

[独自のタスク](#chapter_11) も作ることができます。

またお会いしましょう
--------------------

### 練習して学ぶ

symfony フレームワークには、どのソフトウェアのピースと同じように、学習曲線があります。学習プロセスにおいて、最初のステップはこの本のように実際の例から学ぶことです。2番目のステップは**練習です**。練習に勝るものはありません。

それが今日始められることです。ToDo リストマネージャー、シンプルなブログ、時間もしくは通貨コンバーター、などなんらかの価値を提供する Web プロジェクトを考えてください。1つ選び今日知っている知識で実装を始めてください。異なるオプションを学ぶためにタスクのヘルプメッセージを使い、symfony によって生成されるコードを眺め、[Eclipse](http://www.eclipse.org/) のような、PHP の自動入力補完があるテキストエディタを使います。symfonyによって提供されるすべてのコンフィギュレーションを見るために[リファレンスガイド](http://www.symfony-project.org/reference/1_4/ja/)を参照します。

symfony をより学ぶために自由にできるすべての無料の素材を楽しんでください。

### コミュニティ

チュートリアルが終わる前に、最後に symfony に関して話したいことが1つあります。symfony はたくさんのすばらしい機能と無料のドキュメントを提供します。しかし、オープンソースがもつもっとも貴重な資産の1つはコミュニティです。そして symfony にはもっとも面白くて活発なコミュニティの1つがあります。プロジェクトで symfony を使い始めるのであれば、symfony のコミュニティに参加することを考えてください:

  * [ユーザーのメーリングリスト](http://groups.google.com/group/symfony-users)を購読する
  * [公式ブログのフィード](http://feeds.feedburner.com/symfony/blog)を購読する
  * symfony の [planet フィード](http://feeds.feedburner.com/symfony/planet)を購読する
  * freenode の [#symfony IRC](irc://irc.freenode.net/symfony) チャンネルに来てチャットをする

__ORM__
