День 7: Категории
=================

Мы вчера много узнали о symfony: получение данных с помощью ##ORM##,
фикстуры (начальные и тестовые данные), маршрутизация, отладка и конфигурация проекта.

Если Вы вчера поработали самостоятельно, Вы лучше воспримите этот урок.

Итак, рассмотрим возможный вариант реализации.

Маршрутизация для страницы категорий
------------------------------------

Для начала мы должны добавить правило маршрутизации,
чтобы создать "красивый" URL для страницы категорий.

    [yml]
    # apps/frontend/config/routing.yml
    category:
      url:      /category/:slug
      class:    sfPropelRoute
      param:    { module: category, action: show }
      options:  { model: JobeetCategory, type: object }

>**TIP**
>Вообще, лучше всегда сначала подумать об ~URL~ и создать соответствующее ~правило маршрутизации|Route~
>перед тем, как реализовывать новую задачу. И конечно, это обязательное условие,
>если Вы удалили дефолтные правила из routing.yml.

В правиле маршрутизации, в качестве параметра запроса, можно использовать любое свойство связанного объекта.
А также, можно использовать любое произвольное значение, если связанный объект имеет соответствующий геттер.
Поскольку в таблице `category` нет колонки `slug`, нам необходимо добавить
соответствующий геттер в `JobeetCategory`, чтобы правило заработало:

    [php]
<propel>
    // lib/model/JobeetCategory.php
</propel>
<doctrine>
    // lib/model/doctrine/JobeetCategory.class.php
</doctrine>
    public function getSlug()
    {
      return Jobeet::slugify($this->getName());
    }

Ссылка на страницу категорий
----------------------------

Теперь измените шаблон `job/indexSuccess.php`, чтобы добавить ссылку на страницу категорий.

    [php]
    <!-- some HTML code -->

            <h1>
              <?php echo link_to($category, 'category', $category) ?>
            </h1>

    <!-- some HTML code -->

          </table>

          <?php if (($count = $category->countActiveJobs() -
              ➥ sfConfig::get('app_max_jobs_on_homepage')) > 0): ?>
            <div class="more_jobs">
              and <?php echo link_to($count, 'category', $category) ?>
              more...
            </div>
          <?php endif; ?>
        </div>
      <?php endforeach; ?>
    </div>

Мы добавляем ссылку только в том случае, если в конкретной категории содержится больше 10 вакансий.
В тексте ссылки укажем число оставшихся вакансий, которые не поместились в общий список.
Чтобы этот шаблон смог работать, добавим метод `countActiveJobs()` в `JobeetCategory`:

<propel>
    [php]
    // lib/model/JobeetCategory.php
    public function countActiveJobs()
    {
      $criteria = new Criteria();
      $criteria->add(JobeetJobPeer::CATEGORY_ID, $this->getId());

      return JobeetJobPeer::countActiveJobs($criteria);
    }

Метод `JobeetCategory::countActiveJobs()` использует не существующий пока метод
`JobeetJobPeer::countActiveJobs()`. Добавим следующий код в `JobeetJobPeer.php`:
</propel>
<doctrine>
    [php]
    // lib/model/doctrine/JobeetCategory.class.php
    public function countActiveJobs()
    {
      $q = Doctrine_Query::create()
        ->from('JobeetJob j')
        ->where('j.category_id = ?', $this->getId());

      return Doctrine::getTable('JobeetJob')->countActiveJobs($q);
    }

Метод `JobeetCategory::countActiveJobs()` использует не существующий пока метод
`JobeetJobTable::countActiveJobs()`. Добавим следующий код в `JobeetJobTable.php`:
</doctrine>

<propel>
    [php]
    // lib/model/JobeetJobPeer.php
    class JobeetJobPeer extends BaseJobeetJobPeer
    {
      static public function getActiveJobs(Criteria $criteria = null)
      {
        return self::doSelect(self::addActiveJobsCriteria($criteria));
      }

      static public function countActiveJobs(Criteria $criteria = null)
      {
        return self::doCount(self::addActiveJobsCriteria($criteria));
      }

      static public function addActiveJobsCriteria(Criteria $criteria = null)
      {
        if (is_null($criteria))
        {
          $criteria = new Criteria();
        }

        $criteria->add(self::EXPIRES_AT, time(), Criteria::GREATER_THAN);
        $criteria->addDescendingOrderByColumn(self::CREATED_AT);

        return $criteria;
      }

      static public function doSelectActive(Criteria $criteria)
      {
        return self::doSelectOne(self::addActiveJobsCriteria($criteria));
      }
    }

Как Вы видите, мы полностью отрефакторили `JobeetJobPeer`,
чтобы дополнительно выделить метод `addActiveJobsCriteria()`.
Это позволит обойти дублирование и сделает код более [~DRY~ (Don't Repeat Yourself)](http://en.wikipedia.org/wiki/Don%27t_repeat_yourself).
</propel>
<doctrine>
    [php]
    // lib/model/doctrine/JobeetJobTable.class.php
    class JobeetJobTable extends Doctrine_Table
    {
      public function retrieveActiveJob(Doctrine_Query $q)
      {
        return $this->addActiveJobsQuery($q)->fetchOne();
      }

      public function getActiveJobs(Doctrine_Query $q = null)
      {
        return $this->addActiveJobsQuery($q)->execute();
      }

      public function countActiveJobs(Doctrine_Query $q = null)
      {
        return $this->addActiveJobsQuery($q)->count();
      }

      public function addActiveJobsQuery(Doctrine_Query $q = null)
      {
        if (is_null($q))
        {
          $q = Doctrine_Query::create()
            ->from('JobeetJob j');
        }

        $alias = $q->getRootAlias();

        $q->andWhere($alias . '.expires_at > ?', date('Y-m-d h:i:s', time()))
          ->addOrderBy($alias . '.expires_at DESC');

        return $q;
      }
    }

Как Вы видите, мы полностью отрефакторили код `JobeetJobTable`,
чтобы дополнительно выделить метод `addActiveJobsQuery()`.
Это позволит обойти дублирование и сделает код более [~DRY~ (Don't Repeat Yourself)](http://en.wikipedia.org/wiki/Don%27t_repeat_yourself).
</doctrine>

>**TIP**
>Если Вы просто скопируете какую-то часть кода, на первое время, этого будет достаточно.
>Но, если Вам придется копировать еще раз, тогда стоит провести рефакторинг и
>выделить отдельный метод.

<propel>
В методе `JobeetJobPeer::countActiveJobs()` вместо того, чтобы использовать `doSelect()`
и считать кол-во возвращенных элементов, мы использовали более эффективный метод `doCount()`,
который сразу возвращает необходимый результат.
</propel>
<doctrine>
В методе `JobeetJobTable::countActiveJobs()` вместо того, чтобы использовать `execute()`
и считать кол-во возвращенных элементов, мы использовали более эффективный метод `count()`,
который сразу возвращает необходимый результат.
</doctrine>

Для такой небольшой задачи мы уже изменили довольно много файлов.
Но всякий раз, когда мы вносили правки, мы старались делать это в правильном направлении,
разграничивая ответственности по разным слоям. Попутно мы проводили рефакторинг,
чтобы сделать код повторно используемым. Это нормальный процесс, когда Вы работаете с symfony.

![Homepage](http://www.symfony-project.org/images/jobeet/1_4/07/homepage.png)

Создание модуля для категорий
-----------------------------

Теперь создадим отдельный ~модуль|Module~ для категорий:

    $ php symfony generate:module frontend category

Возможно, для создания модуля Вы будете использовать команду `propel:generate-module`.
Но, поскольку нам не потребуется 90% сгенеренного кода, я буду использовать `generate:module`,
который просто создаст пустой модуль.

>**TIP**
>Почему мы не добавили еще один контроллер `category` в модуль `job`?
>В принципе, это возможно. Но, поскольку главной сущностью страницы является непосредственно "категория",
>будет более правильным выделить отдельный модуль под эту задачу.

Когда мы запрашиваем страницу категории, маршрут `category` будет пытаться
найти соответствующий объект по параметру `slug`. Поскольку ~slug|Slug~ не хранится в базе данных,
и мы не можем вычислить категорию зная slug, найти объект по slug оказывается невозможным.

Редактирование базы данных
--------------------------

Нам необходимо добавить колонку `slug` в таблицу `category`:

<propel>
    [yml]
    # config/schema.yml
    propel:
      jobeet_category:
        id:           ~
        name:         { type: varchar(255), required: true }
        slug:         { type: varchar(255), required: true, index: unique }
</propel>
<doctrine>
Эту задачу может решить Doctrine behavior `Sluggable`.
Надо просто включить это "поведение" для `JobeetCategory` и оно самостоятельно
добавит колонку `slug` и реализует всю логику.

    [yml]
    # config/doctrine/schema.yml
    JobeetCategory:
      actAs:
        Timestampable: ~
        Sluggable:
          fields: [name]
      columns:
        name:
          type: string(255)
          notnull:  true

</doctrine>

Теперь, когда `slug` появился в базе данных, мы можем удалить метод `JobeetCategory::getSlug()`

<propel>
Каждый раз, когда изменяется название категории, нам необходимо обновить `slug`.
Давайте отредактируем метод `JobeetCategory::setName()`:

    [php]
    // lib/model/JobeetCategory.php
    public function setName($name)
    {
      parent::setName($name);

      $this->setSlug(Jobeet::slugify($name));
    }
</propel>
<doctrine>
>**NOTE**
>При сохранении объекта, slug будет автоматически вычислен и установлен на основе свойства `name`.
</doctrine>

Используйте команду `propel:build-all-load`, чтобы обновить таблицы базы данных
и заполнить тестовыми данными (фикстурой).

    $ php symfony propel:build-all-load --no-confirmation

Теперь все готово, чтобы создать метод `executeShow()`.
Замените содержимое контроллера `category` следующим кодом:

    [php]
    // apps/frontend/modules/category/actions/actions.class.php
    class categoryActions extends sfActions
    {
      public function executeShow(sfWebRequest $request)
      {
        $this->category = $this->getRoute()->getObject();
      }
    }

>**NOTE**
>Поскольку мы удалили метод `executeIndex()`, также мы можем удалить
>автоматически созданный шаблон `indexSuccess.php`
>(`apps/frontend/modules/category/templates/indexSuccess.php`).

И напоследок, остается создать шаблон `showSuccess.php`:

    [php]
    // apps/frontend/modules/category/templates/showSuccess.php
    <?php use_stylesheet('jobs.css') ?>

    <?php slot('title', sprintf('Jobs in the %s category', $category->getName())) ?>

    <div class="category">
      <div class="feed">
        <a href="">Feed</a>
      </div>
      <h1><?php echo $category ?></h1>
    </div>

    <table class="jobs">
      <?php foreach ($category->getActiveJobs() as $i => $job): ?>
        <tr class="<?php echo fmod($i, 2) ? 'even' : 'odd' ?>">
          <td class="location">
            <?php echo $job->getLocation() ?>
          </td>
          <td class="position">
            <?php echo link_to($job->getPosition(), 'job_show_user', $job) ?>
          </td>
          <td class="company">
            <?php echo $job->getCompany() ?>
          </td>
        </tr>
      <?php endforeach; ?>
    </table>

~Partial (Фрагмент шаблона)|Partial Templates~
----------------------------

Обратите внимание, что мы скопировали часть шаблона, ответственного за отрисовку
списка вакансий из `job/indexSuccess.php`. Но это не эффективно.
Пришло время познакомиться с новым приемом: когда Вам необходимо повторно использовать
какую-то часть шаблона, Вы можете выделить ее в **~partial|Partial Templates~**.
Это фрагмент кода, который может быть использован в нескольких шаблонах.
Практически это такой же шаблон, только название файла начинается со знака подчеркивания (`_`).

Создайте файл `job/templates/_list.php`:

    [php]
    // apps/frontend/modules/job/templates/_list.php
    <table class="jobs">
      <?php foreach ($jobs as $i => $job): ?>
        <tr class="<?php echo fmod($i, 2) ? 'even' : 'odd' ?>">
          <td class="location">
            <?php echo $job->getLocation() ?>
          </td>
          <td class="position">
            <?php echo link_to($job->getPosition(), 'job_show_user', $job) ?>
          </td>
          <td class="company">
            <?php echo $job->getCompany() ?>
          </td>
        </tr>
      <?php endforeach; ?>
    </table>

Чтобы подключить partial используйте хелпер `~include_partial()~`:

    [php]
    <?php include_partial('job/list', array('jobs' => $jobs)) ?>

В качестве первого аргумента `include_partial()` используется связка "модуль/partial"
(знак подчеркивания в названии partial'а пропускается). Второй аргумент - это
массив переменных, которые должны быть переданы в partial.

>**NOTE**
>Почему мы используем хелпер `include_partial()` вместо того, чтобы использовать
>родную конструкцию PHP `include()`? Принципиальное отличие `include_partial()` - это
>встроенная поддержка кеширования шаблонов.

Замените соответствующий HTML-код в обоих шаблонах на вызов `include_partial()`:

    [php]
    // in apps/frontend/modules/job/templates/indexSuccess.php
    <?php include_partial('job/list', array('jobs' => $category->getActiveJobs(sfConfig::get('app_max_jobs_on_homepage')))) ?>

    // in apps/frontend/modules/category/templates/showSuccess.php
    <?php include_partial('job/list', array('jobs' => $category->getActiveJobs())) ?>

Постраничная навигация
----------------------

В соответствии с требованиями, описанными в "День 2":

    "Список разбивается на страницы по 20 вакансий"

Для постраничной выборки объектов для ##ORM## в symfony используется класс
[`sfPropelPager`](http://www.symfony-project.org/api/1_4/sfPropelPager).
Теперь, вместо того, чтобы передавать в шаблон `category/showSuccess`
массив объектов `JobeetJob`, мы будем передавать pager:

    [php]
    // apps/frontend/modules/category/actions/actions.class.php
    public function executeShow(sfWebRequest $request)
    {
      $this->category = $this->getRoute()->getObject();

      $this->pager = new sfPropelPager(
        'JobeetJob',
        sfConfig::get('app_max_jobs_on_category')
      );
<propel>
      $this->pager->setCriteria($this->category->getActiveJobsCriteria());
</propel>
<doctrine>
      $this->pager->setQuery($this->category->getActiveJobsQuery());
</doctrine>
      $this->pager->setPage($request->getParameter('page', 1));
      $this->pager->init();
    }

>**TIP**
>Метод `sfRequest::getParameter()` вторым аргументом принимает значение параметра по-умолчанию.
>Если параметр `page` отсутствует, тогда `getParameter()` вернет `1`.

Конструктор `sfPropelPager` в качестве аргументов принимает класс модели и кол-во элементов на страницу.
Перенесем в конфиг соответствующее настройки для постраничной навигации:

    [yml]
    # apps/frontend/config/app.yml
    all:
      active_days:          30
      max_jobs_on_homepage: 10
      max_jobs_on_category: 20

<propel>
Метод `sfPropelPager::setCriteria()` принимет объект `Criteria` для ограничения выборки.
</propel>
<doctrine>
Метод `sfDoctrinePager::setQuery()` принимет объект `Doctrine_Query` для ограничения выборки.
</doctrine>

<propel>
Добавим метод `JobeetCategory::getActiveJobsCriteria()`:
</propel>
<doctrine>
Добавим метод `JobeetCategory::getActiveJobsQuery()`:
</doctrine>

<propel>
    [php]
    // lib/model/JobeetCategory.php
    public function getActiveJobsCriteria()
    {
      $criteria = new Criteria();
      $criteria->add(JobeetJobPeer::CATEGORY_ID, $this->getId());

      return JobeetJobPeer::addActiveJobsCriteria($criteria);
    }
</propel>
<doctrine>
    [php]
    // lib/model/doctrine/JobeetCategory.class.php
    public function getActiveJobsQuery()
    {
      $q = Doctrine_Query::create()
        ->from('JobeetJob j')
        ->where('j.category_id = ?', $this->getId());

      return Doctrine::getTable('JobeetJob')->addActiveJobsQuery($q);
    }
</doctrine>

<propel>
Теперь, когда мы определили метод `getActiveJobsCriteria()`, мы можем отрефакторить
класс `JobeetCategory`:
</propel>
<doctrine>
Теперь, когда мы определили метод `getActiveJobsQuery()`, мы можем отрефакторить
класс `JobeetCategory`:
</doctrine>

<propel>
    [php]
    // lib/model/JobeetCategory.php
    public function getActiveJobs($max = 10)
    {
      $criteria = $this->getActiveJobsCriteria();
      $criteria->setLimit($max);

      return JobeetJobPeer::doSelect($criteria);
    }

    public function countActiveJobs()
    {
      $criteria = $this->getActiveJobsCriteria();

      return JobeetJobPeer::doCount($criteria);
    }
</propel>
<doctrine>
    [php]
    // lib/model/doctrine/JobeetCategory.class.php
    public function getActiveJobs($max = 10)
    {
      $q = $this->getActiveJobsQuery()
        ->limit($max);

      return $q->execute();
    }

    public function countActiveJobs()
    {
      return $this->getActiveJobsQuery()->count();
    }
</doctrine>

И, в заключение, отредактируем шаблон:

    [php]
    <!-- apps/frontend/modules/category/templates/showSuccess.php -->
    <?php use_stylesheet('jobs.css') ?>

    <?php slot('title', sprintf('Jobs in the %s category', $category->getName())) ?>

    <div class="category">
      <div class="feed">
        <a href="">Feed</a>
      </div>
      <h1><?php echo $category ?></h1>
    </div>

    <?php include_partial('job/list', array('jobs' => $pager->getResults())) ?>

    <?php if ($pager->haveToPaginate()): ?>
      <div class="pagination">
        <a href="<?php echo url_for('category', $category) ?>?page=1">
          <img src="/images/first.png" alt="First page" />
        </a>

        <a href="<?php echo url_for('category', $category) ?>?page=<?php echo $pager->getPreviousPage() ?>">
          <img src="/images/previous.png" alt="Previous page" title="Previous page" />
        </a>

        <?php foreach ($pager->getLinks() as $page): ?>
          <?php if ($page == $pager->getPage()): ?>
            <?php echo $page ?>
          <?php else: ?>
            <a href="<?php echo url_for('category', $category) ?>?page=<?php echo $page ?>"><?php echo $page ?></a>
          <?php endif; ?>
        <?php endforeach; ?>

        <a href="<?php echo url_for('category', $category) ?>?page=<?php echo $pager->getNextPage() ?>">
          <img src="/images/next.png" alt="Next page" title="Next page" />
        </a>

        <a href="<?php echo url_for('category', $category) ?>?page=<?php echo $pager->getLastPage() ?>">
          <img src="/images/last.png" alt="Last page" title="Last page" />
        </a>
      </div>
    <?php endif; ?>

    <div class="pagination_desc">
      <strong><?php echo count($pager) ?></strong> jobs in this category

      <?php if ($pager->haveToPaginate()): ?>
        - page <strong><?php echo $pager->getPage() ?>/<?php echo $pager->getLastPage() ?></strong>
      <?php endif; ?>
    </div>

Большая часть кода оперирует ссылками на другие страницы.
Ниже представлен список методов `sfPropelPager`, использованных в шаблоне:

  * `getResults()`: Возвращает массив ##ORM##-объектов для текущей страницы
  * `getNbResults()`: Общее количество найденных объектов
  * `haveToPaginate()`: Возвращает `true`, если количество страниц больше 1
  * `getLinks()`: Массив ссылок на все страницы
  * `getPage()`: Текущий номер страницы
  * `getPreviousPage()`: Номер предыдущей страницы
  * `getNextPage()`: Номер следующей страницы
  * `getLastPage()`: Номер последней страницы

Поскольку класс `sfPropelPager` также реализует интерфейсы `Iterator` и `Countable`,
Вы можете использовать функцию `count()`, чтобы получить количество объектов, вместо
метода `getNbResults()`.

![Pagination](http://www.symfony-project.org/images/jobeet/1_4/07/pagination.png)

Увидимся завтра!
----------------

Напоследок, хочу повторить, что процесс реализации новой задачи начинается
с создания URL'а, затем контроллера, потом изменяете модель и добавляете шаблоны.
Если при этом Вы будете придерживаться хороших практик разработки,
то совсем скоро почуствуете философию symfony.

Завтра мы поговорим о совершенно новой теме - о тестировании приложения.

__ORM__
