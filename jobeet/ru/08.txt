День 8: Модульное тестирование
==============================

Последних два дня мы работали над Jobeet используя возможности Symfony, 
с которыми познакомились в первые пять дней. В процессе были затронуты 
другие интересные особенности фреймворка.

Сегодня мы поговорим о чем-то совершенно другом: **автоматическое тестирование**.
Эта тема на столько большая, что нам понадобится целых два дня что бы охватить
ее полностью.

Тестирование в Symfony
----------------------

В Symfony используется два вида автоматического ~тестирования|Testing~: 
**~модульное тестирование|Unit Testing~** и **~функциональное тестирование|Functional Testing~**.

Модульные тесты проверяют правильность работы всех методов и функций. Каждый
тест, на сколько это возможно, должен быть независимым от других тестов.

С другой стороны, функциональные тесты проверяют результаты работы 
приложения в целом.

Все тесты в Symfony должны находиться в директории проекта `test/`. 
Внутри нее две поддиректории, одна для модульных тестов (`test/unit/`) 
и одна для функциональных (`test/functional/`).

Модульное тестирование мы рассмотрим сегодня, тогда как завтрашний день
посвятим функциональному тестированию.

Модульное тестирование
----------------------

Написание модульных тестов хорошая практика для веб-разработки, но наверное 
одна из самых сложных во внедрении. Так как веб-разработчики обычно,
не тестируют результаты своей работы, то у них возникает много вопросов:
Как написать тест перед внедрением новой функциональности? Что именно мне нужно
тестировать? Проверяют ли мои тесты все ~крайние значения|Edge Cases~?
Как я могу быть уверенным, что все хорошо протестировано?
Но обычно, первый вопрос на много прозаичней: С чего начать?

Не смотря на то, что мы ярые сторонники тестирования, принцип Symfony
прагматичность: лучше иметь несколько каких-нибудь тестов чем не иметь их вовсе. 
У вас уже есть большой объем нетестированного кода? 
Не проблема. Что бы получить преимущества от использования тестирования, не 
обязательно иметь исчерпывающие комплекты тестов. Со временем ваш код будет
становиться лучше, будет расти ~охватываемость кода|Code Coverage~, и сами
вы станете более уверенными в нем.

Проблема многих библиотек тестирования, чрезмерная сложность в изучении. 
Вот почему Symfony использует очень простую библиотеку **lime**, что бы 
сделать написание тестов безумно легким.

>**NOTE**
>Не смотря на то, что в этом руководстве широко описывается встроенная 
>библиотек lime, вы можете использовать любую другую, 
>на пример прекрасную библиотеку [PHPUnit](http://www.phpunit.de/).

The `~lime|Lime Testing Framework~` Testing Framework

Все модульные тесты, написанные с использованием lime, начинаются примерно так:

  [php]
  require_once dirname(__FILE__).'/../bootstrap/unit.php';

  $t = new lime_test(1, new lime_output_color());

Во первых, подключается загрузочный файл `unit.php`, производит некоторые 
настройки. Далее,  создается новый объект `limit_test` и при создании 
указывается количество тестов, которые планируется выполнить.

>**NOTE**
>План тестирования позволяет lime контролировать сообщения об ошибках, когда
>запущено несколько тестов(ситуация, когда тестовый скрипт вызывает 
Fatal error).


Тестирование происходит через вызов метода или функции с заранее определенными
параметрами и сравнение полученных результатов с ожидаемыми. Это сравнение
определяет успешность выполнения теста.

Для облегчения сравнения объект `lime_test` предоставляет несколько методов:

 Метод                         | Описание
 ----------------------------- | --------------------------------------------
 `ok($test)`                   | Проверяет значение и успешен если оно true.
 `is($value1, $value2)`        | Сравнивает два значения и успешен если они
                               | равны (`==`).
 `isnt($value1, $value2)`      | Сравнивает два значения и успешен если они
                               | не равны.
 `like($string, $regexp)`      | Проверят строку на совпадение с регулярным 
                               | вырожением.
 `unlike($string, $regexp)`    | Удостоверяется, что строка не совпадает с 
                               | регулярным вырожением.
 `is_deeply($array1, $array2)` | Удостоверяется, что два масива имеют одни и
                               | те же значения.

>**TIP**
>Вы можете удивиться почему lime определяет так много методов, если все тесты 
>можно написать используя только `ok()`. Преимущество альтернативных методов
>в том, что мы получаем более ясные сообщения об ошибках проволившихся тестов
>и тем самым улучшаем читабельность результатов тестирования. 

Объект `lime_test` предоставляет так же другие удобные методы тестирования:

 Метод                   | Описание
 ----------------------- | --------------------------------------------------
 `fail()`                | Всегда завершается ошибкой - полезен для тестирования
                         | исключений(exceptions).
 `pass()`                | Всегда успешен - полезен для тестирования исключений.
 `skip($msg, $nb_tests)` | Считается как `$nb_tests` тестов. Пропускает `$nb_tests` тестов.
                         | Полезен для тестов условий.
 `todo()`                | Считается как один тест -- полезен для тестов которые
                         | еще не написаны.

Напоследок, метод `comment($msg)` выводит комментарий и ничего не тестирует.

Запуск модульных тестов
-----------------------

Все модульные тесты хранятся в директории `test/unit/`. По правилам Symfony
имя теста формируется из имени класса, который он тестирует, с добавлением 
суффикса `Test`. Хотя вы и можете организовать хранение файлов в `test/unit/` 
на свое усмотрение, мы рекомендуем дублировать структуру директорий `lib/`.

Что бы продемонстрировать модульное тестирование, протестируем класс `Jobeet`.

Создайте файл `test/unit/JobeetTest.php` следующего содержания:

    [php]
    // test/unit/JobeetTest.php
    require_once dirname(__FILE__).'/../bootstrap/unit.php';

    $t = new lime_test(1, new lime_output_color());
    $t->pass('This test always passes.');
    
Для запуска теста необходимо запустить этот файл:

    $ php test/unit/JobeetTest.php

Или использовать команду `test:unit`:

    $ php symfony test:unit Jobeet
    
![Тест в командной строке](http://www.symfony-project.org/images/jobeet/1_2/08/cli_tests.png)

>**Note**: К сожалению в командной строке ~Windows~ результаты тестирования
>не подсвечиваются красным или зеленым цветом.

Тестирование `slugify`
----------------------

Начнем наше путешествие в удивительный мир модульного тестирования
с написания тестов для метода `Jobeet::slugify()`.

Метод `~slug|Slug~ify()` мы создали на 5-ый день разработки, служит он для
очистки строк, делает их безопасными для включения в URL. Обработка строк 
представляет сабой такие простые преобразования, как замена всех не ASCII 
символов на тире(`-`) или приведение всех символов к нижнему регистру:

 | Input         | Output       |
 | ------------- | ------------ |
 | Sensio Labs   | sensio-labs  |
 | Paris, France | paris-france |

Замените содержание тест-файла следующим кодом:

    [php]
    // test/unit/JobeetTest.php
    require_once dirname(__FILE__).'/../bootstrap/unit.php';

    $t = new lime_test(6, new lime_output_color());

    $t->is(Jobeet::slugify('Sensio'), 'sensio');
    $t->is(Jobeet::slugify('sensio labs'), 'sensio-labs');
    $t->is(Jobeet::slugify('sensio   labs'), 'sensio-labs');
    $t->is(Jobeet::slugify('paris,france'), 'paris-france');
    $t->is(Jobeet::slugify('  sensio'), 'sensio');
    $t->is(Jobeet::slugify('sensio  '), 'sensio');

Если вы внимательно посмотрите на написанный код, то увидите, что каждая строка
выполняет один тест, а каждый тест проверяет одно правило. Что вы должны
четко усвоить: один тест - одно правило.

Теперь вы можете запустить тест-файл. Если все тесты выполнятся успешно,
то вы получите "*зеленую полоску*". Если нет, то ужасная "*красная полоска*" 
оповестит вас, что некоторые тесты провалены и что-то нужно иправить.

![slugify() тесты](http://www.symfony-project.org/images/jobeet/1_2/08/slugify.png)

Если тест провален, то вы увидите некоторую информацию о том почему это
произошло. Если же у вас сотни тестов, может оказаться сложным, быстро
определить что именно сломалось.

Все тест-методы lime в качестве последнего аргумента принимают строку, 
которая служит описанием для теста. Это очень удобно для быстрого описания 
того, что вы тестируете. Это так же может послужить своеобразной 
~документацией|Documentation~ для тест-методов. Давайте добавим
несколько сообщений в тест-файл `slugify`:

    [php]
    require_once dirname(__FILE__).'/../bootstrap/unit.php';

    $t = new lime_test(6, new lime_output_color());

    $t->comment('::slugify()');
    $t->is(Jobeet::slugify('Sensio'), 'sensio',
     ➥ '::slugify() converts all characters to lower case');
    $t->is(Jobeet::slugify('sensio labs'), 'sensio-labs',
     ➥ '::slugify() replaces a white space by a -');
    $t->is(Jobeet::slugify('sensio   labs'), 'sensio-labs',
     ➥ '::slugify() replaces several white spaces by a single -');
    $t->is(Jobeet::slugify('  sensio'), 'sensio',
     ➥ '::slugify() removes - at the beginning of a string');
    $t->is(Jobeet::slugify('sensio  '), 'sensio',
     ➥ '::slugify() removes - at the end of a string');
    $t->is(Jobeet::slugify('paris,france'), 'paris-france',
     ➥ '::slugify() replaces non-ASCII characters by a -');

![slugify() тесты с сообщениями](http://www.symfony-project.org/images/jobeet/1_2/08/slugify_doc.png)

Обрабатывая описание теста, lime пытается определить что же он тестирует.
Вы наверное заметили, что все предложения, описывающие тесты, начинаются с имени 
тестируемого метода.

>**SIDEBAR**
>~Охват кода~
>
>Когда вы пишете тесты, некоторые части кода легко могут быть пропущены.
>
>Что бы помочь вам проверить весь ли код протестирован, Symfony предоставляет
>команду `test:coverage`. Выполните эту команду, указав в качестве параметров
>тест-файл или директорию с тестами и класс или директорию с классами, которые
>тестируются, и вы увидите на сколько тесты охватывают код:
>
>     $ php symfony test:coverage test/unit/JobeetTest.php lib/Jobeet.class.php
>
>Если вы хотите получить более подробную информацию о коде, не охваченном тестами
>используйте опцию `--detailed`:
>
>     $ php symfony test:coverage --detailed test/unit/JobeetTest.php lib/Jobeet.class.php
>
>Не забывайте, что если в результате выполнения команды, вы получаете 
>сообщение, что код полностью охвачен тестами, это не означает, что тестируются 
>~крайние случаи|Edge Cases~.
>
>Так же `test:coverage` полагается на информацию собираемую `~XDebug~`, по этому
>нужно заранее его установить и настроить это расширение.

Написание тестов для нового функционала
---------------------------------------

Метод slug для пустой строки возвращает пустую строку. Можете проверить, 
оно работает. Но пустая строка в URL не лучшая идея. Давайте изменим
метод `slugify()` так, что бы он возвращал "n-a" для пустых строк.

Вы можете сперва написать тест, а затем внести изменения в код, а
можете и наоборот. Это дело вкуса каждого, но написание теста первым, дает
уверенность в том, что код выполняет то что задумано.

    [php]
    $t->is(Jobeet::slugify(''), 'n-a',
     ➥ '::slugify() converts the empty string to n-a');

Метод разработки, когда для новых функций сперва пишутся тесты, а затем код, 
известен как
[Test Driven Development (~TDD|Test Driven Development~)](http://en.wikipedia.org/wiki/Test_Driven_Development).

Если вы запустите тестирование сейчас, то получите красную полоску. Если нет, 
значит ваш код тестирует не то, что нужно. 

Теперь отредактируем класс `Jobeet`, добавив следующее условие в начале метода
slugify:

    [php]
    // lib/Jobeet.class.php
    static public function slugify($text)
    {
      if (empty($text))
      {
        return 'n-a';
      }

      // ...
    }

Теперь тест будет пройден как положено, и вы получите заветную зеленую полоску,
но только в том случае если не забыли обновить план тестирования. Иначе, вы
увидите сообщение о том, что запланировано шесть тестов, а запущено на один 
больше. Поддерживайте количество запланированных тестов в актуально состоянии,
это необходимо, что бы информировать вас если один из тестов завершится
преждевременно, вызвав Fatal Error.

Добавление тестов из-за бага
-----------------------------

Положим, пришло время и один из пользователей сообщил о жутком ~баге|Debug~: 
по ссылкам на некоторые вакансии отображается страница с 404-ой ошибкой. После 
проведенного расследования, вы находите причину, у этих вакансий пустой slug 
компании, позиции или местоположения. Как это возможно? Вы просматриваете в 
базе значения полей, которые определенно не должны быть пустыми. И пока вы 
размышляете над багом.. Бац! Причина найдена. Если строка содержит только 
не ASCII символы, метод `slugify()` преобразовывает ее в пустую строку. 
Вы на радостях открываете класс `Jobeet` и тут же исправляете проблему. 
Это плохая идея.. Сперва напишем тест:

    [php]
    $t->is(Jobeet::slugify(' - '), 'n-a',
     ➥ '::slugify() converts a string that only contains non-ASCII characters to n-a');


![slugify() баг](http://www.symfony-project.org/images/jobeet/1_2/08/slugify_bug.png)

Убедившись, что тест не проходит, отредактируем класс `Jobeet` - переместим
проверку на пустую строку в конец метода:

    [php]
    static public function slugify($text)
    {
      // ...

      if (empty($text))
      {
        return 'n-a';
      }

      return $text;
    }
    
Теперь новый тест выполняется успешно, так же как и другие. Но метод 
`slugify()` все еще содержит ошибки не смотря на то, что на 100% охвачен 
тестами.

Во время написания тестов вы не можете учесть все ~крайние случаи|Edge Cases~
и это нормально. Но когда вы находите один из них, напишите сперва тест,
а затем только код. Это позволит вашему коду становится со временем все лучше
и он всегда будет качественным.

>**SIDEBAR**
>На пути к лучшему методу `slugify`
>
> Возможно вы знаете, что Symfony создан французами, давайте добавим тест со 
> словом на французком языке, которое содержит "ударение".
>
>     [php]
>     $t->is(Jobeet::slugify('Développeur Web'), 'developpeur-web', '::slugify() removes accents');
>
> Тест должен провалиться. Вместо того чтобы заменить `é` на `e`, `slugify` 
> заменил их на тире(`-`). 
> Это весьма сложная проблема, называемая *~транслитерацией|Transliteration~*.
> Будем надеятся, что у вас установлена библиотека "~iconv|`iconv` Library~",
> так как она нам пригодится. Замените код `slugify()` на следующий:
>
>     [php]
>     // code derived from http://php.vrana.cz/vytvoreni-pratelskeho-url.php
>     static public function slugify($text)
>     {
>       // replace non letter or digits by -
>       $text = preg_replace('~[^\\pL\d]+~u', '-', $text);
>
>       // trim
>       $text = trim($text, '-');
>
>       // transliterate
>       if (function_exists('iconv'))
>       {
>         $text = iconv('utf-8', 'us-ascii//TRANSLIT', $text);
>       }
>
>       // lowercase
>       $text = strtolower($text);
>
>       // remove unwanted characters
>       $text = preg_replace('~[^-\w]+~', '', $text);
>
>       if (empty($text))
>       {
>         return 'n-a';
>       }
>
>       return $text;
>     }
>
> Не забывайте сохранять свои PHP файлы в кодировке ~UTF-8~, это ~кодировка|Encoding~
> используемая в Symfony по умолчанию, так же она используется "iconv" для 
> транслитерации.
>
> Измените тест-файл, что бы последний тест выполнялся только при наличии "iconv":
>
>     [php]
>     if (function_exists('iconv'))
>     {
>       $t->is(Jobeet::slugify('Développeur Web'), 'developpeur-web', '::slugify() removes accents');
>     }
>     else
>     {
>       $t->skip('::slugify() removes accents - iconv not installed');
>     }

##ORM## Unit Tests
------------------

### Конфигурация базы данных

Модульное тестирование классов моделей  ##ORM## немного сложнее, так как 
требует подключения к базе данных. У вас уже есть одно для разработки, но существует
хорошая традиция создавать отдельную базу для тестирования.

В первый день мы ввели понятие ~окружения|Environments~, как места для 
хранения различных настроек приложения. Изначально все тесты в Symfony
выполняются в тестовом окружении. Давайте настроим его для работы с
другой базой данных.

<propel>
    $ php symfony configure:database --env=test
     ➥ "mysql:host=localhost;dbname=jobeet_test" root mYsEcret
</propel>
<doctrine>
    $ php symfony configure:database --name=doctrine
     ➥ --class=sfDoctrineDatabase --env=test
     ➥ "mysql:host=localhost;dbname=jobeet_test" root mYsEcret
</doctrine>

Опция `env` указывает команде, что база данных конфигурируется только для
окружения `test`. Когда мы использовали эту команду в третий день, мы не
указывали эту опцию, в результате настройки базы применились ко всем
окружениям.

>**NOTE**
>Если вы из любопытства откроете файл `config/databases.yml`, то увидите
>как Symfony позволяет с легкостью изменять конфигурацию в зависимости от
>окружения.

Теперь у нас есть настроенная база данных и мы можем инициализировать ее
используя команду `propel:insert-sql`:

    $ mysqladmin -uroot -pmYsEcret create jobeet_test
    $ php symfony propel:insert-sql --env=test

>**SIDEBAR**
>Принципы конфигурации в Symfony
>
>На четвертый день, мы увидели, что настройки в конфигурационных файлах
>могут быть определены на разных уровнях.
>
>Так же ~настройки|Settings~ могут зависеть от окружения. Это возможно во
>многих конфигурационных файлах, которые мы использовали до сих пор:
>`databases.yml`, ~`app.yml`~, ~`view.yml`~ и ~`settings.yml`~. Во всех этих
>файлах главный ключ это окружение. All - означает что настройки используются
>для всех окружений:
>
>     [yml]
>     # config/databases.yml
>     dev:
>       propel:
>         class: sfPropelDatabase
<propel>
>         param:
>           classname: DebugPDO
</propel>
>
>     test:
>       propel:
>         class: sfPropelDatabase
>         param:
<propel>
>           classname: DebugPDO
</propel>
>           dsn: 'mysql:host=localhost;dbname=jobeet_test'
>
>     all:
>       propel:
>         class: sfPropelDatabase
>         param:
>           dsn: 'mysql:host=localhost;dbname=jobeet'
>           username: root
>           password: null

### Тестовые данные

Теперь у нас есть отдельная база данных для тестов, надо каким-то образом
загрузить в нее тестовые данные. В третий день мы узнали о ~команде|Tasks~ 
`propel:data-load`, но для тестов нам необходимо перезагружать данные каждый 
раз, когда запускается тестирование, что бы быть уверенными в достоверности 
тестовых данных.

<propel>
Команда `propel:data-load` для загрузки данных использует класс 
[`sfPropelData`](http://www.symfony-project.org/api/1_2/sfPropelData)

    [php]
    $loader = new sfPropelData();
    $loader->loadData(sfConfig::get('sf_test_dir').'/fixtures');
</propel>
<doctrine>
Команда `doctrine:data-load` для загрузки данных использует метод
`Doctrine::loadData()`:

    [php]
    Doctrine::loadData(sfConfig::get('sf_test_dir').'/fixtures');
</doctrine>

>**NOTE**
>Объект ~`sfConfig`~ может быть использован для получения полного пути к
>поддиректориям проекта. Это применяется на тот случай, если стандартная
>организация директорий будет изменена.

Метод `loadData()` принимает в качестве первого параметра имя директории или
файла. Так же он может принимать масив директорий и/или файлов.

У нас уже есть некоторые начальные данные в `data/fixtures/`. Для тестов
мы поместим данные в директорию `test/fixtures/`. Эти данные будут 
использоваться для модульного и функционального тестирования ##ORM##.

Скопируйте файлы из `data/fixtures/` в `test/fixtures/`.

### Тестирование `JobeetJob`

Давайте создадим несколько модульных тестов для класса модели `JobeetJob`.

Так как все модульные тесты для ##ORM## будут начинаться с одного и того же
кода, создадим в `test/bootstrap/` файл `##ORM##.php` следующего
содержания:

    [php]
    // test/bootstrap/##ORM##.php
    include(dirname(__FILE__).'/unit.php');

    $configuration =
     ➥ ProjectConfiguration::getApplicationConfiguration(
     ➥ 'frontend', 'test', true);

    new sfDatabaseManager($configuration);

<propel>
    $loader = new sfPropelData();
    $loader->loadData(sfConfig::get('sf_test_dir').'/fixtures');
</propel>
<doctrine>
    Doctrine::loadData(sfConfig::get('sf_test_dir').'/fixtures');
</doctrine>

Приятно очевидный скрипт:
    
  * Для контролеров frontend'а мы инициализируем объект конфигурации тестового
    окружения:

        [php]
        $configuration =
         ➥ ProjectConfiguration::getApplicationConfiguration(
         ➥ 'frontend', 'test', true);
    
  * Мы создаем менеджер базы данных. Он загружает конфигурацию из
    `databases.yml` и настраивает соединение для ##ORM##

        [php]
        new sfDatabaseManager($configuration);

<propel>
  * Мы загружаем наши тестовые данные используя `sfPropelData`:

        [php]
        $loader = new sfPropelData();
        $loader->loadData(sfConfig::get('sf_test_dir').'/fixtures');
</propel>
<doctrine>
  * Мы загружаем наши тестовые данные используя `Doctrine::loadData()`:

        [php]
        Doctrine::loadData(sfConfig::get('sf_test_dir').'/fixtures');
</doctrine>

>**NOTE**
>##ORM## подключается к базе только если есть SQL запросы для исполнения.

Теперь у нас все готово, что бы начать тестировать класс `JobeetJob`.

Начнем с создания файла `JobeetJobTest.php` в `test/unit/model`:

    [php]
    // test/unit/model/JobeetJobTest.php
    include(dirname(__FILE__).'/../../bootstrap/##ORM##.php');

    $t = new lime_test(1, new lime_output_color());

Далее создадим тест для метода `getCompanySlug()`:

    [php]
    $t->comment('->getCompanySlug()');
<propel>
    $job = JobeetJobPeer::doSelectOne(new Criteria());
</propel>
<doctrine>
    $job = Doctrine::getTable('JobeetJob')->createQuery()->fetchOne();
</doctrine>
    $t->is($job->getCompanySlug(), Jobeet::slugify($job->getCompany()), '->getCompanySlug() return the slug for the company');

Заметьте что мы тестируем только метод `getCompanySlug()` и не проверяем
правильность работы slug, так как мы уже протестировали его ранее в
другом месте.

Написание тестов для метода `save()` немного сложнее:

    [php]
    $t->comment('->save()');
    $job = create_job();
    $job->save();
    $expiresAt = date('Y-m-d', time() + 86400
      ➥ * sfConfig::get('app_active_days'));
<propel>
    $t->is($job->getExpiresAt('Y-m-d'), $expiresAt, '->save() updates expires_at if not set');
</propel>
<doctrine>
    $t->is(date('Y-m-d', strtotime($job->getExpiresAt())), $expiresAt, '->save() updates expires_at if not set');
</doctrine>

    $job = create_job(array('expires_at' => '2008-08-08'));
    $job->save();
<propel>
    $t->is($job->getExpiresAt('Y-m-d'), '2008-08-08', '->save() does not update expires_at if set');
</propel>
<doctrine>
    $t->is(date('Y-m-d', strtotime($job->getExpiresAt())), '2008-08-08', '->save() does not update expires_at if set');
</doctrine>

    function create_job($defaults = array())
    {
      static $category = null;

      if (is_null($category))
      {
<propel>
        $category = JobeetCategoryPeer::doSelectOne(new Criteria());
</propel>
<doctrine>
        $category = Doctrine::getTable('JobeetCategory')
          ->createQuery()
          ->limit(1)
          ->fetchOne();
</doctrine>
      }

      $job = new JobeetJob();
      $job->fromArray(array_merge(array(
        'category_id'  => $category->getId(),
        'company'      => 'Sensio Labs',
        'position'     => 'Senior Tester',
        'location'     => 'Paris, France',
        'description'  => 'Testing is fun',
        'how_to_apply' => 'Send e-Mail',
        'email'        => 'job@example.com',
        'token'        => rand(1111, 9999),
        'is_activated' => true,
<propel>
      ), $defaults), BasePeer::TYPE_FIELDNAME);
</propel>
<doctrine>
      ), $defaults));
</doctrine>

      return $job;
    }

>**NOTE**
>Каждый раз добавляя тесты, не забывайте обновить в конструкторе `lime_test`
>количество ожидаемых тестов (the plan). Для файла `JobeetJobTest` вам нужно
>изменить его с 1 на 3.

### Тесты для других классов ##ORM##

Теперь вы можете добавить тесты для остальных классов ##ORM##. Так как
сейчас вы знакомы с процессом написания модульных тестов, это будет и в самом
деле легко.

~Полное модульное тестирование~
-------------------------------

Для запуска всех модульных тестов проекта используется ~команда|Tasks~ 
`test:unit`:

    $ php symfony test:unit

Результат выполнения команды, для каждого тест-файла выводится успешно он
отработал или содержит ошибки:

![Полное модульное тестирование](http://www.symfony-project.org/images/jobeet/1_2/08/test_harness.png)

>**TIP**
>Если в выводе команды `test:unit` для какого-то из файлов возвращается 
>"~dubious status|Dubious Status~", значит выполнение этого файла завершено 
>преждевременно. Запустите этот файл отдельно, что бы получить подробную
>информацию об ошибках.

Увидимся завтра
---------------

Не смотря на то, что тестирование приложения очень важная вещь, я думаю многие
из вас хотели поддаться соблазну и просто пропустить сегодняшнюю главу. Я рад,
что вы этого не сделали.

Уверен, изучение Symfony это не только изучение всех возможностей,
предоставляемых фреймворком, но так же знакомство с ~философией|Philosophy~ 
программирования и ~лучшими методологиями|Best Practices~ разработки.
Тестирование одна из них. Рано или поздно, модульные тесты сохранят день для
вас. Они позволяют быть более уверенным в работоспособности кода и дают
свободу рефакторинга, рефакторинга без страха.
Модульные тесты верные стражи, которые всегда оповестят вас если что-то 
сломается. Код Symfony охвачен более чем девятью тысячами тестов.

Завтра мы напишем несколько функциональных тестов для модулей `job` и
`category`. А пока можете написать немного модульных тестов для классов
моделей Jobeet.

__ORM__