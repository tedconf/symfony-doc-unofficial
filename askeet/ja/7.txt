7日目: モデルとビューの操作
==========================

復習
----

既に6日が過ぎ、アプリケーションは今のところ、便利ではないと考えている人もいるかもしれません。なぜなら利用可能なページ数によってアプリケーションの実用性を考える人がいて、askeetは質問リストを表示できる、それに対する回答を表示できる、ユーザセッションを取り扱うことしかできないことを見ているからです。

我々がページ数を重要視しないのはsymfonyに新しいページを追加するのが簡単だからです。 証明して欲しいですか？よろしい、今日は最後に求められた質問リストを表示し、最後に投稿された回答リストを表示し、質問に興味を示したユーザリスト、ユーザのプロファイルを表示し、それらの機能にアクセスするすべてのページにナビゲーションバーを追加します。 作業は一時間程度もないので、ビューコンフィギュレーションもセットアップして、今週何が行われたのか一覧します。 準備はいいですか？では行きましょう。

リファクタリング
----------------

`question/templates/_list.php`にあるものと似たパジネーションコントロールによって番号付きのリストを追加しようとしています。私達は自分自身を繰り返したくないですので、パジネーションコードをこのパーシャルからカスタムヘルパに抽出します。 ヘルパはテンプレートにアクセス可能なPHP関数です。(`link_to()`や`format_date()`ヘルパのようなものです。)

`GlobalHelper.php`を`askeet/apps/frontend/lib/helper`に作成し、次のコードを加えて下さい:

    [php]
    <?php
    
    function pager_navigation($pager, $uri)
    {
      $navigation = '';
     
      if ($pager->haveToPaginate())
      {  
        $uri .= (preg_match('/\?/', $uri) ? '&' : '?').'page=';
    
        // 最初のページと以前のページ
        if ($pager->getPage() != 1)
        {
          $navigation .= link_to(image_tag('first.gif', 'align=absmiddle'), $uri.'1');
          $navigation .= link_to(image_tag('previous.gif', 'align=absmiddle'), $uri.$pager->getPreviousPage()).'&nbsp;';
        }
        
        // 1つずつのページ
        $links = array();
        foreach ($pager->getLinks() as $page)
        {
          $links[] = link_to_unless($page == $pager->getPage(), $page, $uri.$page);
        }
        $navigation .= join('&nbsp;&nbsp;', $links);
    
        // 次と最後のページ
        if ($pager->getPage() != $pager->getCurrentMaxLink())
        {
          $navigation .= '&nbsp;'.link_to(image_tag('next.gif', 'align=absmiddle'), $uri.$pager->getNextPage());
          $navigation .= link_to(image_tag('last.gif', 'align=absmiddle'), $uri.$pager->getLastPage());
        }
    
      }
    
      return $navigation;
    }    

パジネーションのナビゲーションヘルパは以前私達が書いたコードを改善します。最初のページに　`previous` リンクを表示せず、最後のページに 'next' リンクを表示しないようにするルーティングルールを使用します。リンクの見栄をよりよくするために4つの新しいイメージ (`first.gif`、`previous.gif`、`next.gif`、`last.gif`) も追加しました。[askeetのSVNリポジトリ](http://svn.askeet.com/tags/release_day_7/web/images/)から入手して下さい。おそらく将来のあなた自身のプロジェクトのためにこのヘルパを再利用することができます。

`question/templates/_list.php`フラグメントにあるこのヘルパを使うため、次のようにヘルパ関数を呼び出して下さい:

    [php]
    <?php use_helper('Text', 'Global') ?>
    
    <?php foreach($question_pager->getResults() as $question): ?>
      <div class="question">
        <div class="interested_block">
          <?php include_partial('interested_user', array('question' => $question)) ?>
        </div>
    
        <h2><?php echo link_to($question->getTitle(), 'question/show?stripped_title='.$question->getStrippedTitle()) ?></h2>
    
        <div class="question_body">
          <?php echo truncate_text($question->getBody(), 200) ?>
        </div>
      </div>
    <?php endforeach; ?>
    
    <div id="question_pager">
      <?php echo pager_navigation($question_pager, 'question/list') ?>
    </div>

`Global`という名称はさきほど作成した`GlobalHelper.php`ファイルを参照します。

リクエストによってすべてが以前と同じように動作することをチェックして下さい:

    http://askeet/frontend_dev.php/

![リファクタされたページャのナビゲーション](/images/askeet/pager_navigation_day7.gif)

最近の質問リスト
----------------

`question`モジュールに、新しいアクションである`recent`を作成して下さい:

    [php]
    public function executeRecent()
    {
      $this->question_pager = QuestionPeer::getRecentPager($this->getRequestParameter('page', 1));
    }

このように簡単です。最新の質問を取り込む機能は私達は`QuestionPeer`クラスのメソッドが妥当であると考えています。`-Peer`クラスは 与えられたクラスのオブジェクトのリストをリターンすることに特化されています。これはsymfonyブックの[モデルの章](http://www.symfony-project.com/book/1_0/08-Inside-the-Model-Layer)に詳細が説明されています。しかし`getRecent()`クラスメソッドはまだ作成するしかないです。`askeet/lib/model/QuestionPeer.php`クラスを開き、次のコードを追加して下さい:

    [php]
    public static function getRecentPager($page)
    {
      $pager = new sfPropelPager('Question', sfConfig::get('app_pager_homepage_max'));
      $c = new Criteria();
      $c->addDescendingOrderByColumn(self::CREATED_AT);
      $pager->setCriteria($c);
      $pager->setPage($page);
      $pager->setPeerMethod('doSelectJoinUser');
      $pager->init();

      return $pager;
    }
  
日付の降順の基準は最新の質問を選択します。このメソッドは`parent`の代わりに`self`を使用します。なぜならクラスファンクションであって、オブジェクトファンクションではないからです。単純な`doSelect()`のかわりに`doSelectJoinUser()`をここで使用する理由はテンプレートは質問の作者の詳細を必要とするからです。質問リストのための最初のリクエストを意味し、さらに関連ユーザを取得するための一つの質問ごとのリクエストも意味します。私達が求めたとき、`doSelectJoinUser()`メソッドは一つのリクエストにおいてすべてを行います。`doSelectJoinUser()`メソッドは一つのリクエストにおいてすべてを行います: 私達が求めたとき

    [php]
    $question->getUser();
    
...データベースには何のリクエストも送られません。`joinUser`は一つ以上のリクエストをたった一つの質問に減らすことができるようにします。データベースはこの簡単な最適化をした私達に感謝するでしょう。

[Propelのドキュメント](http://propel.phpdb.org/docs/user_guide/)にこの素晴らしい機能についてのすべての説明があります。

最近の質問のリストのテンプレートはホームページに表示された質問リストのように見えます`askeet/apps/frontend/module/question/templates/recentSuccess.php`を作成して下さい:

    [php]
    <h1>recent questions</h1>

    <?php include_partial('list', array('question_pager' => $question_pager)) ?>

あなたは今、[5日目](5.txt)になぜ私達が質問リストをフラグメントにリファクタしたのか理解しています。最後に、[4日目](4.txt)に触れたように、`frontend/confg/routing.yml`設定ファイルに`recent_questions`ルールを追加する必要があります:

    recent_questions:
      url:   /question/recent/:page
      param: { module: question, action: recent, page: 1 }

しかしお待ち下さい: `question/_list`フラグメントはルーティングルールを伴った`question/list`リンクを作成しますので、それを使っては最近の質問リストは動作しません。私達は様々なページャのために再利用できるようにするためにルーティングルールをパラメータとしてフラグメントに渡す必要があります。ですので`recentSuccess.php`の最後の行を次のように変更して下さい:

    [php]
    <?php include_partial('list', array('question_pager' => $question_pager, 'rule' => 'question/recent')) ?>

`_list.php` フラグメントの最後の行を次のように変更して下さい:

    [php]
    <div id="question_pager">
      <?php echo pager_navigation($question_pager, $rule) ?>
    </div>

`modules/question/templates/listSuccess.php` の `_list` フラグメントへのコールにルールパラメータを追加することを忘れないで下さい。

    [php]
    <h1>popular questions</h1>
    
    <?php echo include_partial('list', array('question_pager' => $question_pager, 'rule' => 'question/list')) ?>
    
キャッシュをクリアして(設定は修正されました)、それでお終いです。

最新の質問リストを表示するためには、次のURLブラウザバーに入力して下さい:

    http://askeet/question/recent

![list of recent questions](/images/askeet/recent_questions.gif)

最近の回答リスト
----------------

上記の作業とまったく同じなので、まっしぐらに向かいます:

* `answer`モジュールを作成して下さい:

        $ symfony init-module frontend answer
    
* 新しいアクションである`recent`を作成して下さい:

        [php]
        public function executeRecent()
        {
          $this->answer_pager = AnswerPeer::getRecentPager($this->getRequestParameter('page', 1));
        }   

* `AnswerPeer` クラスを拡張して下さい:

        [php]
        public static function getRecentPager($page)
        {
          $pager = new sfPropelPager('Answer', sfConfig::get('app_pager_homepage_max'));
          $c = new Criteria();
          $c->addDescendingOrderByColumn(self::CREATED_AT);
          $pager->setCriteria($c);
          $pager->setPage($page);
          $pager->setPeerMethod('doSelectJoinUser');
          $pager->init();
          
          return $pager;
        }

* 新しい`recentSuccess.php`テンプレートを作成して下さい:

        [php]
        <?php use_helper('Date', 'Global') ?>
        
        <h1>recent answers</h1>
        
        <div id="answers">
        <?php foreach ($answer_pager->getResults() as $answer): ?>
          <div class="answer">
            <h2><?php echo link_to($answer->getQuestion()->getTitle(), 'question/show?stripped_title='.$answer->getQuestion()->getStrippedTitle()) ?></h2>
            <?php echo count($answer->getRelevancys()) ?> points
            posted by <?php echo link_to($answer->getUser(), 'user/show?id='.$answer->getUser()->getId()) ?> 
            on <?php echo format_date($answer->getCreatedAt(), 'p') ?>
            <div>
              <?php echo $answer->getBody() ?>
            </div>
          </div>
        <?php endforeach ?>
        </div>        
        
        <div id="question_pager">
          <?php echo pager_navigation($answer_pager, 'answer/recent') ?>
        </div>

* ブラウザでテストして下さい:

        http://askeet/answer/recent
    
![最新の回答リスト](/images/askeet/recent_answers.gif)

慣れてきましたか？

>**Note**: [4日目](4.txt)に気を配った方々ならおそらくは回答の詳細を表示するコードのチャンクを認識したでしょう。コードは少なくとも二つの場所で使われているので、私達はリファクタして、`qestion/show`と`answer/recent`の両方を使用されている`_answer.php`の一部分を作成します。詳細は[askeetのSVNリポジトリ](http://svn.askeet.com/tags/release_day_7/apps/frontend/modules/answer/templates/)で見ることができます。

ユーザのプロファイル
----------------------

回答にあるユーザ名はまだ書かれていない`user/show`アクションにリンクをします。これはユーザプロファイルになり、ユーザについてのわずかな詳細と同様に最新の投稿された質問と回答を表示します。

最初にすべきことはアクションを作成することです:

    [php]
    public function executeShow()
    {
      $this->subscriber = UserPeer::retrieveByPk($this->getRequestParameter('id', $this->getUser()->getSubscriberId()));
      $this->forward404Unless($this->subscriber);
  
      $this->interests = $this->subscriber->getInterestsJoinQuestion();
      $this->answers   = $this->subscriber->getAnswersJoinQuestion();
      $this->questions = $this->subscriber->getQuestions();
    }

`->getInterestsJoinQuestion()`と`->getAnswersJoinQuestion()`メソッドは`User`クラスのネイティブなメソッドです。どのように動くのか理解するために`askeet/lib/model/om/BaseUser.php`クラスを調べることが出来ます。

`askeet/apps/frontend/modules/user/templates/showSuccess.php`テンプレートはあなたの問題に与えることはないでしょう:

    [php]
    <h1><?php echo $subscriber ?>'s profile</h1>
    
    <h2>Interests</h2>
    
    <ul>
    <?php foreach ($interests as $interest): $question = $interest->getQuestion() ?>
      <li><?php echo link_to($question->getTitle(), 'question/show?stripped_title='.$question->getStrippedTitle()) ?></li>
    <?php endforeach; ?>
    </ul>
    
    <h2>Contributions</h2>
    
    <ul>
    <?php foreach ($answers as $answer): $question = $answer->getQuestion() ?>
      <li>
        <?php echo link_to($question->getTitle(), 'question/show?stripped_title='.$question->getStrippedTitle()) ?><br />
        <?php echo $answer->getBody() ?>
      </li>
    <?php endforeach; ?>
    </ul>
    
    <h2>Questions</h2>
    
    <ul>
    <?php foreach ($questions as $question): ?>
      <li><?php echo link_to($question->getTitle(), 'question/show?stripped_title='.$question->getStrippedTitle()) ?></li>
    <?php endforeach; ?>
    </ul>

もちろん、あなたは、並び順と同様に、`->getInterestsJoinQuestion()`と `->getAnswersJoinQuestion()`と` User`オブジェクトの`getQuestion()`の各メソッドによってリターンされた結果の数字を制限できることを望んでいるでしょう。`askeet/lib/model/User.php`クラスファイルにあるこれらのメソッドを上書きすることで簡単に行われます。そして、どのようにやるのか、ここで終わらせることはしません - しかし今日のリリースはこれを含みます。

最後のテストの段階です。最初のユーザがしたことを見てみましょう:

    http://askeet/user/show/id/1

![ユーザのプロファイル](/images/askeet/user_profile.gif)

今、質問からユーザプロファイルへのリンクをすることができます。`quesiton/templates/showSuccess.php`と`question/templates_list.php` の `question_body`のdviの始めに次のリンクを追加してください:

    [php]
    <div>asked by <?php echo link_to($question->getUser(), 'user/show?id='.$question->getUser()->getId()) ?> on <?php echo format_date($question->getCreatedAt(), 'f') ?></div>
    
`_list.php`内で`Date`ヘルパの使用を宣言することを忘れないで下さい。

ナビゲーションバーを追加する
----------------------------

横のバーを追加するためにグローバルレイアウトを変更します。このバーはダイナミックコンテントを含みますが、それぞれのテンプレートの部分ではありえないので、レイアウトにおけるそれのポジションを安定させたいです。加えて、バーのコードをテンプレートに加えることはたくさんのことを繰り返すことになりますので、あなたは私達がそんなことをしたくないことをご存じでしょう。

バーが**コンポーネント**である理由はそういうわけです。コンポーネントは変数の中で利用可能なアクションです。(すなわち、HTMLコードはテンプレート実行からの結果です)symfonyブックの[ビューの章](http://www.symfony-project.com/book/1_0/07-Inside-the-View-Layer)ではコンポーネントとは何か、コンポーネントとフラグメントの違いを説明しています。

### レイアウトにコンポーネントを追加する

グローバルレイアウト(`askeet/apps/frontend/templates/layout.php`)を開いて下さい。コードのこの部分を覚えてますか:

    [php]
    <div id="content_bar">
      <!-- Nothing for the moment -->
      <div class="verticalalign"></div>
    </div>

コメントを次のコードで置き換えて下さい

    [php]
      <?php include_component_slot('sidebar') ?>
      
それでお終いです。

### 何のアクションがコンポーネントに投入するのか定義する

シンプルなコンポーネントよりも小さくてパワフルなものを使うことに決めました。コンポーネントスロットです。文脈上の内容を許可するcallerアクションに従ってアクションが修正されることが可能であるコンポーネントです。ビューコンフィギュレーション(`view.yml`ファイルに書かれています)はアクションがコンポーネントスロットに一致するのかを定義します:

    default:
      components:
        sidebar:      [sidebar, default]

この例の場合、`sidebar`という名前のコンポーネントスロットは`sidebar`モジュールの`default`アクションの結果として宣言されます。

ビューの設定は全体のアプリケーション(`askeet/apps/frontend/config/`ディレクトリ)もしくは特別なモジュール(`askeet/apps/frontend/modules/mymodule/config`ディレクトリ)のために定義されることが可能です。私達の場合のために、全体のアプリケーションのために定義をし、サイドバーの文脈的に特別なリンクが必要な時に上書きをすることします。

ですので`askeet/apps/frontend/config/view.yml`を開き、上記で示されたコンポーネントスロットの設定に追加して下さい。あなたはsynmfonyの[関連した章](http://www.symfony-project.com/book/1_0/07-Inside-the-View-Layer)でビューの設定についてもっと詳しい情報を得ることが出来ます。

### sidebar/defaultアクションとテンプレートを書く

最初に、symfonyに新しい`sidebar`モジュールを初期化させます:

    $ symfony init-module frontend sidebar

次に、デフォルトコンポーネントを書く必要があります。`askeet/apps/frontend/modules/sidebar/actions`ディレクトリにおいて`actions.class.php`を`components.class.php`にリネームをして内容を次のように変更します:

    [php]
    <?php 
    
    class sidebarComponents extends sfComponents
    {
      public function executeDefault()
      {
      }
    }
    
コンポーネントビューはテンプレートで、あたかもアクションのためのようにあります。違いはネーミングにあります: コンポーネントビューは通常のテンプレート(`Success`で終わる)というよりもフラグメント(`_`で始まる)のように命名されました。`askeet/apps/frontend/modules/sidebar/templates/_default.php`フラグメント(使われない`indexSuccess.php`は削除して下さい)を次のように作成して下さい:

    [php]
    <?php echo link_to('ask a new question', 'question/add') ?>
    
    <ul>
      <li><?php echo link_to('popular questions', 'question/list') ?></li>
      <li><?php echo link_to('latest questions', 'question/recent') ?></li>
      <li><?php echo link_to('latest answers', 'answer/recent') ?></li>
    </ul>

askeetウェブサイトのページをナビゲートしようとするなら、エラーを得るでしょう。構成がキャッシュされ、それぞれのリクエストで解析されない本番環境でサイトをナビゲートしているからです。`view.yml`設定ファイルを修正しますが、本番環境のアクションは理解できません。キャッシュされたバージョンを使用します - コンポーネントスロットを含まないものです。変更を見たい場合、キャッシュをクリアするか開発環境でナビゲートして下さい:

    $ symfony clear-cache
    
もしくは

    http://askeet/frontend_dev.php/

ナビゲーションバーはすべてのページ上で正しく表示されます

![サイドバー](/images/askeet/sidebar.gif)

>**Note**: 本番環境の構成の一般的な効果です。ですので開発フェーズの間(構成をたくさん変更しているとき)、開発環境を使っていることを覚えておくこと、および本番環境をナビゲートするとき、構成を変更したあとにキャッシュをクリアすることを覚えておく必要があります。

少々のビュー構成
----------------

私達が目指している間に、`apps/config/`にあるアプリケーションの`view.yml`設定ファイルを見てみましょう:

    default:
      http_metas:
        content-type: text/html; charset=utf-8
    
      metas:
        title:        symfony project
        robots:       index, follow
        description:  symfony project
        keywords:     symfony, project
        language:     en
    
      stylesheets:    [main, layout]
    
      javascripts:    []
    
      has_layout:     on
      layout:         layout

      components:
        sidebar:      [sidebar, default]

`metas`セクションは全体のサイトのメタタグのための設定を含みます。`title`キーはブラウザウィンドウのバーに表示されるタイトルも定義します。このタイトルは非常に重要です。なぜなら、ユーザが検索インデックスによって見つけたときに最初にサイトで見る物だからです。それゆえ、askeetサイトに採用されたものを変更するために必要です:

      metas:
        title:        askeet! ask questions, find answers
        robots:       index, follow
        description:  askeet!, a symfony project built in 24 hours
        keywords:     symfony, project, askeet, php5, question, answer
        language:     en
    
現在のページをリフレッシュして下さい。変化が見られない場合は、本番環境にいるからです。適切なウィンドウタイトルが表示されるためにはまずキャッシュをクリアする必要があります:

![ウィンドウのタイトル](/images/askeet/window_title.gif)

>**Note**: 加えて、あなたのプロジェクトページのデフォルトタイトルを提供するために、symfonyはデフォルトの`robots.txt`と`favicon.ico`をウェブルートディレクトリ(`askeet/web/`)に作成します。それらも変更することを忘れないで下さい!

>**Note**: あなたのサイトの各ページのタイトルを変更する必要があるかもしれません。各モジュールのためのカスタム`view.yml`設定ファイルを定義できます。しかし、静的なタイトルのみです。代替的に[ビュー構成の章](http://www.symfony-project.com/book/1_0/07-Inside-the-View-Layer)に書かれているように、`->setTitle()`メソッドによるアクションから動的な値を使用することができます:
>
>       [php]
>       $this->getResponse()->setTitle($title);

私達が何をしたのか見てみましょう
--------------------------------

7日目に到達するときにあなたが行ったことを止めて見ることはこれまでの一般的な習慣です。現在のデータモデルと利用可能なアクションを含む少しのことを記録するよい機会です。

実際のところ、書いている間にコードを記録した方がよいです。例えば各メソッドごとに[phpDocumentor](http://www.phpdoc.org/)スタイルのコメントなどです。symfonyプロジェクトにおいて、よく使われるメソッドや関数で使用される名前はそれぞれの目的と利用の説明として提供されます。メソッドは短く、とても読みやすいです。多くの時間において、テンプレートはまさに一目瞭然のforeachとifステートメントしか使用しません。なぜ[askeetのSVNリポジトリ](http://svn.askeet.com/)で見かけるコードが多くのドキュメントを含まないのはそういうわけです - 加えて、私達がすでに書いたという事実は私達が行ったことについての説明の7時間分に相当します!

更新されたエンティティのリレーションダイアグラムを見てみましょう:

![ERD](/images/askeet/mcd2.gif)

利用可能なリストは以下の通りです:

    answer/
      recent
    question/
      list
      show
      recent
    sidebar/
      default (component)
    user/
      show
      login
      logout
      handleErrorLogin

モデルは次のメソッドも含みます:

    Anwser()
      getRelevancyUpPercent()
      getRelevancyDownPercent()
    AnswerPeer::
      getRecentPager()
    Interest->
      save()
    Question->
      setTitle()
    QuestionPeer::
      getQuestionFromTitle()
      getHomepagePager()
      getRecentPager()
    Relevancy
      save()
    User->
      __toString()
      setPassword()
    
    myUser->
      signIn()
      signOut()
      getSubscriberId()
      getSubscriber()
      getNickName()
      
...加えて、カスタムツールクラスとカスタムバリデータは`askeet/appss/frontend/lib/`ディレクトリに設置されています。
 
そのために7時間は悪くないでしょう？
 
それではまた明日
----------------

今日はアプリケーションが多く進歩し、またとても早かったです。ヒューマンコンピュータインターラクションにおいて、AJAXを投入する準備はすべて整いました。明日はユーザがログインとAJAXを使用して、質問に対する興味を宣言できるようにします。見逃さないで下さい。

`release_day_7`とタグ付けされた[askeetのSVNリポジトリ](http://svn.askeet.com/tags/release_day_7/)からまだ今日の分の全コードをダウンロードすることができます。[askeetのメーリングリスト](mailto:askeet-subscribe@symfony-project.com)は光速よりも速くあなたの質問に回答してくれます。
