Chapter 5 - Data Fixtures
=========================

## Introduction

Doctrine offers the ability to load small sets of sample test data by using a simple YAML syntax for specifying data to be loaded in to your object relationship hierarchy. It supports easily creating information for your tables and linking foreign keys between records.

>**Note**
>The following data fixture example use this YAML schema file in config/doctrine/schema.yml

    Client:
      columns:
        name: string(255)
        username: string(255)
        password: string(255)

    Store:
      columns:
        name: string(255)
        description: string(500)
        client_id: integer
      relations:
        Client:
          foreignAlias: Stores

## Simple User Data

Create data/fixtures/client.yml and load the following YAML code.

    Client:
      Client_1:
        name: Jonathan H. Wage
        username: jwage
        password: changeme
      Client_2:
        name: Fabien Potencier
        username: fabpot
        password: changeme
      Client_3:
        name: Dustin Whittle
        username: dwhittle
        password: changeme

Run the following commands to rebuild the database.

    $ ./symfony doctrine:build-all-reload

Now run a simple DQL query to inspect that the data was loaded properly.

    $ ./symfony doctrine:dql "FROM Client c"
    >> doctrine  executing dql query
    DQL: FROM Client c
    found 3 results
    -
      id: '1'
      name: 'Jonathan H. Wage'
      username: jwage
      password: changeme
    -
      id: '2'
      name: 'Fabien Potencier'
      username: fabpot
      password: changeme
    -
      id: '3'
      name: 'Dustin Whittle'
      username: dwhittle
      password: changeme

## Linking Relationships

Create data/fixtures/store.yml and load the following YAML data fixtures.

    Store:
      Store_1:
        name: The Wage Store
        description: My store
        Client: Client_1
      Store_2:
        name: symfony Store
        description: The symfony store
        Client: Client_2
      Store_3:
        name: Yahoo! Store
        description: The Yahoo! store
        Client: Client_3

Rebuild the database and run another DQL query to inspect the loaded data fixtures.

    $ ./symfony doctrine:build-all-reload

Now inspect the data with a little more complex query that joins the `Client` `Store` records.

    $ ./symfony doctrine:dql "FROM Client c, c.Stores s"
    >> doctrine  executing dql query
    DQL: FROM Client c, c.Stores s
    found 3 results
    -
      id: '1'
      name: 'Jonathan H. Wage'
      username: jwage
      password: changeme
      Stores:
        -
          id: '1'
          name: 'The Wage Store'
          description: 'My store'
          client_id: '1'
    -
      id: '2'
      name: 'Fabien Potencier'
      username: fabpot
      password: changeme
      Stores:
        -
          id: '2'
          name: 'symfony Store'
          description: 'The symfony store'
          client_id: '2'
    -
      id: '3'
      name: 'Dustin Whittle'
      username: dwhittle
      password: changeme
      Stores:
        -
          id: '3'
          name: 'Yahoo! Store'
          description: 'The Yahoo! store'
          client_id: '3'

## Many to Many

Use the following YAML schema file in config/doctrine/schema.yml with the example data fixtures.

    BlogPost:
      columns:
        title: string(255)
        body: clob
      relations:
        Tags:
          class: Tag
          refClass: BlogPostTag
          foreignAlias: BlogPosts

    BlogPostTag:
      columns:
        blog_post_id: integer
        tag_id: integer

    Tag:
      columns:
        name: string(255)

Load the below data fixtures in to data/fixtures/data.yml

    BlogPost:
      BlogPost_1:
        title: Test Blog Post
        body: This is the body of the test blog post
        Tags: [test, php, doctrine, orm]

    Tag:
      test:
        name: test
      php:
        name: php
      doctrine:
        name: doctrine
      orm:
        name: orm

Rebuild the database again and run a DQL query to see the loaded data.

    $ ./symfony doctrine:build-all-reload

Now inspect the data with another DQL query that fetches all `BlogPost` records and its related `Tags`

    $ ./symfony doctrine:dql "FROM BlogPost p, p.Tags"
    >> doctrine  executing dql query
    DQL: FROM BlogPost p, p.Tags
    found 1 results
    -
      id: '1'
      title: 'Test Blog Post'
      body: 'This is the body of the test blog post'
      Tags:
        -
          id: '1'
          name: test
        -
          id: '2'
          name: php
        -
          id: '3'
          name: doctrine
        -
          id: '4'
          name: orm

## Inline Data Fixtures

Doctrine offers the ability to specify data fixture relationships inline like below.

    Client:
      Client_1:
        name: Jonathan H. Wage
        username: jwage
        password: changeme
        Stores:
          Store_1:
            name: The Wage Store
            description: My store

    BlogPost:
      BlogPost_1:
        title: Test Blog Post
        body: This is the body of the test blog post
        Tags:
          test:
            name: test
          php:
            name: php
          doctrine:
            name: doctrine
          orm:
            name: orm

This alternative syntax can greatly reduce the length and complexity of you data fixtures.

>**TIP**
>More can be read about data fixtures in the Doctrine Manual [here](http://www.doctrine-project.org/documentation/manual/1_0?chapter=data-fixtures).