Chapter 2 - Connections
=======================

## Introduction

In this chapter we'll explain some things about Doctrine connections, how to configure them, how to use multiple of them and bind models to connections, how to create and drop your databases and other connection related activities.

The default `config/databases.yml` should look like the following. The only difference here is that it is sfDoctrineDatabase instead of sfPropelDatabase and the connection name is doctrine instead of propel.

    all:
      doctrine:
        class:          sfDoctrineDatabase
        param:
          dsn:          mysql://root@localhost/dbname

## Supported Drivers

Doctrine supports all drivers which PDO supports. PHP must be compiled with both PDO and the PDO_* drivers you wish to use. Below is a list of databases PDO will work with.

* MS SQL Server — Microsoft SQL Server and Sybase Functions (PDO_DBLIB)
* Firebird/Interbase — Firebird/Interbase Functions (PDO_FIREBIRD)
* IBM — IBM Functions (PDO_IBM)
* Informix — Informix Functions (PDO_INFORMIX)
* MySQL — MySQL Functions (PDO_MYSQL)
* Oracle — Oracle Functions (PDO_OCI)
* ODBC and DB2 — ODBC and DB2 Functions (PDO_ODBC)
* PostgreSQL — PostgreSQL Functions (PDO_PGSQL)
* SQLite — SQLite Functions (PDO_SQLITE)

## DSN

Doctrine offers two ways of specifying your DSN information. You can use the portable Doctrine style DSN or use the native PDO style DSN.

### Doctrine Style

Doctrine has a DSN syntax which is based off of PEAR MDB2 and is portable across all dbms.

    all:
      doctrine:
        class:          sfDoctrineDatabase
        param:
          dsn:          driver://username:password@host/database_name

### PDO Style

You may alternatively specify your DSN information in the PDO style syntax.

    all:
      doctrine:
        class:          sfDoctrineDatabase
        param:
          dsn:          driver:dbname=database_name;host=localhost
          username:     username
          password:     password

>**TIP**
>Using the PDO style syntax offers more flexibility and ability to specify non standard information about your connection to PDO. For example, when specifying non standard unix_socket paths or ports to use when connecting, specifying it in PDO syntax is more flexible.

## Import from Propel

Doctrine has the ability to generate schema files from existing databases so all you need to do is make your configured Doctrine database have the schema of the database you want to import in to Doctrine. Run the following command to generate your yaml schema files from the existing database.

    $ ./symfony doctrine:build-schema frontend
    >> doctrine  Generate YAML schema successfully from database

Now have a look in `config/doctrine/schema.yml` and you will see the yaml for the database. In this example we have a user table.

    CREATE TABLE user (id BIGINT AUTO_INCREMENT, username VARCHAR(255), password VARCHAR(255), PRIMARY KEY(id)) ENGINE = INNODB;

The above mysql table would generate a yaml schema like the following in `config/doctrine/schema.yml`

    ---
    User:
      tableName: user
      columns:
        id:
          type: integer(8)
          primary: true
          autoincrement: true
        username: string(255)
        password: string(255)

## Multiple Connections

Doctrine offers the ability to have multiple connections. You can easily bind models to connections so that queries are executed on the appropriate dbms. Below is an example `config/databases.yml` with multiple databases.

    all:
      master:
        class:          sfDoctrineDatabase
        param:
          dsn:          mysql://root@localhost/master
      client:
        class:          sfDoctrineDatabase
        param:
          dsn:          mysql://root@localhost/client

Now say we have a User model which you want to bind to the master database. You can simply do this directly in the definition of the model like below. Place the following YAML code in `config/doctrine/schema.yml`

    Client:
      connection: master
      columns:
        name: string(255)
        username: string(255)
        password: string(255)

Now each Client can have Stores but they are saved in a separate database from the Users.

    Store:
      connection: client
      attributes:
        export: tables
      columns:
        name: string(255)
        description: string(500)
        client_id: integer
      relations:
        Client:
         foreignAlias: Stores

>**Note**
>Because the tables are in separate databases the data can only be lazily loaded. Doctrine does not currently support generating sql for joining tables across databases. Also, notice the export attribute being set to tables. This tells Doctrine to only export the create table statement and not any foreign keys.

## Connection Attributes

sfDoctrinePlugin allows you to specify connection attributes directly in the `config/databases.yml` file like the following.

    all:
      doctrine:
        class:          sfDoctrineDatabase
        param:
          dsn:          mysql://root@localhost/dbname
          attributes:
            use_dql_callbacks: true

The attributes you specify here will be set on the Doctrine_Connection instances when the connection is created.

## Build Everything

Now that we have our connections and schema defined we can build everything with the following command. This command will drop your database if it already exists, re-create it, build your models from `config/doctrine/*.yml`, create the tables in your databases and load your data fixtures from `data/fixtures/*.yml`.

    ./symfony doctrine-build-all-reload frontend
    >> doctrine  Are you sure you wish to drop your databases? (y/n)
    y
    >> doctrine  Successfully dropped database f...nection "master" named "master"
    >> doctrine  Successfully dropped database f...nection "client" named "client"
    >> doctrine  Successfully created database f...nection "master" named "master"
    >> doctrine  Successfully created database f...nection "client" named "client"
    >> doctrine  Generated models successfully
    >> doctrine  Created tables successfully
    >> doctrine  Data was successfully loaded

>**Note**
>You can take a look at the models which were generated from your YAML schema files in lib/model/doctrine and lib/model/doctrine/generated. The files in the generated folder are re-written each time you build your models whereas the ones below the generated directory are not. You may customize your models by editing the classes in lib/model/doctrine.

Here is what the `lib/model/doctrine/generated/BaseClient.class.php` should look like.

    [php]
    /**
     * This class has been auto-generated by the Doctrine ORM Framework
     */
    abstract class BaseClient extends sfDoctrineRecord
    {
      public function setTableDefinition()
      {
        $this->setTableName('client');
        $this->hasColumn('name', 'string', 255, array('type' => 'string', 'length' => '255'));
        $this->hasColumn('username', 'string', 255, array('type' => 'string', 'length' => '255'));
        $this->hasColumn('password', 'string', 255, array('type' => 'string', 'length' => '255'));
      }

      public function setUp()
      {
        $this->hasMany('Store as Stores', array('local' => 'id',
                                                'foreign' => 'client_id'));
      }
    }

>**TIP**
>It is common practice to run the `./symfony doctrine:build-all-reload-test` command when developing. This will rebuild your entire environment and run the full test suite. This is a good command to run before committing new code to ensure no new regressions have occurred.

>**TIP**
>More can be read about connections in the Doctrine Manual [here](http://www.doctrine-project.org/documentation/manual/1_0?chapter=connection-management).