How to send an email
====================

Overview
--------

Sending mails is a web developer's everyday task, and symfony 1.1 let you do this easier than ever using [Swift Mailer](http://www.swiftmailer.org/).

Swift Mailer is a well thought, fully featured PHP5 object library that will cover 120% of your mailing needs.

It is available in a tagged SVN repository, so your project won't break just because the library is updated. It will be up to you to switch to a newer version.

Symfony's way to send emails from a project is very simple. You create a partial or a component that will render the e-mail content, and use Swift to send it in a flexible way.

Installing
----------

If your project is already using svn, you can install it using the `svn:externals` property:

    $ cd /path/to/symfony/project
    $ mkdir -p lib/vendor
    $ svn propedit svn:externals .

Then add the following line:

    swift http://swiftmailer.svn.sourceforge.net/svnroot/swiftmailer/tags/php5/3.3.3/lib/

If your project is not using SVN, you can still get this part as a subversion working copy by checking out the
tag.

    $ cd /path/to/symfony/project
    $ mkdir -p lib/vendor
    $ svn checkout http://swiftmailer.svn.sourceforge.net/svnroot/swiftmailer/tags/php5/3.3.3/lib/ swift

Just clear your cache to force class autoloading resolution to be flushed, and you're done with the installation.

Configuration
-------------

There is no mailer-specific configuration.

To keep your project flexible, you should use app.yml configuration file to keep hard-written e-mail adresses. This way, you can have different senders/receivers addresses depending on the environment you're on, and when one will need to change it, he won't have to dig all the project code. The place to change it will be just too obvious.

Render an e-mail
----------------

As of symfony 1.1 RC2, you can easily get rendered partials and components from an action:

    [php]
    $mailBody = $this->getPartial('mailBody', array('name' => 'John Doe'));

or

    [php]
    $mailBody = $this->getComponent('mail', 'mailBody', array('name' => 'John Doe'));

Send an HTML e-mail
-------------------

Then we send the mail rendered above using Swift:

    [php]
    try
    {
      /*
       * Create the mailer and message objects
       */
      $mailer = new Swift(new Swift_Connection_NativeMail());
      $message = new Swift_Message('Mail\'s subject', $mailBody, 'text/html');

      /*
       * Send
       */
      $mailer->send($message, $mailTo, $mailFrom);
      $mailer->disconnect();
    }
    catch (Exception $e)
    {
      $mailer->disconnect();

      // handle errors there
    }

Send a multipart e-mail
-----------------------

Some e-mail clients don't like HTML at all, so it's usually a good idea to provide your mail in both html and plain text.

    [php]
    try
    {
      /*
       * Create the mailer and message objects
       */
      $mailer = new Swift(new Swift_Connection_NativeMail());
      $message = new Swift_Message('Test mail subject');

      /*
       * Render message parts
       */
      $mailContext = array('name' => 'John Doe');
      $message->attach(new Swift_Message_Part($this->getPartial('mail/mailHtmlBody', $mailContext), 'text/html'));
      $message->attach(new Swift_Message_Part($this->getPartial('mail/mailTextBody', $mailContext), 'text/plain'));

      /*
       * Send
       */
      $mailer->send($message, $mailTo, $mailFrom);
      $mailer->disconnect();
    }
    catch (Exception $e)
    {
      $mailer->disconnect();

      // handle errors there
    }

Embed images
------------

To embed images in your mail, you need to get mail-dependant URLs from the embedded objects before rendering its content. Here's an
example how you can do it.

    [php]
    /*
     * Create the mailer and message objects
     */
    $mailer = new Swift(new Swift_Connection_NativeMail());
    $message = new Swift_Message('Test mail subject');

    /*
     * Inline images
     */
    $images = array();
    $images['symfony'] = new Swift_Message_Image(new Swift_File(sfConfig::get('sf_web_dir').'/images/symfony.gif'));
    $images['swift']   = new Swift_Message_Image(new Swift_File(sfConfig::get('sf_web_dir').'/images/swift.jpg'));

    $imageReferences = array();
    foreach ($images as $name => $image)
    {
      $imageReferences[$name] = $message->attach($image);
    }

    /*
     * Render message parts
     */
    $mailContext = array('name' => 'John Doe', 'images' => $imageReferences);
    $message->attach(new Swift_Message_Part($this->getPartial('mail/mailHtmlBody', $mailContext), 'text/html'));
    $message->attach(new Swift_Message_Part($this->getPartial('mail/mailTextBody', $mailContext), 'text/plain'));

    /*
     * Send
     */
    $mailer->send($message, $mailTo, $mailFrom);
    $mailer->disconnect();

Now in your component/partial template you can easily display those attached pictures like this:

    <img src="<?php echo $images['symfony']; ?>" alt="Symfony Project" />
    <img src="<?php echo $images['swift']; ?>" alt="Swift Mailer" />

Wasn't that easy?

Attachments
-----------

Attaching a document to a mail is as simple as you would expect it to be:

    [php]
    $message->attach(new Swift_Message_Attachment(new Swift_File($file), $filename, $mime_type));

Recipient lists
---------------

You'll often want to have more than one recipient or carbon copies for a mail. This is done using the Swift_RecipientList class.

    [php]
    $recipients = new Swift_RecipientList();
    $recipients->addTo($to);
    $recipients->addCc($cc);
    $recipients->addBcc($bcc);

If you're sending e-mails in a loop, don't forget to ->flush() your $recipients list, or you'll have a bad time explaining why someone recieved 500 copies of the same mailing list.

Sending emails from a task
--------------------------

The process is exactly the same as doing it from an action, with one little difference: You cannot use sfAction methods anymore.

You'll need to use get_partial() and get_component() functions in PartialHelper instead of sfAction::getPartial() and sfAction::getComponent() methods.

Getting documented
------------------

The SwiftMailer website if a gold mine of [documentation](http://swiftmailer.org/wikidocs/#the_connections "SwiftMailer Documentation")
and [tutorials](http://swiftmailer.org/wikidocs/#tutorials "SwiftMailer Tutorials").

And of course, [the full API reference](http://www.swiftmailer.org/api/php5/index.html) is available if you need it.
