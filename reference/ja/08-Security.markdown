security.yml 設定ファイル
========================

~`security.yml`~ 設定ファイルでは symfony アプリケーションの認証 (authentication) と承認 (authorization) を記述します。

>**TIP**
>`security.yml` ファイルからのコンフィギュレーション情報は [`user`](#chapter_05_user) ファクトリクラス (デフォルトは `sfBasicSecurityUser`) によって使われます。認証と承認の実行は `security` [フィルタ](#chapter_12_security)によって行われます。

アプリケーションが作られるとき、symfony はアプリケーションの `config/` ディレクトリでデフォルトの `security.yml` ファイルを生成します。このファイルではアプリケーション全体のセキュリティを記述します (`default` キーの下):

    [yml]
    default:
      is_secure: off

[設定ファイルの原則の章](#chapter_03)で説明したように、`security.yml` ファイルでは**コンフィギュレーションカスケードのメカニズム**がはたらき、**定数**を収めることができます。

アプリケーションのデフォルトコンフィギュレーションはモジュールの `config/` ディレクトリで `security.yml` ファイルを作ることでオーバーライドできます。メインキーはアクションの名前で接頭辞の `execute` はつけません (たとえば `executeIndex` メソッドであれば `index`)。

アクションがセキュアであるかどうかを判断するために、symfony は次の順序で情報を探します:

  * 存在するのであればモジュール設定ファイルでの特定のアクションのコンフィギュレーション;

  * 存在するのであればモジュール設定ファイルでのモジュール全体のコンフィギュレーション (`all` キーの下);

  * アプリケーションのデフォルトコンフィギュレーション (`default` キーの下)。

アクションにアクセスするのに必要なクレデンシャルを決めるのに同じ優先ルールが適用されます。

>**NOTE**
>`security.yml` 設定ファイルは PHP ファイルとしてキャッシュできます。処理は ~`sfSecurityConfigHandler`~ [クラス](#chapter_14_config_handlers_yml)によって自動管理されます。

~認証~
------

`security.yml` のコンフィギュレーションはそれぞれのアプリケーションごとにインストールされ、デフォルトではすべてのユーザーのアクセスが許可されます:

    [yml]
    default:
      is_secure: false

アプリケーションの ~`security.yml`~ ファイルのなかで `is_secure` キーを `true` にセットすれば、アプリケーション全体ですべてのユーザーの認証が必須になります。

>**NOTE**
>認証されていないユーザーがセキュアなアクションにアクセスしようとすると、symfony はリクエストを `settings.yml` で設定されている `login` アクションに転送します。

モジュールの認証要件を修正するには、`config/` ディレクトリで `security.yml` を作り `all` キーを定義します:

    [yml]
    all:
      is_secure: true

モジュールの単独のアクションの認証要件を修正するには、モジュールの `config/` ディレクトリで `security.yml` ファイルを作り、アクションの名前の下側でキーを定義します:

    [yml]
    index:
      is_secure: false

>**TIP**
>login アクションをセキュアにすることはできません。これは無限ループを避けるためです。

~承認~
------

*~クレデンシャル~*を定義することで、ユーザーが認証されるときに一部のアクションへのアクセスを細かく制限できます。クレデンシャルが定義されるとき、ユーザーはアクションにアクセスするための必須クレデンシャルをもたなければなりません:

    [yml]
    all:
      is_secure:   true
      credentials: admin

symfony のクレデンシャルシステムはシンプルで強力です。クレデンシャルはアプリケーションのセキュリティモデルを記述するために必要なものを表現できる文字列です (グループもしくはパーミッションのようなもの)。

`credentials` キーは複雑なクレデンシャル要件を記述するために配列記法を使ったブール演算をサポートします。

ユーザーがクレデンシャル A **かつ**クレデンシャル B をもたなければならない場合、これらのクレデンシャルを角かっこで囲みます:

    [yml]
    index:
      credentials: [A, B]

ユーザーがクレデンシャル A **または**クレデンシャル B をもたなければならないとき、これらのクレデンシャルを2つのペアの角かっこで囲みます:

    [yml]
    index:
      credentials: [[A, B]]

任意の数のクレデンシャルで任意の種類のブール式を記述するために複数のかっこを混ぜることもできます。
