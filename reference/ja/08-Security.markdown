security.yml 設定ファイル
========================

~`security.yml`~ 設定ファイルでは symfony アプリケーションの認証と認可を記述します。

>**TIP**
>`security.yml` ファイルからのコンフィギュレーション情報は [`user`](#chapter_05_user) ファクトリクラス (デフォルトは `sfBasicSecurityUser`) によって使われます。認証と認可の実施は `security` [フィルター](#chapter_12_security)によって行われます。

アプリケーションが作られるとき、symfony はアプリケーションの `config/` ディレクトリにデフォルトの `security.yml` ファイルを生成します。ここにはアプリケーション全体のセキュリティを記述します (`default` キーの下):

    [yml]
    default:
      is_secure: off

第3章で説明したように、`security.yml` ファイルでは[**コンフィギュレーションカスケードのメカニズム**](#chapter_03)がはたらき、[**定数**](#chapter_03)が収められます。

アプリケーションのデフォルトコンフィギュレーションはモジュールの `config/` ディレクトリで `security.yml` ファイルを作ることでオーバーライドできます。メインキーはプレフィックスの `execute` がつかないアクションの名前です (たとえば `index` キーは `executeIndex` メソッドの設定)。

アクションがセキュアかどうかを判断するために、symfony は次の順序で情報を探します:

  * 存在するのであればモジュール設定ファイル固有のアクションの設定;

  * 存在するのであればモジュール設定ファイルのモジュール全体の設定 (`all` キーの下);

  * アプリケーションのデフォルトコンフィギュレーション (`default` キーの下)。

アクションにアクセスするのに必要なクレデンシャルを決めるのに同じ優先ルールが使われます。

>**NOTE**
>`security.yml` 設定ファイルは PHP ファイルとしてキャッシュできます; 処理は ~`sfSecurityConfigHandler`~ [クラス](#chapter_14_config_handlers_yml)によって自動管理されます。

~認証~
------

`security.yml` のデフォルトコンフィギュレーションは、それぞれのアプリケーションごとにインストールされ、すべてのユーザーのアクセスを許可します:

    [yml]
    default:
      is_secure: off

アプリケーションの ~`security.yml`~ ファイルで `is_secure` キーを `on` にセットすれば、アプリケーション全体ですべてのユーザーの認証が必須になります。

>**NOTE**
>認証されていないユーザーがセキュアなアクションにアクセスしようとすると、symfony はリクエストを `settings.yml` で設定された `login` アクションに転送します。

モジュールの認証要件を修正するには、`config/` ディレクトリで `security.yml` を作り `all` キーを定義します:

    [yml]
    all:
      is_secure: on

モジュールの単独のアクションの認証要件を修正するには、モジュールの `config/` ディレクトリで `security.yml` ファイルを作り、アクションの名前の後でキーを定義します:

    [yml]
    index:
      is_secure: off

>**TIP**
>login アクションをセキュアにすることはできません。これは無限ループを避けるためです。

~認可~
------

ユーザーが認証されるとき、*~クレデンシャル~*を定義することで一部のアクションへのアクセスを細かく制限できます。クレデンシャルが定義されるとき、ユーザーはアクションにアクセスするための必須クレデンシャルを持たなければなりません:

    [yml]
    all:
      is_secure:   on
      credentials: admin

symfony のクレデンシャルのシステムはシンプルで強力です。クレデンシャルはアプリケーションのセキュリティモデルを記述するために必要なものを表現できる文字列です (グループもしくはパーミッションのようなもの)。

`credentials` キーは複雑なクレデンシャル要件を記述するための配列記法を使ったブール演算をサポートします。

ユーザーがクレデンシャル A **かつ**クレデンシャル B を持たなければならない場合、角かっこでクレデンシャルを囲みます:

    [yml]
    index:
      credentials: [A, B]

ユーザーがクレデンシャル A **または**クレデンシャル B を持たなければならないとき、2 つのペアの角かっこでこれらを囲みます:

    [yml]
    index:
      credentials: [[A, B]]

任意の数のクレデンシャルで任意の種類のブール式を記述するためにかっこを混ぜることもできます。
