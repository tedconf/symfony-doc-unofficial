security.yml設定ファイル
========================

~`security.yml`~設定ファイルにsymfonyアプリケーション用の認証と認可を記述します。

>**TIP**
>`security.yml`ファイルからのコンフィギュレーション情報は[`user`](#chapter_05_user)ファクトリクラス(デフォルトは`sfBasicSecurityUser`)によって使われます。
>認証と認可の施行は`security`[フィルター](#chapter_12_security)によって行われます。

アプリケーションが作成されるとき、symfonyはアプリケーションの`config/`ディレクトリにデフォルトの`security.yml`ファイルを生成します。
ここにはアプリケーション全体のセキュリティを記述します(`default`キーの下):

    [yml]
    default:
      is_secure: off

はじめの章で説明したように、`security.yml`ファイルは[**コンフィギュレーションカスケードのメカニズム**](#chapter_03_configuration_cascade)が有効になり、[**定数**](#chapter_03_constants)を格納することができます。

アプリケーションのデフォルトコンフィギュレーションはモジュールの`config/`ディレクトリで`security.yml`ファイルを作成することでオーバーライドできます。
メインキーはプレフィックスの`execute`を伴わないアクションの名前です(たとえば`index`キーは`executeIndex`メソッドの設定)。

アクションがセキュアかどうかを判断するために、symfonyは次の順序で情報を探します:

  * 存在するのであればモジュール設定ファイルの固有のアクションのための設定;

  * 存在するのであればモジュール設定ファイルのモジュール全体のための設定(`all`キーの下);

  * アプリケーションのデフォルト設定(`default`キーの下)。

アクションにアクセスするために必要なクレデンシャルを決定するために同じ優先ルールが使われます。

>**NOTE**
>`security.yml`設定ファイルはPHPファイルとしてキャッシュできます; 
>処理は~`sfSecurityConfigHandler`~[クラス](#chapter_14_config_handlers_yml)によって自動的に管理されます。

~認証~
------

`security.yml`のデフォルト設定は、それぞれのアプリケーションごとにインストールされ、だれでもアクセスを許可します:

    [yml]
    default:
      is_secure: off

アプリケーションの~`security.yml`~ファイルで`is_secure`キーを`on`にセットすることで、アプリケーション全体ですべてのユーザーの認証が必須になります。

>**NOTE**
>認証されていないユーザーがセキュアなアクションにアクセスしようとすると、symfonyはリクエストを`settings.yml`で設定された`login`アクションに転送します。

モジュールの認証要件を修正するには、`config/`ディレクトリで`security.yml`を作成し`all`キーを定義します:

    [yml]
    all:
      is_secure: on

モジュールの単独のアクションの認証要件を修正するには、モジュールの`config/`ディレクトリで`security.yml`ファイルを作成し、アクションの名前の後にキーを定義します:

    [yml]
    index:
      is_secure: off

>**TIP**
>loginアクションをセキュアにすることはできません。
>これは無限ループを避けるためです。

~認可~
------

ユーザーが認証されるとき、*~クレデンシャル~*を定義することで一部のアクションへのアクセスをさらに制限できます。
クレデンシャルが定義されたとき、ユーザーはアクションにアクセスする必須クレデンシャルを持たなければなりません:

    [yml]
    all:
      is_secure:   on
      credentials: admin

symfonyのクレデンシャルのシステムはシンプルで強力です。
クレデンシャルはアプリケーションのセキュリティモデルを記述するために必要なものを表現できる文字列です(グループもしくはパーミッションのようなもの)。

`credentials`キーは配列記法を使用することで複雑なクレデンシャル要件を記述するためのブール演算をサポートします。

ユーザーがクレデンシャルA**かつ**クレデンシャルBを持たなければならない場合、角かっこでクレデンシャルを囲みます:

    [yml]
    index:
      credentials: [A, B]

ユーザーがクレデンシャルA**または**クレデンシャルBを持たなければならないとき、2つのペアの角かっこでこれらを囲みます:

    [yml]
    index:
      credentials: [[A, B]]

任意の数のクレデンシャルで任意の種類のブール式を記述するためにかっこを混ぜることもできます。
