cache.yml 設定ファイル
=====================

~`cache.yml`~ 設定ファイルはビューレイヤーのキャッシュコンフィギュレーションを記述します。この設定ファイルは `settings.yml` で [`cache`](#chapter_04_sub_cach) 設定が有効な場合のみアクティブになります。

>**TIP**
>クラスのコンフィギュレーションはキャッシュのために使われ関連設定は [`view_cache_manager`](#chapter_05_view_cache_manager) と `factories.yml` 設定ファイルの [`view_cache`](#chapter_05_view_cache) セクションで行われます。

アプリケーションが作られるとき、symfony はアプリケーションの `config/` ディレクトリにデフォルトの `cache.yml` ファイルを生成します。このファイルはアプリケーション全体のキャッシュを記述します (`default` キーの下)。デフォルトでは、キャッシュはグローバルスコープで `off` にセットされます:

    [yml]
    default:
      enabled:     off
      with_layout: false
      lifetime:    86400

>**TIP**
>デフォルトでは `enabled` 設定は `false` にセットされるので、キャッシュを選りわけて有効にする必要があります。ほかの方法もあります: グローバルスコープのキャッシュを有効にし、キャッシュする必要のない特定のページでキャッシュを無効にします。どちらのほうがアプリケーションの作業量が少ないのかによって選ぶ方法が決まります。

第 3 章で説明したように、`cache.yml` ファイルは[**コンフィギュレーションカスケードのメカニズム**](#chapter_03)が有効になり、[**定数**](#chapter_03)を収めることができます。

>**NOTE**
>`cache.yml` 設定ファイルは PHP ファイルとしてキャッシュされます; 処理は ~`sfCacheConfigHandler`~ [クラス](#chapter_14_config_handlers_yml)によって自動管理されます。

アプリケーションのデフォルトコンフィギュレーションはモジュールの `config/` ディレクトリのなかで `cache.yml` ファイルを作ることでモジュールのためにオーバーライドできます。メインキーはプレフィックスの `execute` なしのアクションの名前です (たとえば `index` キーは `executeIndex` メソッドです)。名前にアンダースコア (`_`) のプレフィックスをつけることでパーシャルもしくはコンポーネントもキャッシュできます。

アクションがキャッシュされるかどうか決定するのに、symfony は次の順序で情報を探します:

  * 存在するのであれば、モジュール設定ファイルでの特定のアクション、パーシャル、コンポーネントのコンフィギュレーション;

  * 存在するのであれば、モジュール設定ファイルでのモジュール全体のコンフィギュレーション (`all` キーの下);

  * アプリケーションのデフォルトコンフィギュレーション (`default` キーの下)

>**CAUTION**
>クエリ文字列の `GET` パラメーターで送信されるリクエストや、`POST`、`PUT` もしくは `DELETE` メソッドで投稿されたリクエストはコンフィギュレーションに関わらずけっしてキャッシュされません。

~`enabled`~
-----------

*デフォルト値*: `off`

`enabled` 設定は現在のスコープでのキャッシュを有効もしくは無効にします。

~`with_layout`~
---------------

*デフォルト値*: `false`

`with_layout` 設定はページ全体 (`true`)、かアクションのみ (`false`) をキャッシュするかを決定します。

>**NOTE**
>`with_layout` オプションはパーシャルとコンポーネントキャッシュには考慮されません。これらはレイアウトによってデコレートできないからです。

~`lifetime`~
------------

*デフォルト値*: `86400`

`lifetime` 設定はサーバーサイドキャッシュの有効期間を秒単位で定義します (`86400` 秒は 1 日に等しい)。

~`client_lifetime`~
-------------------

*デフォルト値*: `lifetime` の値と同じ

`client_lifetime` 設定はクライアントサイドキャッシュの有効期間を秒単位で定義します。

すでに `Last-Modified` もしくは `Expires` ヘッダーがセットされていないかぎり、この設定は `Expires` ヘッダーと `max-cache` キャッシュコントロール変数を自動的にセットするために使われます。

この値を`0`にセットすることでクライアントサイドキャッシュを無効にできます。

~`contextual`~
--------------

*デフォルト値*: `false`

`contextual` 設定はキャッシュが現在のページのコンテキストに依存するかどうかを決定します。それゆえ設定はパーシャルとコンポーネントに使われるときのみ意味があります。

インクルードされるテンプレートによってパーシャルの出力が異なるとき、パーシャルはコンテキストにある (contextual) と考えられ、`contextual` 設定は `true` にセットしなければなりません。デフォルトでは、設定は `false` にセットされます。`false` にセットされているということはパーシャルとコンポーネントがどこでインクルードされても、出力がつねに同じであることを意味します。

>**NOTE**
>パラメーターのセットが異なればキャッシュは明らかに異なります。
