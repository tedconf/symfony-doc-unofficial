cache.yml設定ファイル
====================

~`cache.yml`~設定ファイルはビューレイヤー用のキャッシュ設定を記述します。
この設定ファイルは`settings.yml`で[`cache`](#chapter_04_sub_cach)設定が有効な場合のみアクティブになります。

>**TIP**
>クラスのコンフィギュレーションはキャッシュのために使われ関連設定は[`view_cache_manager`](#chapter_05_view_cache_manager)と`factories.yml`設定ファイルの[`view_cache`](#chapter_05_view_cache)セクションで行われます。

アプリケーションが作成されるとき、symfonyはアプリケーションの`config/`ディレクトリにデフォルトの`cache.yml`ファイルを生成します。このファイルはアプリケーション全体のキャッシュを記述します(`default`キーの下)。
デフォルトでは、キャッシュはグローバルスコープで`off`にセットされます:

    [yml]
    default:
      enabled:     off
      with_layout: false
      lifetime:    86400

>**TIP**
>デフォルトでは`enabled`設定は`false`にセットされるので、キャッシュを選り分けて有効にする必要があります。
>他の方法もあります:
>グローバルスコープのキャッシュを有効にし、キャッシュする必要のない特定のページでキャッシュを無効にします。
>どちらのほうがアプリケーションの作業量が少ないのかによって選ぶ方法が決まります。

はじめの章で説明したように、`cache.yml`ファイルは[**コンフィギュレーションカスケードのメカニズム**](#chapter_03_configuration_cascade)が有効になり、[**定数**](#chapter_03_constants)を格納することができます。

>**NOTE**
>`cache.yml`設定ファイルはPHPファイルとしてキャッシュされます;
>処理は~`sfCacheConfigHandler`~[クラス](#chapter_14_config_handlers_yml)によって自動的に管理されます。

アプリケーションのデフォルトコンフィギュレーションはモジュールの`config/`ディレクトリの中で`cache.yml`ファイルを作ることでモジュールのためにオーバーライドできます。
メインキーはプレフィックスの`execute`なしのアクションの名前です(たとえば`index`キーは`executeIndex`メソッドです)。
名前にアンダースコア(`_`)のプレフィックスをつけることでパーシャルもしくはコンポーネントもキャッシュできます。

アクションがキャッシュされるかどうか決定するのに、symfonyは次の順序で情報を探します:

  * 存在するのであれば、モジュール設定ファイルでの、
    特定のアクション、パーシャル、コンポーネント用のコンフィギュレーション;

  * 存在するのであれば、モジュール設定ファイルでのモジュール全体用のコンフィギュレーション(`all`キーの下);

  * アプリケーションのデフォルトコンフィギュレーション(`default`キーの下)

>**CAUTION**
>クエリーストリングの`GET`パラメーターで送信されるリクエストや、`POST`、`PUT`もしくは`DELETE`メソッドで投稿されたリクエストはコンフィギュレーションに関わらず決してキャッシュされません。

~`enabled`~
-----------

*デフォルト*: `off`

`enabled`設定は現在のスコープでのキャッシュを有効もしくは無効にします。

~`with_layout`~
---------------

*デフォルト*: `false`

`with_layout`設定はページ全体(`true`)、かアクションのみ(`false`)をキャッシュするかを決定します。

>**NOTE**
>`with_layout`オプションはパーシャルとコンポーネントキャッシュには考慮されません。
>これらはレイアウトによってデコレートできないからです。

~`lifetime`~
------------

*デフォルト*: `86400`

`lifetime`設定はサーバーサイドキャッシュの有効期間を秒単位で定義します(`86400`秒は1日に等しい)。

~`client_lifetime`~
-------------------

*デフォルト*: `lifetime`の値と同じ

`client_lifetime`設定はクライアントサイドキャッシュの有効期間を秒単位で定義します。

すでに`Last-Modified`もしくは`Expires`ヘッダーがセットされていない限り、
この設定は`Expires`ヘッダーと
`max-cache`キャッシュコントロール変数を自動的にセットするために使われます。

この値を`0`にセットすることでクライアントサイドキャッシュを無効にできます。

~`contextual`~
--------------

*デフォルト*: `false`

`contextual`設定はキャッシュが現在のページのコンテキストに依存するかどうかを決定します。
それゆえ設定はパーシャルとコンポーネント用に使われるときのみ意味があります。

インクルードされるテンプレートによってパーシャルの出力が異なるとき、
パーシャルはコンテキスト上(contextual)であると考えられ、`contextual`設定は`true`にセットしなければなりません。
デフォルトでは、設定は`false`にセットされます。 
`false`にセットされているということはパーシャルとコンポーネントがどこでインクルードされても、出力が常に同じであることを意味します。

>**NOTE**
>異なるパラメーターのセットに対してキャッシュは明らかに異なります。
